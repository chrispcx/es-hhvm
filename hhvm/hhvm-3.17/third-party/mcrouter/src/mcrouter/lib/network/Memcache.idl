namespace facebook::memcache;

import "mcrouter/lib/network/Common.idl"

request McGetRequest {
  id: 1;
  name: "get";
  reply: McGetReply;

  1: Keys<IOBuf> key;
  2: uint64_t flags;
};

reply McGetReply {
  1: Result result;
  2: Optional<IOBuf> value;
  3: uint64_t flags;
  4: string message;
  5: int16_t appSpecificErrorCode;
};

request McSetRequest {
  id: 2;
  name: "set";
  reply: McSetReply;

  1: Keys<IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: IOBuf value;
};

reply McSetReply {
  1: Result result;
  2: uint64_t flags;
  3: IOBuf value;
  4: string message;
  5: int16_t appSpecificErrorCode;
};

request McDeleteRequest {
  id: 3;
  name: "delete";
  reply: McDeleteReply;

  1: Keys<IOBuf> key;
  2: uint64_t flags;
  3: int32_t exptime;
  4: IOBuf value;
};

reply McDeleteReply {
  1: Result result;
  2: uint64_t flags;
  3: IOBuf value;
  4: string message;
  5: int16_t appSpecificErrorCode;
};

request McLeaseGetRequest {
  id: 4;
  name: "lease-get";
  reply: McLeaseGetReply;

  1: Keys<IOBuf> key;
};

reply McLeaseGetReply {
  1: Result result;
  2: int64_t leaseToken;
  3: Optional<IOBuf> value;
  4: uint64_t flags;
  5: string message;
  6: int16_t appSpecificErrorCode;
};

request McLeaseSetRequest {
  id: 5;
  name: "lease-set";
  reply: McLeaseSetReply;

  1: Keys<IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: IOBuf value;
  5: int64_t leaseToken;
};

reply McLeaseSetReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

request McAddRequest {
  id: 6;
  name: "add";
  reply: McAddReply;

  1: Keys<IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: IOBuf value;
};

reply McAddReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

request McReplaceRequest {
  id: 7;
  name: "replace";
  reply: McReplaceReply;

  1: Keys<IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: IOBuf value;
};

reply McReplaceReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

request McGetsRequest {
  id: 8;
  name: "gets";
  reply: McGetsReply;

  1: Keys<IOBuf> key;
};

reply McGetsReply {
  1: Result result;
  2: uint64_t casToken;
  3: Optional<IOBuf> value;
  4: uint64_t flags;
  5: string message;
  6: int16_t appSpecificErrorCode;
};

request McCasRequest {
  id: 9;
  name: "cas";
  reply: McCasReply;

  1: Keys<IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: IOBuf value;
  5: uint64_t casToken;
};

reply McCasReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

request McIncrRequest {
  id: 10;
  name: "incr";
  reply: McIncrReply;

  1: Keys<IOBuf> key;
  2: int64_t delta;
};

reply McIncrReply {
  1: Result result;
  2: int64_t delta;
  3: string message;
  4: int16_t appSpecificErrorCode;
};

request McDecrRequest {
  id: 11;
  name: "decr";
  reply: McDecrReply;

  1: Keys<IOBuf> key;
  2: int64_t delta;
};

reply McDecrReply {
  1: Result result;
  2: int64_t delta;
  3: string message;
  4: int16_t appSpecificErrorCode;
};

request McMetagetRequest {
  id: 12;
  name: "metaget";
  reply: McMetagetReply;

  1: Keys<IOBuf> key;
};

reply McMetagetReply {
  1: Result result;
  2: int32_t age; # can be -1
  3: int32_t exptime;
  4: int16_t ipv;
  5: string ipAddress;
  6: string message;
  7: int16_t appSpecificErrorCode;
};

request McAppendRequest {
  id: 14;
  name: "append";
  reply: McAppendReply;

  1: Keys<IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: IOBuf value;
};

reply McAppendReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

request McPrependRequest {
  id: 15;
  name: "prepend";
  reply: McPrependReply;

  1: Keys<IOBuf> key;
  2: int32_t exptime;
  3: uint64_t flags;
  4: IOBuf value;
};

reply McPrependReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

request McTouchRequest {
  id: 16;
  name: "touch";
  reply: McTouchReply;

  1: Keys<IOBuf> key;
  2: int32_t exptime;
};

reply McTouchReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

request McFlushReRequest {
  id: 21;
  name: "flushre";
  reply: McFlushReReply;

  1: Keys<IOBuf> key;
};

reply McFlushReReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

request McFlushAllRequest {
  id: 22;
  name: "flushall";
  reply: McFlushAllReply;

  1: Keys<IOBuf> key;
  2: int32_t delay;
};

reply McFlushAllReply {
  1: Result result;
  2: string message;
  3: int16_t appSpecificErrorCode;
};

service {
  additional_requests: [];
  enable_shutdown: false;
};
