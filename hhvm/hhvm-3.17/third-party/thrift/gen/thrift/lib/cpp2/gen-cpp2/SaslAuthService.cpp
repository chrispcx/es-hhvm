/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/lib/cpp2/gen-cpp2/SaslAuthService.h"

#include "thrift/lib/cpp2/gen-cpp2/SaslAuthService.tcc"

#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace apache { namespace thrift { namespace sasl {

std::unique_ptr<apache::thrift::AsyncProcessor> SaslAuthServiceSvIf::getProcessor() {
  return folly::make_unique<SaslAuthServiceAsyncProcessor>(this);
}

void SaslAuthServiceSvIf::authFirstRequest( ::apache::thrift::sasl::SaslReply& /*_return*/, std::unique_ptr< ::apache::thrift::sasl::SaslStart> /*saslStart*/) {
  throw apache::thrift::TApplicationException("Function authFirstRequest is unimplemented");
}

folly::Future<std::unique_ptr< ::apache::thrift::sasl::SaslReply>> SaslAuthServiceSvIf::future_authFirstRequest(std::unique_ptr< ::apache::thrift::sasl::SaslStart> saslStart) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::apache::thrift::sasl::SaslReply& _return) { authFirstRequest(_return, std::move(saslStart)); });
}

void SaslAuthServiceSvIf::async_tm_authFirstRequest(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::apache::thrift::sasl::SaslReply>>> callback, std::unique_ptr< ::apache::thrift::sasl::SaslStart> saslStart) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_authFirstRequest(std::move(saslStart)); });
}

void SaslAuthServiceSvIf::authNextRequest( ::apache::thrift::sasl::SaslReply& /*_return*/, std::unique_ptr< ::apache::thrift::sasl::SaslRequest> /*saslRequest*/) {
  throw apache::thrift::TApplicationException("Function authNextRequest is unimplemented");
}

folly::Future<std::unique_ptr< ::apache::thrift::sasl::SaslReply>> SaslAuthServiceSvIf::future_authNextRequest(std::unique_ptr< ::apache::thrift::sasl::SaslRequest> saslRequest) {
  return apache::thrift::detail::si::future_returning_uptr([&]( ::apache::thrift::sasl::SaslReply& _return) { authNextRequest(_return, std::move(saslRequest)); });
}

void SaslAuthServiceSvIf::async_tm_authNextRequest(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::apache::thrift::sasl::SaslReply>>> callback, std::unique_ptr< ::apache::thrift::sasl::SaslRequest> saslRequest) {
  apache::thrift::detail::si::async_tm(this, std::move(callback), [&] { return future_authNextRequest(std::move(saslRequest)); });
}

void SaslAuthServiceSvNull::authFirstRequest( ::apache::thrift::sasl::SaslReply& /*_return*/, std::unique_ptr< ::apache::thrift::sasl::SaslStart> /*saslStart*/) {}

void SaslAuthServiceSvNull::authNextRequest( ::apache::thrift::sasl::SaslReply& /*_return*/, std::unique_ptr< ::apache::thrift::sasl::SaslRequest> /*saslRequest*/) {}

const char* SaslAuthServiceAsyncProcessor::getServiceName() {
  return "SaslAuthService";
}

folly::Optional<std::string> SaslAuthServiceAsyncProcessor::getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) {
  return apache::thrift::detail::ap::get_cache_key(buf, protType, cacheKeyMap_);
}

void SaslAuthServiceAsyncProcessor::process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) {
  apache::thrift::detail::ap::process(this, std::move(req), std::move(buf), protType, context, eb, tm);
}

bool SaslAuthServiceAsyncProcessor::isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) {
  return apache::thrift::detail::ap::is_oneway_method(buf, header, onewayMethods_);
}

std::unordered_set<std::string> SaslAuthServiceAsyncProcessor::onewayMethods_ {};
std::unordered_map<std::string, int16_t> SaslAuthServiceAsyncProcessor::cacheKeyMap_ {};
const SaslAuthServiceAsyncProcessor::BinaryProtocolProcessMap& SaslAuthServiceAsyncProcessor::getBinaryProtocolProcessMap() {
  return binaryProcessMap_;
}

const SaslAuthServiceAsyncProcessor::BinaryProtocolProcessMap SaslAuthServiceAsyncProcessor::binaryProcessMap_ {
  {"authFirstRequest", &SaslAuthServiceAsyncProcessor::_processInThread_authFirstRequest<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
  {"authNextRequest", &SaslAuthServiceAsyncProcessor::_processInThread_authNextRequest<apache::thrift::BinaryProtocolReader, apache::thrift::BinaryProtocolWriter>},
};

const SaslAuthServiceAsyncProcessor::CompactProtocolProcessMap& SaslAuthServiceAsyncProcessor::getCompactProtocolProcessMap() {
  return compactProcessMap_;
}

const SaslAuthServiceAsyncProcessor::CompactProtocolProcessMap SaslAuthServiceAsyncProcessor::compactProcessMap_ {
  {"authFirstRequest", &SaslAuthServiceAsyncProcessor::_processInThread_authFirstRequest<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
  {"authNextRequest", &SaslAuthServiceAsyncProcessor::_processInThread_authNextRequest<apache::thrift::CompactProtocolReader, apache::thrift::CompactProtocolWriter>},
};

}}} // apache::thrift::sasl
namespace apache { namespace thrift {

}} // apache::thrift
