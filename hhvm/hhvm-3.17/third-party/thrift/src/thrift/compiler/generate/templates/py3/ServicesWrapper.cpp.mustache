{{!

  Copyright 2016 Facebook, Inc.

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.

}}{{!

This is a top level C++ file that generates an implementation of the C++
Services interface. That implementation keeps a reference to a Pyobject, which
is supposed to be the Python handler for that service, as written by the end
user. It has lightweight wrappers of each service method (which accept futures)
that pass the python object and a promise return code into the functions
defined in ServicesCallbacks, along with appropriate arguments.

}}
{{> AutoGeneratedC}}

#include <{{program:includePrefix}}gen-py3/{{program:name}}_services_wrapper.h>
{{! This one is generated by cython rather than thrift: }}
#include <{{program:includePrefix}}gen-py3/{{program:name}}_services.h>
#include <thrift/lib/cpp2/async/AsyncProcessor.h>

{{#program:cppNamespaces}}namespace {{value}} {
{{/program:cppNamespaces}}
{{#program:services}}

{{service:name}}Wrapper::{{service:name}}Wrapper(PyObject *obj)
  : if_object(obj)
  {
    Py_XINCREF(this->if_object);
  }

{{service:name}}Wrapper::~{{service:name}}Wrapper() {
    Py_XDECREF(this->if_object);
}

{{#service:functions}}
folly::Future<{{#function:returnType}}{{> CppFieldType}}{{/function:returnType}}>{{!
}} {{service:name}}Wrapper::future_{{function:name}}({{#function:args}}
  {{#field:type}}{{> CppFieldType}}{{/field:type}} {{field:name}}{{^last?}},{{/last?}}{{#last?}}
{{/last?}}{{/function:args}}) {
  {{#function:returnType}}folly::Promise<{{>CppFieldType}}>{{/function:returnType}} promise;
  auto future = promise.getFuture();
  call_cy_{{service:name}}_{{function:name}}(
    this->if_object,
    std::move(promise){{#function:args}},
    {{#field:type}}{{> CppPassField}}{{/field:type}}{{/function:args}}

  );
  return future;
}

{{/service:functions}}
std::shared_ptr<apache::thrift::ServerInterface> {{service:name}}Interface(PyObject *if_object) {
  return std::make_shared<{{service:name}}Wrapper>(if_object);
}
{{^last?}}

{{/last?}}
{{/program:services}}{{!
}}{{#program:cppNamespaces}}
} // namespace {{value}}
{{/program:cppNamespaces}}
