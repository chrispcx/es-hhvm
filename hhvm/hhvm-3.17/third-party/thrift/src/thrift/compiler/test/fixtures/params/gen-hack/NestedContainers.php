<?hh
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

interface NestedContainersAsyncIf extends \IThriftAsyncIf {
  /**
   * Original thrift definition:-
   * void
   *   mapList(1: map<i32, list<i32>> foo);
   */
  public function mapList(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void>;

  /**
   * Original thrift definition:-
   * void
   *   mapSet(1: map<i32, set<i32>> foo);
   */
  public function mapSet(\Indexish<int, Set<int>> $foo): Awaitable<void>;

  /**
   * Original thrift definition:-
   * void
   *   listMap(1: list<map<i32, i32>> foo);
   */
  public function listMap(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void>;

  /**
   * Original thrift definition:-
   * void
   *   listSet(1: list<set<i32>> foo);
   */
  public function listSet(\Indexish<int, Set<int>> $foo): Awaitable<void>;

  /**
   * Original thrift definition:-
   * void
   *   turtles(1: list<list<map<i32, map<i32, set<i32>>>>> foo);
   */
  public function turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): Awaitable<void>;
}

interface NestedContainersIf extends \IThriftSyncIf {
  /**
   * Original thrift definition:-
   * void
   *   mapList(1: map<i32, list<i32>> foo);
   */
  public function mapList(\Indexish<int, \Indexish<int, int>> $foo): void;

  /**
   * Original thrift definition:-
   * void
   *   mapSet(1: map<i32, set<i32>> foo);
   */
  public function mapSet(\Indexish<int, Set<int>> $foo): void;

  /**
   * Original thrift definition:-
   * void
   *   listMap(1: list<map<i32, i32>> foo);
   */
  public function listMap(\Indexish<int, \Indexish<int, int>> $foo): void;

  /**
   * Original thrift definition:-
   * void
   *   listSet(1: list<set<i32>> foo);
   */
  public function listSet(\Indexish<int, Set<int>> $foo): void;

  /**
   * Original thrift definition:-
   * void
   *   turtles(1: list<list<map<i32, map<i32, set<i32>>>>> foo);
   */
  public function turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): void;
}

trait NestedContainersClientBase {
  require extends ThriftClientBase;

  protected function sendImpl_mapList(\Indexish<int, \Indexish<int, int>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_mapList_args();
    $args->foo = (new Map($foo))->map(
      $_val0 ==> (new Vector($_val0))
    );
    try {
      $this->eventHandler_->preSend('mapList', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'mapList', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'mapList', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('mapList', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('mapList', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('mapList', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('mapList', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('mapList', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_mapList(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('mapList', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_mapList_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_mapList_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_mapList_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("mapList failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('mapList', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('mapList', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('mapList', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('mapList', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('mapList', $expectedsequenceid, null);
return;
  }

  protected function sendImpl_mapSet(\Indexish<int, Set<int>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_mapSet_args();
    $args->foo = (new Map($foo));
    try {
      $this->eventHandler_->preSend('mapSet', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'mapSet', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'mapSet', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('mapSet', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('mapSet', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('mapSet', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('mapSet', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('mapSet', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_mapSet(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('mapSet', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_mapSet_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_mapSet_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_mapSet_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("mapSet failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('mapSet', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('mapSet', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('mapSet', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('mapSet', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('mapSet', $expectedsequenceid, null);
return;
  }

  protected function sendImpl_listMap(\Indexish<int, \Indexish<int, int>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_listMap_args();
    $args->foo = (new Vector($foo))->map(
      $_val0 ==> (new Map($_val0))
    );
    try {
      $this->eventHandler_->preSend('listMap', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'listMap', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'listMap', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('listMap', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('listMap', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('listMap', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('listMap', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('listMap', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_listMap(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('listMap', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_listMap_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_listMap_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_listMap_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("listMap failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('listMap', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('listMap', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('listMap', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('listMap', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('listMap', $expectedsequenceid, null);
return;
  }

  protected function sendImpl_listSet(\Indexish<int, Set<int>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_listSet_args();
    $args->foo = (new Vector($foo));
    try {
      $this->eventHandler_->preSend('listSet', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'listSet', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'listSet', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('listSet', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('listSet', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('listSet', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('listSet', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('listSet', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_listSet(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('listSet', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_listSet_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_listSet_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_listSet_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("listSet failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('listSet', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('listSet', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('listSet', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('listSet', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('listSet', $expectedsequenceid, null);
return;
  }

  protected function sendImpl_turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): int {
    $currentseqid = $this->getNextSequenceID();
    $args = new NestedContainers_turtles_args();
    $args->foo = (new Vector($foo))->map(
      $_val0 ==> (new Vector($_val0))->map(
        $_val1 ==> (new Map($_val1))->map(
          $_val2 ==> (new Map($_val2))
        )
      )
    );
    try {
      $this->eventHandler_->preSend('turtles', $args, $currentseqid);
      if ($this->output_ instanceof \TBinaryProtocolAccelerated)
      {
        thrift_protocol_write_binary($this->output_, 'turtles', \TMessageType::CALL, $args, $currentseqid, $this->output_->isStrictWrite(), false);
      }
      else if ($this->output_ instanceof \TCompactProtocolAccelerated)
      {
        thrift_protocol_write_compact($this->output_, 'turtles', \TMessageType::CALL, $args, $currentseqid, false);
      }
      else
      {
        $this->output_->writeMessageBegin('turtles', \TMessageType::CALL, $currentseqid);
        $args->write($this->output_);
        $this->output_->writeMessageEnd();
        $this->output_->getTransport()->flush();
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->sendError('turtles', $args, $currentseqid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postSend('turtles', $args, $currentseqid);
          return $currentseqid;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->sendError('turtles', $args, $currentseqid, $ex);
      throw $ex;
    }
    $this->eventHandler_->postSend('turtles', $args, $currentseqid);
    return $currentseqid;
  }

  protected function recvImpl_turtles(?int $expectedsequenceid = null): void {
    try {
      $this->eventHandler_->preRecv('turtles', $expectedsequenceid);
      if ($this->input_ instanceof \TBinaryProtocolAccelerated) {
        $result = thrift_protocol_read_binary($this->input_, 'NestedContainers_turtles_result', $this->input_->isStrictRead());
      } else if ($this->input_ instanceof \TCompactProtocolAccelerated)
      {
        $result = thrift_protocol_read_compact($this->input_, 'NestedContainers_turtles_result');
      }
      else
      {
        $rseqid = 0;
        $fname = '';
        $mtype = 0;

        $this->input_->readMessageBegin($fname, $mtype, $rseqid);
        if ($mtype == \TMessageType::EXCEPTION) {
          $x = new \TApplicationException();
          $x->read($this->input_);
          $this->input_->readMessageEnd();
          throw $x;
        }
        $result = new NestedContainers_turtles_result();
        $result->read($this->input_);
        $this->input_->readMessageEnd();
        if ($expectedsequenceid !== null && ($rseqid != $expectedsequenceid)) {
          throw new \TProtocolException("turtles failed: sequence id is out of order");
        }
      }
    } catch (\THandlerShortCircuitException $ex) {
      switch ($ex->resultType) {
        case \THandlerShortCircuitException::R_EXPECTED_EX:
          $this->eventHandler_->recvException('turtles', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_UNEXPECTED_EX:
          $this->eventHandler_->recvError('turtles', $expectedsequenceid, $ex->result);
          throw $ex->result;
        case \THandlerShortCircuitException::R_SUCCESS:
        default:
          $this->eventHandler_->postRecv('turtles', $expectedsequenceid, $ex->result);
          return;
      }
    } catch (Exception $ex) {
      $this->eventHandler_->recvError('turtles', $expectedsequenceid, $ex);
      throw $ex;
    }
          $this->eventHandler_->postRecv('turtles', $expectedsequenceid, null);
return;
  }

}

class NestedContainersAsyncClient extends ThriftClientBase implements NestedContainersAsyncIf {
  use NestedContainersClientBase;

  /**
   * Original thrift definition:-
   * void
   *   mapList(1: map<i32, list<i32>> foo);
   */
  public async function mapList(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_mapList($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_mapList($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   mapSet(1: map<i32, set<i32>> foo);
   */
  public async function mapSet(\Indexish<int, Set<int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_mapSet($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_mapSet($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   listMap(1: list<map<i32, i32>> foo);
   */
  public async function listMap(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_listMap($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_listMap($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   listSet(1: list<set<i32>> foo);
   */
  public async function listSet(\Indexish<int, Set<int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_listSet($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_listSet($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   turtles(1: list<list<map<i32, map<i32, set<i32>>>>> foo);
   */
  public async function turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_turtles($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_turtles($currentseqid);
  }

}

class NestedContainersClient extends ThriftClientBase implements NestedContainersIf {
  use NestedContainersClientBase;

  /**
   * Original thrift definition:-
   * void
   *   mapList(1: map<i32, list<i32>> foo);
   */
  public function mapList(\Indexish<int, \Indexish<int, int>> $foo): void {
    $currentseqid = $this->sendImpl_mapList($foo);
    $this->recvImpl_mapList($currentseqid);
  }

  public async function gen_mapList(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_mapList($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_mapList($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   mapSet(1: map<i32, set<i32>> foo);
   */
  public function mapSet(\Indexish<int, Set<int>> $foo): void {
    $currentseqid = $this->sendImpl_mapSet($foo);
    $this->recvImpl_mapSet($currentseqid);
  }

  public async function gen_mapSet(\Indexish<int, Set<int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_mapSet($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_mapSet($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   listMap(1: list<map<i32, i32>> foo);
   */
  public function listMap(\Indexish<int, \Indexish<int, int>> $foo): void {
    $currentseqid = $this->sendImpl_listMap($foo);
    $this->recvImpl_listMap($currentseqid);
  }

  public async function gen_listMap(\Indexish<int, \Indexish<int, int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_listMap($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_listMap($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   listSet(1: list<set<i32>> foo);
   */
  public function listSet(\Indexish<int, Set<int>> $foo): void {
    $currentseqid = $this->sendImpl_listSet($foo);
    $this->recvImpl_listSet($currentseqid);
  }

  public async function gen_listSet(\Indexish<int, Set<int>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_listSet($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_listSet($currentseqid);
  }

  /**
   * Original thrift definition:-
   * void
   *   turtles(1: list<list<map<i32, map<i32, set<i32>>>>> foo);
   */
  public function turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): void {
    $currentseqid = $this->sendImpl_turtles($foo);
    $this->recvImpl_turtles($currentseqid);
  }

  public async function gen_turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): Awaitable<void> {
    $currentseqid = $this->sendImpl_turtles($foo);
    await $this->asyncHandler_->genWait($currentseqid);
    $this->recvImpl_turtles($currentseqid);
  }

  /* send and recv functions */
  public function send_mapList(\Indexish<int, \Indexish<int, int>> $foo): int {
    return $this->sendImpl_mapList($foo);
  }
  public function recv_mapList(?int $expectedsequenceid = null): void {
    $this->recvImpl_mapList($expectedsequenceid);
  }
  public function send_mapSet(\Indexish<int, Set<int>> $foo): int {
    return $this->sendImpl_mapSet($foo);
  }
  public function recv_mapSet(?int $expectedsequenceid = null): void {
    $this->recvImpl_mapSet($expectedsequenceid);
  }
  public function send_listMap(\Indexish<int, \Indexish<int, int>> $foo): int {
    return $this->sendImpl_listMap($foo);
  }
  public function recv_listMap(?int $expectedsequenceid = null): void {
    $this->recvImpl_listMap($expectedsequenceid);
  }
  public function send_listSet(\Indexish<int, Set<int>> $foo): int {
    return $this->sendImpl_listSet($foo);
  }
  public function recv_listSet(?int $expectedsequenceid = null): void {
    $this->recvImpl_listSet($expectedsequenceid);
  }
  public function send_turtles(\Indexish<int, \Indexish<int, \Indexish<int, \Indexish<int, Set<int>>>>> $foo): int {
    return $this->sendImpl_turtles($foo);
  }
  public function recv_turtles(?int $expectedsequenceid = null): void {
    $this->recvImpl_turtles($expectedsequenceid);
  }
}

abstract class NestedContainersAsyncProcessorBase extends ThriftAsyncProcessor {
  abstract const type TThriftIf as NestedContainersAsyncIf;
  protected async function process_mapList(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('mapList');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'mapList', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_mapList_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_mapList_args');
    } else {
      $args = new NestedContainers_mapList_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'mapList', $args);
    $result = new NestedContainers_mapList_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'mapList', $args);
      await $this->handler->mapList($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'mapList', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'mapList', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'mapList', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'mapList', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'mapList', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("mapList", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'mapList', $result);
  }
  protected async function process_mapSet(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('mapSet');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'mapSet', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_mapSet_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_mapSet_args');
    } else {
      $args = new NestedContainers_mapSet_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'mapSet', $args);
    $result = new NestedContainers_mapSet_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'mapSet', $args);
      await $this->handler->mapSet($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'mapSet', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'mapSet', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'mapSet', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'mapSet', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'mapSet', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("mapSet", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'mapSet', $result);
  }
  protected async function process_listMap(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('listMap');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'listMap', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_listMap_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_listMap_args');
    } else {
      $args = new NestedContainers_listMap_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'listMap', $args);
    $result = new NestedContainers_listMap_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'listMap', $args);
      await $this->handler->listMap($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'listMap', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'listMap', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'listMap', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'listMap', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'listMap', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("listMap", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'listMap', $result);
  }
  protected async function process_listSet(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('listSet');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'listSet', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_listSet_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_listSet_args');
    } else {
      $args = new NestedContainers_listSet_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'listSet', $args);
    $result = new NestedContainers_listSet_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'listSet', $args);
      await $this->handler->listSet($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'listSet', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'listSet', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'listSet', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'listSet', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'listSet', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("listSet", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'listSet', $result);
  }
  protected async function process_turtles(int $seqid, \TProtocol $input, \TProtocol $output): Awaitable<void> {
    $handler_ctx = $this->eventHandler_->getHandlerContext('turtles');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'turtles', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_turtles_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_turtles_args');
    } else {
      $args = new NestedContainers_turtles_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'turtles', $args);
    $result = new NestedContainers_turtles_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'turtles', $args);
      await $this->handler->turtles($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'turtles', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'turtles', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'turtles', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'turtles', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'turtles', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("turtles", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'turtles', $result);
  }
}
class NestedContainersAsyncProcessor extends NestedContainersAsyncProcessorBase {
  const type TThriftIf = NestedContainersAsyncIf;
}

abstract class NestedContainersSyncProcessorBase extends ThriftSyncProcessor {
  abstract const type TThriftIf as NestedContainersIf;
  protected function process_mapList(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('mapList');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'mapList', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_mapList_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_mapList_args');
    } else {
      $args = new NestedContainers_mapList_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'mapList', $args);
    $result = new NestedContainers_mapList_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'mapList', $args);
      $this->handler->mapList($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'mapList', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'mapList', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'mapList', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'mapList', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'mapList', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("mapList", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'mapList', $result);
  }
  protected function process_mapSet(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('mapSet');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'mapSet', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_mapSet_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_mapSet_args');
    } else {
      $args = new NestedContainers_mapSet_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'mapSet', $args);
    $result = new NestedContainers_mapSet_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'mapSet', $args);
      $this->handler->mapSet($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'mapSet', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'mapSet', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'mapSet', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'mapSet', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'mapSet', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("mapSet", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'mapSet', $result);
  }
  protected function process_listMap(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('listMap');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'listMap', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_listMap_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_listMap_args');
    } else {
      $args = new NestedContainers_listMap_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'listMap', $args);
    $result = new NestedContainers_listMap_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'listMap', $args);
      $this->handler->listMap($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'listMap', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'listMap', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'listMap', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'listMap', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'listMap', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("listMap", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'listMap', $result);
  }
  protected function process_listSet(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('listSet');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'listSet', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_listSet_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_listSet_args');
    } else {
      $args = new NestedContainers_listSet_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'listSet', $args);
    $result = new NestedContainers_listSet_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'listSet', $args);
      $this->handler->listSet($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'listSet', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'listSet', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'listSet', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'listSet', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'listSet', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("listSet", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'listSet', $result);
  }
  protected function process_turtles(int $seqid, \TProtocol $input, \TProtocol $output): void {
    $handler_ctx = $this->eventHandler_->getHandlerContext('turtles');
    $reply_type = \TMessageType::REPLY;

    $this->eventHandler_->preRead($handler_ctx, 'turtles', array());

    if ($input instanceof \TBinaryProtocolAccelerated) {
      $args = thrift_protocol_read_binary_struct($input, 'NestedContainers_turtles_args');
    } else if ($input instanceof \TCompactProtocolAccelerated) {
      $args = thrift_protocol_read_compact_struct($input, 'NestedContainers_turtles_args');
    } else {
      $args = new NestedContainers_turtles_args();
      $args->read($input);
    }
    $input->readMessageEnd();
    $this->eventHandler_->postRead($handler_ctx, 'turtles', $args);
    $result = new NestedContainers_turtles_result();
    try {
      $this->eventHandler_->preExec($handler_ctx, 'turtles', $args);
      $this->handler->turtles($args->foo);
      $this->eventHandler_->postExec($handler_ctx, 'turtles', $result);
    } catch (Exception $ex) {
      $reply_type = \TMessageType::EXCEPTION;
      $this->eventHandler_->handlerError($handler_ctx, 'turtles', $ex);
      $result = new \TApplicationException($ex->getMessage()."\n".$ex->getTraceAsString());
    }
    $this->eventHandler_->preWrite($handler_ctx, 'turtles', $result);
    if ($output instanceof \TBinaryProtocolAccelerated)
    {
      thrift_protocol_write_binary($output, 'turtles', $reply_type, $result, $seqid, $output->isStrictWrite());
    }
    else if ($output instanceof \TCompactProtocolAccelerated)
    {
      thrift_protocol_write_compact($output, 'turtles', $reply_type, $result, $seqid);
    }
    else
    {
      $output->writeMessageBegin("turtles", $reply_type, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
    $this->eventHandler_->postWrite($handler_ctx, 'turtles', $result);
  }
}
class NestedContainersSyncProcessor extends NestedContainersSyncProcessorBase {
  const type TThriftIf = NestedContainersIf;
}
// For backwards compatibility
class NestedContainersProcessor extends NestedContainersSyncProcessor {}

// HELPER FUNCTIONS AND STRUCTURES

class NestedContainers_mapList_args implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    1 => array(
      'var' => 'foo',
      'type' => \TType::MAP,
      'ktype' => \TType::I32,
      'vtype' => \TType::LST,
      'key' => array(
        'type' => \TType::I32,
      ),
      'val' => array(
        'type' => \TType::LST,
        'etype' => \TType::I32,
        'elem' => array(
          'type' => \TType::I32,
          ),
          'format' => 'collection',
        ),
        'format' => 'collection',
      ),
    );
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => array<int, array<int>>,
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Map<int, Vector<int>> $foo;

  public function __construct(?Map<int, Vector<int>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Map {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_mapList_args';
  }

  public static function __jsonArrayToShape(
    array<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!array_key_exists('foo', $shape_data)) {
      return null;
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      foreach (/* HH_IGNORE_ERROR[4110] */$value1 as $key2 => $value3) {
        if (!is_int($key2)) {
          return null;
        }
        if (!is_int($value3)) {
          return null;
        }
        /* HH_IGNORE_ERROR[4005] */
        $value1[$key2] = $value3;
      }
      /* HH_IGNORE_ERROR[4005] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Map($shape['foo']))->map(
      $val4 ==> (new Vector($val4)),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> $_val0->toArray(),
      )->toArray(),
    );
  }
  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::MAP) {
            $_size1 = 0;
            $_val0 = Map {};
            $_ktype2 = 0;
            $_vtype3 = 0;
            $xfer += $input->readMapBegin($_ktype2, $_vtype3, $_size1);
            for ($_i5 = 0; $_size1 === null || $_i5 < $_size1; ++$_i5)
            {
              if ($_size1 === null && !$input->readMapHasNext()) {
                break;
              }
              $key6 = null;
              $xfer += $input->readI32($key6);
              $_size9 = 0;
              $_val8 = Vector {};
              $_etype12 = 0;
              $xfer += $input->readListBegin($_etype12, $_size9);
              for ($_i13 = 0; $_size9 === null || $_i13 < $_size9; ++$_i13)
              {
                if ($_size9 === null && !$input->readListHasNext()) {
                  break;
                }
                $elem14 = null;
                $xfer += $input->readI32($elem14);
                if ($elem14 !== null) {
                  $_val8 []= $elem14;
                }
              }
              $xfer += $input->readListEnd();
              $val7 = $_val8;
              if ($key6 !== null && $val7 !== null) {
                $_val0[$key6] = $val7;
              }
            }
            $xfer += $input->readMapEnd();
            $this->foo = $_val0;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_mapList_args');
    if ($this->foo !== null) {
      $_val0 = $this->foo;
      if (!($_val0 instanceof \Indexish) && !(($_val0 instanceof \Iterator || $_val0 instanceof \IteratorAggregate) && $_val0 instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('foo', \TType::MAP, 1);
      $output->writeMapBegin(\TType::I32, \TType::LST, count($_val0));
      if ($_val0 !== null)
      {
        foreach ($_val0 as $kiter1 => $viter2)
        {
          $xfer += $output->writeI32($kiter1);
          $output->writeListBegin(\TType::I32, count($viter2));
          if ($viter2 !== null)
          {
            foreach ($viter2 as $iter3)
            {
              $xfer += $output->writeI32($iter3);
            }
          }
          $output->writeListEnd();
        }
      }
      $output->writeMapEnd();
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_mapList_result implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    );
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_mapList_result';
  }

  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_mapList_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_mapSet_args implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    1 => array(
      'var' => 'foo',
      'type' => \TType::MAP,
      'ktype' => \TType::I32,
      'vtype' => \TType::SET,
      'key' => array(
        'type' => \TType::I32,
      ),
      'val' => array(
        'type' => \TType::SET,
        'etype' => \TType::I32,
        'elem' => array(
          'type' => \TType::I32,
          ),
          'format' => 'collection',
        ),
        'format' => 'collection',
      ),
    );
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => array<int, array<int, bool>>,
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Map<int, Set<int>> $foo;

  public function __construct(?Map<int, Set<int>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Map {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_mapSet_args';
  }

  public static function __jsonArrayToShape(
    array<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!array_key_exists('foo', $shape_data)) {
      return null;
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      $the_set4 = array();
      foreach (/* HH_IGNORE_ERROR[4110] */ $value1 as $key2 => $shape_data3) {
        if (!is_int($shape_data3)) {
          return null;
        }
        $the_set4[$shape_data3] = true;
      }
      $value1 = $the_set4;
      /* HH_IGNORE_ERROR[4005] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Map($shape['foo']))->map(
      $val5 ==> new Set(array_keys($val5)),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> array_fill_keys($_val0, true),
      )->toArray(),
    );
  }
  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::MAP) {
            $_size1 = 0;
            $_val0 = Map {};
            $_ktype2 = 0;
            $_vtype3 = 0;
            $xfer += $input->readMapBegin($_ktype2, $_vtype3, $_size1);
            for ($_i5 = 0; $_size1 === null || $_i5 < $_size1; ++$_i5)
            {
              if ($_size1 === null && !$input->readMapHasNext()) {
                break;
              }
              $key6 = null;
              $xfer += $input->readI32($key6);
              $_size9 = 0;
              $_etype12 = 0;
              $_val8 = Set{};
              $xfer += $input->readSetBegin($_etype12, $_size9);
              for ($_i13 = 0; $_size9 === null || $_i13 < $_size9; ++$_i13)
              {
                if ($_size9 === null && !$input->readSetHasNext()) {
                  break;
                }
                $elem14 = null;
                $xfer += $input->readI32($elem14);
                if ($elem14 !== null) {
                  $_val8->add($elem14);
                }
              }
              $xfer += $input->readSetEnd();
              $val7 = $_val8;
              if ($key6 !== null && $val7 !== null) {
                $_val0[$key6] = $val7;
              }
            }
            $xfer += $input->readMapEnd();
            $this->foo = $_val0;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_mapSet_args');
    if ($this->foo !== null) {
      $_val0 = $this->foo;
      if (!($_val0 instanceof \Indexish) && !(($_val0 instanceof \Iterator || $_val0 instanceof \IteratorAggregate) && $_val0 instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('foo', \TType::MAP, 1);
      $output->writeMapBegin(\TType::I32, \TType::SET, count($_val0));
      if ($_val0 !== null)
      {
        foreach ($_val0 as $kiter1 => $viter2)
        {
          $xfer += $output->writeI32($kiter1);
          $output->writeSetBegin(\TType::I32, count($viter2));
          if ($viter2 !== null)
          {
            foreach ($viter2 as $iter3)
            {
              $xfer += $output->writeI32($iter3);
            }
          }
          $output->writeSetEnd();
        }
      }
      $output->writeMapEnd();
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_mapSet_result implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    );
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_mapSet_result';
  }

  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_mapSet_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_listMap_args implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    1 => array(
      'var' => 'foo',
      'type' => \TType::LST,
      'etype' => \TType::MAP,
      'elem' => array(
        'type' => \TType::MAP,
        'ktype' => \TType::I32,
        'vtype' => \TType::I32,
        'key' => array(
          'type' => \TType::I32,
        ),
        'val' => array(
          'type' => \TType::I32,
          ),
          'format' => 'collection',
        ),
        'format' => 'collection',
      ),
    );
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => array<array<int, int>>,
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Vector<Map<int, int>> $foo;

  public function __construct(?Vector<Map<int, int>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Vector {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_listMap_args';
  }

  public static function __jsonArrayToShape(
    array<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!array_key_exists('foo', $shape_data)) {
      return null;
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      foreach (/* HH_IGNORE_ERROR[4110] */$value1 as $key2 => $value3) {
        if (!is_int($key2)) {
          return null;
        }
        if (!is_int($value3)) {
          return null;
        }
        /* HH_IGNORE_ERROR[4005] */
        $value1[$key2] = $value3;
      }
      /* HH_IGNORE_ERROR[4005] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Vector($shape['foo']))->map(
      $val4 ==> (new Map($val4)),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> $_val0->toArray(),
      )->toArray(),
    );
  }
  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::LST) {
            $_size1 = 0;
            $_val0 = Vector {};
            $_etype4 = 0;
            $xfer += $input->readListBegin($_etype4, $_size1);
            for ($_i5 = 0; $_size1 === null || $_i5 < $_size1; ++$_i5)
            {
              if ($_size1 === null && !$input->readListHasNext()) {
                break;
              }
              $_size8 = 0;
              $_val7 = Map {};
              $_ktype9 = 0;
              $_vtype10 = 0;
              $xfer += $input->readMapBegin($_ktype9, $_vtype10, $_size8);
              for ($_i12 = 0; $_size8 === null || $_i12 < $_size8; ++$_i12)
              {
                if ($_size8 === null && !$input->readMapHasNext()) {
                  break;
                }
                $key13 = null;
                $xfer += $input->readI32($key13);
                $val14 = null;
                $xfer += $input->readI32($val14);
                if ($key13 !== null && $val14 !== null) {
                  $_val7[$key13] = $val14;
                }
              }
              $xfer += $input->readMapEnd();
              $elem6 = $_val7;
              if ($elem6 !== null) {
                $_val0 []= $elem6;
              }
            }
            $xfer += $input->readListEnd();
            $this->foo = $_val0;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_listMap_args');
    if ($this->foo !== null) {
      $_val0 = $this->foo;
      if (!($_val0 instanceof \Indexish) && !(($_val0 instanceof \Iterator || $_val0 instanceof \IteratorAggregate) && $_val0 instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('foo', \TType::LST, 1);
      $output->writeListBegin(\TType::MAP, count($_val0));
      if ($_val0 !== null)
      {
        foreach ($_val0 as $iter1)
        {
          $output->writeMapBegin(\TType::I32, \TType::I32, count($iter1));
          if ($iter1 !== null)
          {
            foreach ($iter1 as $kiter2 => $viter3)
            {
              $xfer += $output->writeI32($kiter2);
              $xfer += $output->writeI32($viter3);
            }
          }
          $output->writeMapEnd();
        }
      }
      $output->writeListEnd();
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_listMap_result implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    );
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_listMap_result';
  }

  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_listMap_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_listSet_args implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    1 => array(
      'var' => 'foo',
      'type' => \TType::LST,
      'etype' => \TType::SET,
      'elem' => array(
        'type' => \TType::SET,
        'etype' => \TType::I32,
        'elem' => array(
          'type' => \TType::I32,
          ),
          'format' => 'collection',
        ),
        'format' => 'collection',
      ),
    );
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => array<array<int, bool>>,
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Vector<Set<int>> $foo;

  public function __construct(?Vector<Set<int>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Vector {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_listSet_args';
  }

  public static function __jsonArrayToShape(
    array<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!array_key_exists('foo', $shape_data)) {
      return null;
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      $the_set4 = array();
      foreach (/* HH_IGNORE_ERROR[4110] */ $value1 as $key2 => $shape_data3) {
        if (!is_int($shape_data3)) {
          return null;
        }
        $the_set4[$shape_data3] = true;
      }
      $value1 = $the_set4;
      /* HH_IGNORE_ERROR[4005] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Vector($shape['foo']))->map(
      $val5 ==> new Set(array_keys($val5)),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> array_fill_keys($_val0, true),
      )->toArray(),
    );
  }
  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::LST) {
            $_size1 = 0;
            $_val0 = Vector {};
            $_etype4 = 0;
            $xfer += $input->readListBegin($_etype4, $_size1);
            for ($_i5 = 0; $_size1 === null || $_i5 < $_size1; ++$_i5)
            {
              if ($_size1 === null && !$input->readListHasNext()) {
                break;
              }
              $_size8 = 0;
              $_etype11 = 0;
              $_val7 = Set{};
              $xfer += $input->readSetBegin($_etype11, $_size8);
              for ($_i12 = 0; $_size8 === null || $_i12 < $_size8; ++$_i12)
              {
                if ($_size8 === null && !$input->readSetHasNext()) {
                  break;
                }
                $elem13 = null;
                $xfer += $input->readI32($elem13);
                if ($elem13 !== null) {
                  $_val7->add($elem13);
                }
              }
              $xfer += $input->readSetEnd();
              $elem6 = $_val7;
              if ($elem6 !== null) {
                $_val0 []= $elem6;
              }
            }
            $xfer += $input->readListEnd();
            $this->foo = $_val0;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_listSet_args');
    if ($this->foo !== null) {
      $_val0 = $this->foo;
      if (!($_val0 instanceof \Indexish) && !(($_val0 instanceof \Iterator || $_val0 instanceof \IteratorAggregate) && $_val0 instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('foo', \TType::LST, 1);
      $output->writeListBegin(\TType::SET, count($_val0));
      if ($_val0 !== null)
      {
        foreach ($_val0 as $iter1)
        {
          $output->writeSetBegin(\TType::I32, count($iter1));
          if ($iter1 !== null)
          {
            foreach ($iter1 as $iter2)
            {
              $xfer += $output->writeI32($iter2);
            }
          }
          $output->writeSetEnd();
        }
      }
      $output->writeListEnd();
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_listSet_result implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    );
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_listSet_result';
  }

  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_listSet_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_turtles_args implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    1 => array(
      'var' => 'foo',
      'type' => \TType::LST,
      'etype' => \TType::LST,
      'elem' => array(
        'type' => \TType::LST,
        'etype' => \TType::MAP,
        'elem' => array(
          'type' => \TType::MAP,
          'ktype' => \TType::I32,
          'vtype' => \TType::MAP,
          'key' => array(
            'type' => \TType::I32,
          ),
          'val' => array(
            'type' => \TType::MAP,
            'ktype' => \TType::I32,
            'vtype' => \TType::SET,
            'key' => array(
              'type' => \TType::I32,
            ),
            'val' => array(
              'type' => \TType::SET,
              'etype' => \TType::I32,
              'elem' => array(
                'type' => \TType::I32,
                ),
                'format' => 'collection',
              ),
              'format' => 'collection',
            ),
            'format' => 'collection',
          ),
          'format' => 'collection',
        ),
        'format' => 'collection',
      ),
    );
  public static Map<string, int> $_TFIELDMAP = Map {
    'foo' => 1,
  };
  const type TShape = shape(
    'foo' => array<array<array<int, array<int, array<int, bool>>>>>,
  );
  const int STRUCTURAL_ID = 860610040470759468;
  public Vector<Vector<Map<int, Map<int, Set<int>>>>> $foo;

  public function __construct(?Vector<Vector<Map<int, Map<int, Set<int>>>>> $foo = null  ) {
    if ($foo === null) {
      $this->foo = Vector {};
    } else {
      $this->foo = $foo;
    }
  }

  public function getName(): string {
    return 'NestedContainers_turtles_args';
  }

  public static function __jsonArrayToShape(
    array<arraykey, mixed> $json_data,
  ): ?self::TShape {
    $shape_data = $json_data;

    if (!array_key_exists('foo', $shape_data)) {
      return null;
    }
    if (!is_array($shape_data['foo'])) {
      return null;
    }
    foreach (/* HH_IGNORE_ERROR[4110] */$shape_data['foo'] as $key0 => $value1) {
      if (!is_int($key0)) {
        return null;
      }
      if (!is_array($value1)) {
        return null;
      }
      foreach (/* HH_IGNORE_ERROR[4110] */$value1 as $key2 => $value3) {
        if (!is_int($key2)) {
          return null;
        }
        if (!is_array($value3)) {
          return null;
        }
        foreach (/* HH_IGNORE_ERROR[4110] */$value3 as $key4 => $value5) {
          if (!is_int($key4)) {
            return null;
          }
          if (!is_array($value5)) {
            return null;
          }
          foreach (/* HH_IGNORE_ERROR[4110] */$value5 as $key6 => $value7) {
            if (!is_int($key6)) {
              return null;
            }
            if (!is_array($value7)) {
              return null;
            }
            $the_set10 = array();
            foreach (/* HH_IGNORE_ERROR[4110] */ $value7 as $key8 => $shape_data9) {
              if (!is_int($shape_data9)) {
                return null;
              }
              $the_set10[$shape_data9] = true;
            }
            $value7 = $the_set10;
            /* HH_IGNORE_ERROR[4005] */
            $value5[$key6] = $value7;
          }
          /* HH_IGNORE_ERROR[4005] */
          $value3[$key4] = $value5;
        }
        /* HH_IGNORE_ERROR[4005] */
        $value1[$key2] = $value3;
      }
      /* HH_IGNORE_ERROR[4005] */
      $shape_data['foo'][$key0] = $value1;
    }

    return /* HH_IGNORE_ERROR[4110] */ $shape_data;
  }

  public static function __fromShape(self::TShape $shape): this {
    $me = /* HH_IGNORE_ERROR[4060] */ new static();
    $me->foo = (new Vector($shape['foo']))->map(
      $val11 ==> (new Vector($val11))->map(
        $val12 ==> (new Map($val12))->map(
          $val13 ==> (new Map($val13))->map(
            $val14 ==> new Set(array_keys($val14)),
          ),
        ),
      ),
    );
    return $me;
  }

  public function __toShape(): self::TShape {
    return shape(
      'foo' => $this->foo->map(
        $_val0 ==> $_val0->map(
          $_val1 ==> $_val1->map(
            $_val2 ==> $_val2->map(
              $_val3 ==> array_fill_keys($_val3, true),
            )->toArray(),
          )->toArray(),
        )->toArray(),
      )->toArray(),
    );
  }
  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == \TType::LST) {
            $_size1 = 0;
            $_val0 = Vector {};
            $_etype4 = 0;
            $xfer += $input->readListBegin($_etype4, $_size1);
            for ($_i5 = 0; $_size1 === null || $_i5 < $_size1; ++$_i5)
            {
              if ($_size1 === null && !$input->readListHasNext()) {
                break;
              }
              $_size8 = 0;
              $_val7 = Vector {};
              $_etype11 = 0;
              $xfer += $input->readListBegin($_etype11, $_size8);
              for ($_i12 = 0; $_size8 === null || $_i12 < $_size8; ++$_i12)
              {
                if ($_size8 === null && !$input->readListHasNext()) {
                  break;
                }
                $_size15 = 0;
                $_val14 = Map {};
                $_ktype16 = 0;
                $_vtype17 = 0;
                $xfer += $input->readMapBegin($_ktype16, $_vtype17, $_size15);
                for ($_i19 = 0; $_size15 === null || $_i19 < $_size15; ++$_i19)
                {
                  if ($_size15 === null && !$input->readMapHasNext()) {
                    break;
                  }
                  $key20 = null;
                  $xfer += $input->readI32($key20);
                  $_size23 = 0;
                  $_val22 = Map {};
                  $_ktype24 = 0;
                  $_vtype25 = 0;
                  $xfer += $input->readMapBegin($_ktype24, $_vtype25, $_size23);
                  for ($_i27 = 0; $_size23 === null || $_i27 < $_size23; ++$_i27)
                  {
                    if ($_size23 === null && !$input->readMapHasNext()) {
                      break;
                    }
                    $key28 = null;
                    $xfer += $input->readI32($key28);
                    $_size31 = 0;
                    $_etype34 = 0;
                    $_val30 = Set{};
                    $xfer += $input->readSetBegin($_etype34, $_size31);
                    for ($_i35 = 0; $_size31 === null || $_i35 < $_size31; ++$_i35)
                    {
                      if ($_size31 === null && !$input->readSetHasNext()) {
                        break;
                      }
                      $elem36 = null;
                      $xfer += $input->readI32($elem36);
                      if ($elem36 !== null) {
                        $_val30->add($elem36);
                      }
                    }
                    $xfer += $input->readSetEnd();
                    $val29 = $_val30;
                    if ($key28 !== null && $val29 !== null) {
                      $_val22[$key28] = $val29;
                    }
                  }
                  $xfer += $input->readMapEnd();
                  $val21 = $_val22;
                  if ($key20 !== null && $val21 !== null) {
                    $_val14[$key20] = $val21;
                  }
                }
                $xfer += $input->readMapEnd();
                $elem13 = $_val14;
                if ($elem13 !== null) {
                  $_val7 []= $elem13;
                }
              }
              $xfer += $input->readListEnd();
              $elem6 = $_val7;
              if ($elem6 !== null) {
                $_val0 []= $elem6;
              }
            }
            $xfer += $input->readListEnd();
            $this->foo = $_val0;
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_turtles_args');
    if ($this->foo !== null) {
      $_val0 = $this->foo;
      if (!($_val0 instanceof \Indexish) && !(($_val0 instanceof \Iterator || $_val0 instanceof \IteratorAggregate) && $_val0 instanceof \Countable)) {
        throw new \TProtocolException('Bad type in structure.', \TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('foo', \TType::LST, 1);
      $output->writeListBegin(\TType::LST, count($_val0));
      if ($_val0 !== null)
      {
        foreach ($_val0 as $iter1)
        {
          $output->writeListBegin(\TType::MAP, count($iter1));
          if ($iter1 !== null)
          {
            foreach ($iter1 as $iter2)
            {
              $output->writeMapBegin(\TType::I32, \TType::MAP, count($iter2));
              if ($iter2 !== null)
              {
                foreach ($iter2 as $kiter3 => $viter4)
                {
                  $xfer += $output->writeI32($kiter3);
                  $output->writeMapBegin(\TType::I32, \TType::SET, count($viter4));
                  if ($viter4 !== null)
                  {
                    foreach ($viter4 as $kiter5 => $viter6)
                    {
                      $xfer += $output->writeI32($kiter5);
                      $output->writeSetBegin(\TType::I32, count($viter6));
                      if ($viter6 !== null)
                      {
                        foreach ($viter6 as $iter7)
                        {
                          $xfer += $output->writeI32($iter7);
                        }
                      }
                      $output->writeSetEnd();
                    }
                  }
                  $output->writeMapEnd();
                }
              }
              $output->writeMapEnd();
            }
          }
          $output->writeListEnd();
        }
      }
      $output->writeListEnd();
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class NestedContainers_turtles_result implements \IThriftStruct, \IThriftShapishStruct {
  public static array $_TSPEC = array(
    );
  public static Map<string, int> $_TFIELDMAP = Map {
  };
  const int STRUCTURAL_ID = 957977401221134810;

  public function __construct(  ) {
  }

  public function getName(): string {
    return 'NestedContainers_turtles_result';
  }

  public function read(\TProtocol $input): int {
    $xfer = 0;
    $fname = '';
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == \TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        $fid = (int) self::$_TFIELDMAP->get($fname);
        if ($fid !== 0) {
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(\TProtocol $output): int {
    $xfer = 0;
    $xfer += $output->writeStructBegin('NestedContainers_turtles_result');
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

