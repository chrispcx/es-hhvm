/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp/service3.h"
#include <folly/ScopeGuard.h>

#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp/module_reflection.h"

namespace test_cpp1 { namespace cpp_reflection {

const uint64_t service3_methodA_args::_reflection_id;
void service3_methodA_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_9701210761501798668(schema);
}

uint32_t service3_methodA_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_9701210761501798668(*schema);
    iprot->setNextStructType(service3_methodA_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t service3_methodA_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodA_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodA_pargs::_reflection_id;
void service3_methodA_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_6235408869533435628(schema);
}

uint32_t service3_methodA_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodA_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodA_presult::_reflection_id;
void service3_methodA_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_8183088415690553388(schema);
}

uint32_t service3_methodA_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_8183088415690553388(*schema);
    iprot->setNextStructType(service3_methodA_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t service3_methodA_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("service3_methodA_presult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodB_args::_reflection_id;
void service3_methodB_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_8365765279786380140(schema);
}

uint32_t service3_methodB_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_8365765279786380140(*schema);
    iprot->setNextStructType(service3_methodB_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  std::exception_ptr exception;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->x);
          this->__isset.x = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          try {
            xfer += this->y.read(iprot);
          } catch (const TProtocolException& e) {
            if (e.getType() != TProtocolException::MISSING_REQUIRED_FIELD) {
              throw;
            }
            exception = std::current_exception();
          }
          this->__isset.y = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->z);
          this->__isset.z = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (exception != std::exception_ptr()) {
    std::rethrow_exception(exception);
  }
  return xfer;
}

uint32_t service3_methodB_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodB_args");
  xfer += oprot->writeFieldBegin("x", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->x);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("y", apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->y.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("z", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->z);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodB_pargs::_reflection_id;
void service3_methodB_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_16087431785943291340(schema);
}

uint32_t service3_methodB_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodB_pargs");
  xfer += oprot->writeFieldBegin("x", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->x)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("y", apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->y)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("z", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble((*(this->z)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodB_presult::_reflection_id;
void service3_methodB_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_14506585065281573676(schema);
}

uint32_t service3_methodB_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_14506585065281573676(*schema);
    iprot->setNextStructType(service3_methodB_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t service3_methodB_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("service3_methodB_presult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodC_args::_reflection_id;
void service3_methodC_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_18111395864871211084(schema);
}

uint32_t service3_methodC_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_18111395864871211084(*schema);
    iprot->setNextStructType(service3_methodC_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t service3_methodC_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodC_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodC_pargs::_reflection_id;
void service3_methodC_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_2210812191286520076(schema);
}

uint32_t service3_methodC_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodC_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodC_presult::_reflection_id;
void service3_methodC_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_13028484199505159020(schema);
}

uint32_t service3_methodC_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_13028484199505159020(*schema);
    iprot->setNextStructType(service3_methodC_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t service3_methodC_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("service3_methodC_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32((*(this->success)));
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodD_args::_reflection_id;
void service3_methodD_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_9361302880502445324(schema);
}

uint32_t service3_methodD_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_9361302880502445324(*schema);
    iprot->setNextStructType(service3_methodD_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  std::exception_ptr exception;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->i);
          this->__isset.i = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          try {
            xfer += this->j.read(iprot);
          } catch (const TProtocolException& e) {
            if (e.getType() != TProtocolException::MISSING_REQUIRED_FIELD) {
              throw;
            }
            exception = std::current_exception();
          }
          this->__isset.j = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->k);
          this->__isset.k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (exception != std::exception_ptr()) {
    std::rethrow_exception(exception);
  }
  return xfer;
}

uint32_t service3_methodD_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodD_args");
  xfer += oprot->writeFieldBegin("i", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->i);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("j", apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->j.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("k", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->k);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodD_pargs::_reflection_id;
void service3_methodD_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_14222345848529450572(schema);
}

uint32_t service3_methodD_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodD_pargs");
  xfer += oprot->writeFieldBegin("i", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->i)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("j", apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->j)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("k", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble((*(this->k)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodD_presult::_reflection_id;
void service3_methodD_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_16682840901832895980(schema);
}

uint32_t service3_methodD_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_16682840901832895980(*schema);
    iprot->setNextStructType(service3_methodD_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t service3_methodD_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("service3_methodD_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_I32, 0);
    xfer += oprot->writeI32((*(this->success)));
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodE_args::_reflection_id;
void service3_methodE_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_9643611769818094796(schema);
}

uint32_t service3_methodE_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_9643611769818094796(*schema);
    iprot->setNextStructType(service3_methodE_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t service3_methodE_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodE_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodE_pargs::_reflection_id;
void service3_methodE_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_17841105104530712364(schema);
}

uint32_t service3_methodE_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodE_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodE_presult::_reflection_id;
void service3_methodE_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_11289728029959710508(schema);
}

uint32_t service3_methodE_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_11289728029959710508(*schema);
    iprot->setNextStructType(service3_methodE_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  std::exception_ptr exception;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          try {
            xfer += (*(this->success)).read(iprot);
          } catch (const TProtocolException& e) {
            if (e.getType() != TProtocolException::MISSING_REQUIRED_FIELD) {
              throw;
            }
            exception = std::current_exception();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (exception != std::exception_ptr()) {
    std::rethrow_exception(exception);
  }
  return xfer;
}

uint32_t service3_methodE_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("service3_methodE_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += (*(this->success)).write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodF_args::_reflection_id;
void service3_methodF_args::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_8319194992443847756(schema);
}

uint32_t service3_methodF_args::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_8319194992443847756(*schema);
    iprot->setNextStructType(service3_methodF_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  std::exception_ptr exception;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->l);
          this->__isset.l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          try {
            xfer += this->m.read(iprot);
          } catch (const TProtocolException& e) {
            if (e.getType() != TProtocolException::MISSING_REQUIRED_FIELD) {
              throw;
            }
            exception = std::current_exception();
          }
          this->__isset.m = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->n);
          this->__isset.n = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (exception != std::exception_ptr()) {
    std::rethrow_exception(exception);
  }
  return xfer;
}

uint32_t service3_methodF_args::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodF_args");
  xfer += oprot->writeFieldBegin("l", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->l);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("m", apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->m.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("n", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->n);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodF_pargs::_reflection_id;
void service3_methodF_pargs::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_1484657056518808364(schema);
}

uint32_t service3_methodF_pargs::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("service3_methodF_pargs");
  xfer += oprot->writeFieldBegin("l", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((*(this->l)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("m", apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->m)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("n", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble((*(this->n)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const uint64_t service3_methodF_presult::_reflection_id;
void service3_methodF_presult::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_16146326422060352812(schema);
}

uint32_t service3_methodF_presult::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::test_cpp1::cpp_reflection::module_reflection_::reflectionInitializer_16146326422060352812(*schema);
    iprot->setNextStructType(service3_methodF_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;

  std::exception_ptr exception;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          try {
            xfer += (*(this->success)).read(iprot);
          } catch (const TProtocolException& e) {
            if (e.getType() != TProtocolException::MISSING_REQUIRED_FIELD) {
              throw;
            }
            exception = std::current_exception();
          }
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (exception != std::exception_ptr()) {
    std::rethrow_exception(exception);
  }
  return xfer;
}

uint32_t service3_methodF_presult::write(apache::thrift::protocol::TProtocol* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("service3_methodF_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_STRUCT, 0);
    xfer += (*(this->success)).write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

int32_t service3Client::getNextSendSequenceId()
{
  return nextSendSequenceId_++;
}

int32_t service3Client::getNextRecvSequenceId()
{
  return nextRecvSequenceId_++;
}

const char* service3Client::getServiceName() {
{
  return "service3";
}
}
void service3Client::methodA()
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "service3.methodA", this->getConnectionContext());

  try {
    send_methodA();
    recv_methodA();
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void service3Client::send_methodA()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("methodA", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  service3_methodA_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes648 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes648);
  return;
}

folly::exception_wrapper service3Client::recv_wrapped_methodA()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("methodA") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    service3_methodA_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void service3Client::recv_methodA()
{
  auto ew = recv_wrapped_methodA();
  if (ew) {
    ew.throwException();
  }
}

void service3Client::methodB(int32_t x, const struct1& y, double z)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "service3.methodB", this->getConnectionContext());

  try {
    send_methodB(x, y, z);
    recv_methodB();
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void service3Client::send_methodB(int32_t x, const struct1& y, double z)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("methodB", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  service3_methodB_pargs args;
  args.x = &x;
  args.y = &y;
  args.z = &z;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes649 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes649);
  return;
}

folly::exception_wrapper service3Client::recv_wrapped_methodB()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("methodB") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    service3_methodB_presult result;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void service3Client::recv_methodB()
{
  auto ew = recv_wrapped_methodB();
  if (ew) {
    ew.throwException();
  }
}

int32_t service3Client::methodC()
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "service3.methodC", this->getConnectionContext());

  try {
    send_methodC();
    return recv_methodC();
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void service3Client::send_methodC()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("methodC", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  service3_methodC_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes650 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes650);
  return;
}

folly::exception_wrapper service3Client::recv_wrapped_methodC(int32_t& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("methodC") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    service3_methodC_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "methodC failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

int32_t service3Client::recv_methodC()
{
  int32_t _return;
  auto ew = recv_wrapped_methodC(_return);
  if (ew) {
    ew.throwException();
  }
  return _return;
}

int32_t service3Client::methodD(int32_t i, const struct1& j, double k)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "service3.methodD", this->getConnectionContext());

  try {
    send_methodD(i, j, k);
    return recv_methodD();
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void service3Client::send_methodD(int32_t i, const struct1& j, double k)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("methodD", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  service3_methodD_pargs args;
  args.i = &i;
  args.j = &j;
  args.k = &k;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes651 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes651);
  return;
}

folly::exception_wrapper service3Client::recv_wrapped_methodD(int32_t& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("methodD") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    service3_methodD_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "methodD failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

int32_t service3Client::recv_methodD()
{
  int32_t _return;
  auto ew = recv_wrapped_methodD(_return);
  if (ew) {
    ew.throwException();
  }
  return _return;
}

void service3Client::methodE(struct2& _return)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "service3.methodE", this->getConnectionContext());

  try {
    send_methodE();
    recv_methodE(_return);
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void service3Client::send_methodE()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("methodE", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  service3_methodE_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes652 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes652);
  return;
}

folly::exception_wrapper service3Client::recv_wrapped_methodE(struct2& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("methodE") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    service3_methodE_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      // _return pointer has now been filled
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "methodE failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void service3Client::recv_methodE(struct2& _return)
{
  auto ew = recv_wrapped_methodE(_return);
  if (ew) {
    ew.throwException();
  }
}

void service3Client::methodF(struct3& _return, int32_t l, const struct1& m, double n)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "service3.methodF", this->getConnectionContext());

  try {
    send_methodF(l, m, n);
    recv_methodF(_return);
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    iprot_->getTransport()->close();
    oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      iprot_->getTransport()->close();
      oprot_->getTransport()->close();
    }
    throw;
  }
}

void service3Client::send_methodF(int32_t l, const struct1& m, double n)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  oprot_->writeMessageBegin("methodF", apache::thrift::protocol::T_CALL, getNextSendSequenceId());

  service3_methodF_pargs args;
  args.l = &l;
  args.m = &m;
  args.n = &n;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  uint32_t _bytes653 = oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes653);
  return;
}

folly::exception_wrapper service3Client::recv_wrapped_methodF(struct3& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(iprot_);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("methodF") != 0) {
      iprot_->skip(apache::thrift::protocol::T_STRUCT);
      iprot_->readMessageEnd();
      iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    service3_methodF_presult result;
    result.success = &_return;
    result.read(iprot_);
    iprot_->readMessageEnd();
    uint32_t bytes = iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      // _return pointer has now been filled
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "methodF failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

void service3Client::recv_methodF(struct3& _return)
{
  auto ew = recv_wrapped_methodF(_return);
  if (ew) {
    ew.throwException();
  }
}

bool service3Processor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  const ProcessFunction& pf = pfn->second;
  (this->*pf)(seqid, iprot, oprot, connectionContext);
  return true;
}

void service3Processor::process_methodA(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "service3.methodA", connectionContext));

  if (ctx) ctx->preRead();
  service3_methodA_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("methodA", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  service3_methodA_presult result;
  try {
    iface_->methodA();
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("methodA", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("methodA", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void service3Processor::process_methodB(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "service3.methodB", connectionContext));

  if (ctx) ctx->preRead();
  service3_methodB_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("methodB", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  service3_methodB_presult result;
  try {
    iface_->methodB(args.x, args.y, args.z);
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("methodB", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("methodB", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void service3Processor::process_methodC(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "service3.methodC", connectionContext));

  if (ctx) ctx->preRead();
  service3_methodC_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("methodC", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  service3_methodC_presult result;
  int32_t success;
  result.success = &success;
  try {
    *result.success = iface_->methodC();
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("methodC", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("methodC", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void service3Processor::process_methodD(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "service3.methodD", connectionContext));

  if (ctx) ctx->preRead();
  service3_methodD_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("methodD", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  service3_methodD_presult result;
  int32_t success;
  result.success = &success;
  try {
    *result.success = iface_->methodD(args.i, args.j, args.k);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("methodD", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("methodD", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void service3Processor::process_methodE(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "service3.methodE", connectionContext));

  if (ctx) ctx->preRead();
  service3_methodE_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("methodE", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  service3_methodE_presult result;
  struct2 success;
  result.success = &success;
  try {
    iface_->methodE(*result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("methodE", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("methodE", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

void service3Processor::process_methodF(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "service3.methodF", connectionContext));

  if (ctx) ctx->preRead();
  service3_methodF_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("methodF", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  service3_methodF_presult result;
  struct3 success;
  result.success = &success;
  try {
    iface_->methodF(*result.success, args.l, args.m, args.n);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("methodF", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("methodF", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

::std::shared_ptr< ::apache::thrift::TProcessor > service3ProcessorFactory::getProcessor(::apache::thrift::server::TConnectionContext* ctx) {
  ::apache::thrift::ReleaseHandler< service3IfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< service3If > handler(handlerFactory_->getHandler(ctx), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new service3Processor(handler));
  return processor;
}
}} // namespace

