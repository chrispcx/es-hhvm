/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _test_cpp1_cpp_reflection_service1_H
#define  _test_cpp1_cpp_reflection_service1_H

#include <thrift/lib/cpp/TDispatchProcessor.h>
#include <folly/ExceptionWrapper.h>
#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp/module_types.h"

namespace test_cpp1 { namespace cpp_reflection {

class service1If {
 public:
  virtual ~service1If() {}
  virtual void method1() = 0;
  virtual void method2(int32_t x, const struct1& y, double z) = 0;
  virtual int32_t method3() = 0;
  virtual int32_t method4(int32_t i, const struct1& j, double k) = 0;
  virtual void method5(struct2& _return) = 0;
  virtual void method6(struct2& _return, int32_t l, const struct1& m, double n) = 0;
};

class service1IfFactory {
 public:
  typedef service1If Handler;

  virtual ~service1IfFactory() {}

  virtual service1If* getHandler(::apache::thrift::server::TConnectionContext* ctx) = 0;
  virtual void releaseHandler(service1If* /*handler*/) = 0;
};

class service1IfSingletonFactory : virtual public service1IfFactory {
 public:
  service1IfSingletonFactory(const std::shared_ptr<service1If>& iface) : iface_(iface) {}
  virtual ~service1IfSingletonFactory() {}

  virtual service1If* getHandler(::apache::thrift::server::TConnectionContext*) {
    return iface_.get();
  }
  virtual void releaseHandler(service1If* /*handler*/) {}

 protected:
  std::shared_ptr<service1If> iface_;
};

class service1Null : virtual public service1If {
 public:
  virtual ~service1Null() {}
  void method1() {
    return;
  }
  void method2(int32_t /* x */, const struct1& /* y */, double /* z */) {
    return;
  }
  int32_t method3() {
    int32_t _return = 0;
    return _return;
  }
  int32_t method4(int32_t /* i */, const struct1& /* j */, double /* k */) {
    int32_t _return = 0;
    return _return;
  }
  void method5(struct2& /* _return */) {
    return;
  }
  void method6(struct2& /* _return */, int32_t /* l */, const struct1& /* m */, double /* n */) {
    return;
  }
};

class service1_method1_args : public apache::thrift::TStructType<service1_method1_args> {
 public:

  static const uint64_t _reflection_id = 1221581162559054604U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method1_args() {
  }

  service1_method1_args(const service1_method1_args&) = default;
  service1_method1_args& operator=(const service1_method1_args& src)= default;
  service1_method1_args(service1_method1_args&&) = default;
  service1_method1_args& operator=(service1_method1_args&&) = default;

  void __clear();

  virtual ~service1_method1_args() throw() {}


  bool operator == (const service1_method1_args &) const;
  bool operator != (const service1_method1_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service1_method1_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method1_args;
void merge(const service1_method1_args& from, service1_method1_args& to);
void merge(service1_method1_args&& from, service1_method1_args& to);
class service1_method1_pargs : public apache::thrift::TStructType<service1_method1_pargs> {
 public:

  static const uint64_t _reflection_id = 17567005035212846828U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method1_pargs() = default;

  virtual ~service1_method1_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method1_pargs;
void merge(const service1_method1_pargs& from, service1_method1_pargs& to);
void merge(service1_method1_pargs&& from, service1_method1_pargs& to);
class service1_method1_presult : public apache::thrift::TStructType<service1_method1_presult> {
 public:

  static const uint64_t _reflection_id = 12478195391904561164U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method1_presult() = default;

  virtual ~service1_method1_presult() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method1_presult;
void merge(const service1_method1_presult& from, service1_method1_presult& to);
void merge(service1_method1_presult&& from, service1_method1_presult& to);
class service1_method2_args : public apache::thrift::TStructType<service1_method2_args> {
 public:

  static const uint64_t _reflection_id = 16733648939459480620U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method2_args() : x(0), z(0) {
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method2_args(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method2_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    x = arg.move();
    __isset.x = true;
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method2_args(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method2_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    y = arg.move();
    __isset.y = true;
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method2_args(
    ::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method2_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    z = arg.move();
    __isset.z = true;
  }

  service1_method2_args(const service1_method2_args&) = default;
  service1_method2_args& operator=(const service1_method2_args& src)= default;
  service1_method2_args(service1_method2_args&&) = default;
  service1_method2_args& operator=(service1_method2_args&&) = default;

  void __clear();

  virtual ~service1_method2_args() throw() {}

  int32_t x;
  struct1 y;
  double z;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      x = false;
      y = false;
      z = false;
    }
    bool x;
    bool y;
    bool z;
  } __isset;

  bool operator == (const service1_method2_args &) const;
  bool operator != (const service1_method2_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service1_method2_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method2_args;
void merge(const service1_method2_args& from, service1_method2_args& to);
void merge(service1_method2_args&& from, service1_method2_args& to);
class service1_method2_pargs : public apache::thrift::TStructType<service1_method2_pargs> {
 public:

  static const uint64_t _reflection_id = 5286432913289079020U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method2_pargs() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method2_pargs(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method2_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    x = arg.move();
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method2_pargs(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method2_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    y = arg.move();
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method2_pargs(
    ::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method2_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    z = arg.move();
  }

  virtual ~service1_method2_pargs() throw() {}

  const int32_t* x;
  const struct1* y;
  const double* z;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method2_pargs;
void merge(const service1_method2_pargs& from, service1_method2_pargs& to);
void merge(service1_method2_pargs&& from, service1_method2_pargs& to);
class service1_method2_presult : public apache::thrift::TStructType<service1_method2_presult> {
 public:

  static const uint64_t _reflection_id = 11652973741799624012U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method2_presult() = default;

  virtual ~service1_method2_presult() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method2_presult;
void merge(const service1_method2_presult& from, service1_method2_presult& to);
void merge(service1_method2_presult&& from, service1_method2_presult& to);
class service1_method3_args : public apache::thrift::TStructType<service1_method3_args> {
 public:

  static const uint64_t _reflection_id = 9043618410459796620U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method3_args() {
  }

  service1_method3_args(const service1_method3_args&) = default;
  service1_method3_args& operator=(const service1_method3_args& src)= default;
  service1_method3_args(service1_method3_args&&) = default;
  service1_method3_args& operator=(service1_method3_args&&) = default;

  void __clear();

  virtual ~service1_method3_args() throw() {}


  bool operator == (const service1_method3_args &) const;
  bool operator != (const service1_method3_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service1_method3_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method3_args;
void merge(const service1_method3_args& from, service1_method3_args& to);
void merge(service1_method3_args&& from, service1_method3_args& to);
class service1_method3_pargs : public apache::thrift::TStructType<service1_method3_pargs> {
 public:

  static const uint64_t _reflection_id = 5735299565528148716U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method3_pargs() = default;

  virtual ~service1_method3_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method3_pargs;
void merge(const service1_method3_pargs& from, service1_method3_pargs& to);
void merge(service1_method3_pargs&& from, service1_method3_pargs& to);
class service1_method3_presult : public apache::thrift::TStructType<service1_method3_presult> {
 public:

  static const uint64_t _reflection_id = 15297006855348765644U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method3_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method3_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method3_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service1_method3_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method3_presult;
void merge(const service1_method3_presult& from, service1_method3_presult& to);
void merge(service1_method3_presult&& from, service1_method3_presult& to);
class service1_method4_args : public apache::thrift::TStructType<service1_method4_args> {
 public:

  static const uint64_t _reflection_id = 11303094861396395692U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method4_args() : i(0), k(0) {
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method4_args(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method4_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    i = arg.move();
    __isset.i = true;
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method4_args(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method4_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    j = arg.move();
    __isset.j = true;
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method4_args(
    ::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method4_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    k = arg.move();
    __isset.k = true;
  }

  service1_method4_args(const service1_method4_args&) = default;
  service1_method4_args& operator=(const service1_method4_args& src)= default;
  service1_method4_args(service1_method4_args&&) = default;
  service1_method4_args& operator=(service1_method4_args&&) = default;

  void __clear();

  virtual ~service1_method4_args() throw() {}

  int32_t i;
  struct1 j;
  double k;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      i = false;
      j = false;
      k = false;
    }
    bool i;
    bool j;
    bool k;
  } __isset;

  bool operator == (const service1_method4_args &) const;
  bool operator != (const service1_method4_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service1_method4_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method4_args;
void merge(const service1_method4_args& from, service1_method4_args& to);
void merge(service1_method4_args&& from, service1_method4_args& to);
class service1_method4_pargs : public apache::thrift::TStructType<service1_method4_pargs> {
 public:

  static const uint64_t _reflection_id = 7818193822774052332U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method4_pargs() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method4_pargs(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method4_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    i = arg.move();
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method4_pargs(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method4_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    j = arg.move();
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method4_pargs(
    ::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method4_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    k = arg.move();
  }

  virtual ~service1_method4_pargs() throw() {}

  const int32_t* i;
  const struct1* j;
  const double* k;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method4_pargs;
void merge(const service1_method4_pargs& from, service1_method4_pargs& to);
void merge(service1_method4_pargs&& from, service1_method4_pargs& to);
class service1_method4_presult : public apache::thrift::TStructType<service1_method4_presult> {
 public:

  static const uint64_t _reflection_id = 7208183505611400428U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method4_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method4_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method4_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service1_method4_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method4_presult;
void merge(const service1_method4_presult& from, service1_method4_presult& to);
void merge(service1_method4_presult&& from, service1_method4_presult& to);
class service1_method5_args : public apache::thrift::TStructType<service1_method5_args> {
 public:

  static const uint64_t _reflection_id = 16073327965848024332U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method5_args() {
  }

  service1_method5_args(const service1_method5_args&) = default;
  service1_method5_args& operator=(const service1_method5_args& src)= default;
  service1_method5_args(service1_method5_args&&) = default;
  service1_method5_args& operator=(service1_method5_args&&) = default;

  void __clear();

  virtual ~service1_method5_args() throw() {}


  bool operator == (const service1_method5_args &) const;
  bool operator != (const service1_method5_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service1_method5_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method5_args;
void merge(const service1_method5_args& from, service1_method5_args& to);
void merge(service1_method5_args&& from, service1_method5_args& to);
class service1_method5_pargs : public apache::thrift::TStructType<service1_method5_pargs> {
 public:

  static const uint64_t _reflection_id = 3688883339327387564U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method5_pargs() = default;

  virtual ~service1_method5_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method5_pargs;
void merge(const service1_method5_pargs& from, service1_method5_pargs& to);
void merge(service1_method5_pargs&& from, service1_method5_pargs& to);
class service1_method5_presult : public apache::thrift::TStructType<service1_method5_presult> {
 public:

  static const uint64_t _reflection_id = 6741590672290921388U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method5_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method5_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method5_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service1_method5_presult() throw() {}

  struct2* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method5_presult;
void merge(const service1_method5_presult& from, service1_method5_presult& to);
void merge(service1_method5_presult&& from, service1_method5_presult& to);
class service1_method6_args : public apache::thrift::TStructType<service1_method6_args> {
 public:

  static const uint64_t _reflection_id = 15629537829025388876U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method6_args() : l(0), n(0) {
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method6_args(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method6_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    l = arg.move();
    __isset.l = true;
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method6_args(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method6_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    m = arg.move();
    __isset.m = true;
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method6_args(
    ::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method6_args(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    n = arg.move();
    __isset.n = true;
  }

  service1_method6_args(const service1_method6_args&) = default;
  service1_method6_args& operator=(const service1_method6_args& src)= default;
  service1_method6_args(service1_method6_args&&) = default;
  service1_method6_args& operator=(service1_method6_args&&) = default;

  void __clear();

  virtual ~service1_method6_args() throw() {}

  int32_t l;
  struct1 m;
  double n;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      l = false;
      m = false;
      n = false;
    }
    bool l;
    bool m;
    bool n;
  } __isset;

  bool operator == (const service1_method6_args &) const;
  bool operator != (const service1_method6_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service1_method6_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method6_args;
void merge(const service1_method6_args& from, service1_method6_args& to);
void merge(service1_method6_args&& from, service1_method6_args& to);
class service1_method6_pargs : public apache::thrift::TStructType<service1_method6_pargs> {
 public:

  static const uint64_t _reflection_id = 9310873809753889260U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method6_pargs() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method6_pargs(
    ::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method6_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    l = arg.move();
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method6_pargs(
    ::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method6_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    m = arg.move();
  }
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method6_pargs(
    ::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method6_pargs(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    n = arg.move();
  }

  virtual ~service1_method6_pargs() throw() {}

  const int32_t* l;
  const struct1* m;
  const double* n;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method6_pargs;
void merge(const service1_method6_pargs& from, service1_method6_pargs& to);
void merge(service1_method6_pargs&& from, service1_method6_pargs& to);
class service1_method6_presult : public apache::thrift::TStructType<service1_method6_presult> {
 public:

  static const uint64_t _reflection_id = 1563313835388992332U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service1_method6_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service1_method6_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service1_method6_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service1_method6_presult() throw() {}

  struct2* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service1_method6_presult;
void merge(const service1_method6_presult& from, service1_method6_presult& to);
void merge(service1_method6_presult&& from, service1_method6_presult& to);
class service1Client : virtual public service1If, virtual public apache::thrift::TClientBase {
 public:
  service1Client(std::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  service1Client(std::shared_ptr<apache::thrift::protocol::TProtocol> iprot, std::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  virtual ~service1Client() {}
  void method1();
  virtual void send_method1();
  virtual void recv_method1();
  virtual folly::exception_wrapper recv_wrapped_method1();
  void method2(int32_t x, const struct1& y, double z);
  virtual void send_method2(int32_t x, const struct1& y, double z);
  virtual void recv_method2();
  virtual folly::exception_wrapper recv_wrapped_method2();
  int32_t method3();
  virtual void send_method3();
  virtual int32_t recv_method3();
  virtual folly::exception_wrapper recv_wrapped_method3(int32_t& _return);
  int32_t method4(int32_t i, const struct1& j, double k);
  virtual void send_method4(int32_t i, const struct1& j, double k);
  virtual int32_t recv_method4();
  virtual folly::exception_wrapper recv_wrapped_method4(int32_t& _return);
  void method5(struct2& _return);
  virtual void send_method5();
  virtual void recv_method5(struct2& _return);
  virtual folly::exception_wrapper recv_wrapped_method5(struct2& _return);
  void method6(struct2& _return, int32_t l, const struct1& m, double n);
  virtual void send_method6(int32_t l, const struct1& m, double n);
  virtual void recv_method6(struct2& _return);
  virtual folly::exception_wrapper recv_wrapped_method6(struct2& _return);
  apache::thrift::server::TConnectionContext* getConnectionContext() {
    return connectionContext_.get();
  }

  /**
   * Disable checking the seqid field in server responses.
   *
   * This should only be used with broken servers that return incorrect seqid values.
   */
  void _disableSequenceIdChecks() {
    checkSeqid_ = false;
  }

 protected:
  bool checkSeqid_;
  int32_t nextSendSequenceId_;
  int32_t nextRecvSequenceId_;
  int32_t getNextSendSequenceId();
  int32_t getNextRecvSequenceId();
  std::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<apache::thrift::server::TConnectionContext> connectionContext_;
  virtual const char* getServiceName();
};

class service1Processor : public ::apache::thrift::TDispatchProcessor {
 public:
  virtual const char* getServiceName() {
    return "service1";
  }
 protected:
  std::shared_ptr<service1If> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext);
 private:
  typedef  void (service1Processor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, apache::thrift::server::TConnectionContext*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_method1(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_method2(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_method3(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_method4(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_method5(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_method6(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
 public:
  service1Processor(std::shared_ptr<service1If> iface) :
    iface_(iface) {
    processMap_["method1"] = &service1Processor::process_method1;
    processMap_["method2"] = &service1Processor::process_method2;
    processMap_["method3"] = &service1Processor::process_method3;
    processMap_["method4"] = &service1Processor::process_method4;
    processMap_["method5"] = &service1Processor::process_method5;
    processMap_["method6"] = &service1Processor::process_method6;
  }

  virtual ~service1Processor() {}

  std::shared_ptr<std::set<std::string> > getProcessFunctions() { 
    std::shared_ptr<std::set<std::string> > rSet(new std::set<std::string>());
    rSet->insert("service1.method1");
    rSet->insert("service1.method2");
    rSet->insert("service1.method3");
    rSet->insert("service1.method4");
    rSet->insert("service1.method5");
    rSet->insert("service1.method6");
    return rSet;
  }
};

class service1ProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  service1ProcessorFactory(const ::std::shared_ptr< service1IfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(::apache::thrift::server::TConnectionContext* ctx);

 protected:
  ::std::shared_ptr< service1IfFactory > handlerFactory_;
};

class service1Multiface : virtual public service1If {
 public:
  service1Multiface(std::vector<std::shared_ptr<service1If> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~service1Multiface() {}
 protected:
  std::vector<std::shared_ptr<service1If> > ifaces_;
  service1Multiface() {}
  void add(std::shared_ptr<service1If> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void method1() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->method1();
    }
  }

  void method2(int32_t x, const struct1& y, double z) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->method2(x, y, z);
    }
  }

  int32_t method3() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->method3();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->method3();
  }

  int32_t method4(int32_t i, const struct1& j, double k) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->method4(i, j, k);
    }
    return ifaces_[thrift_multifaces_index_tmp_]->method4(i, j, k);
  }

  void method5(struct2& _return) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->method5(_return);
    }
  }

  void method6(struct2& _return, int32_t l, const struct1& m, double n) {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->method6(_return, l, m, n);
    }
  }

};

}} // namespace

#endif
