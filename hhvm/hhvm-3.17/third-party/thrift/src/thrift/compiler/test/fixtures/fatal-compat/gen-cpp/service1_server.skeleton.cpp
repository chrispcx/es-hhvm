/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp/service1.h"
#include <thrift/lib/cpp/async/TEventServer.h>
#include <thrift/lib/cpp/server/TConnectionContext.h>
#include <thrift/lib/cpp/util/TEventServerCreator.h>

using apache::thrift::TProcessor;
using apache::thrift::async::TEventServer;
using apache::thrift::util::TEventServerCreator;

using std::shared_ptr;

using namespace  ::test_cpp1::cpp_reflection;

class service1Handler : virtual public service1If {
 public:
  service1Handler() {
    // Your initialization goes here
  }

  void method1() {
    // Your implementation goes here
    printf("method1\n");
  }

  void method2(int32_t x, const struct1& y, double z) {
    // Your implementation goes here
    printf("method2\n");
  }

  int32_t method3() {
    // Your implementation goes here
    printf("method3\n");
    return int32_t();
  }

  int32_t method4(int32_t i, const struct1& j, double k) {
    // Your implementation goes here
    printf("method4\n");
    return int32_t();
  }

  void method5(struct2& _return) {
    // Your implementation goes here
    printf("method5\n");
  }

  void method6(struct2& _return, int32_t l, const struct1& m, double n) {
    // Your implementation goes here
    printf("method6\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<service1Handler> handler(new service1Handler());
  shared_ptr<TProcessor> processor(new service1Processor(handler));
  TEventServerCreator serverCreator(processor, port);
  shared_ptr<TEventServer> server = serverCreator.createEventServer();
  server->serve();
  return 0;
}
