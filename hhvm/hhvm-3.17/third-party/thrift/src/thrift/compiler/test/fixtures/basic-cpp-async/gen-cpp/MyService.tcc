/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _MyService_TCC
#define  _MyService_TCC

#include "thrift/compiler/test/fixtures/basic-cpp-async/gen-cpp/MyService.h"
#include <folly/ScopeGuard.h>
#include <folly/ExceptionWrapper.h>
#include <thrift/lib/cpp/async/TAsyncChannel.h>

#include "thrift/compiler/test/fixtures/basic-cpp-async/gen-cpp/module_reflection.h"



template <class Protocol_>
uint32_t MyService_ping_args::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_16917139520594253004(*schema);
    iprot->setNextStructType(MyService_ping_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_ping_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_ping_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_ping_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_ping_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_ping_presult::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_7454426369090387564(*schema);
    iprot->setNextStructType(MyService_ping_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_ping_presult::write(Protocol_* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyService_ping_presult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_getRandomData_args::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_15719605412501798860(*schema);
    iprot->setNextStructType(MyService_getRandomData_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_getRandomData_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_getRandomData_args");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_getRandomData_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_getRandomData_pargs");
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_getRandomData_presult::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_11335342061983591980(*schema);
    iprot->setNextStructType(MyService_getRandomData_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_getRandomData_presult::write(Protocol_* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyService_getRandomData_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeString((*(this->success)));
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_hasDataById_args::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_12544043904188382700(*schema);
    iprot->setNextStructType(MyService_hasDataById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_hasDataById_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_hasDataById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_hasDataById_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_hasDataById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_hasDataById_presult::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_7676580259158416684(*schema);
    iprot->setNextStructType(MyService_hasDataById_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_hasDataById_presult::write(Protocol_* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyService_hasDataById_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_BOOL, 0);
    xfer += oprot->writeBool((*(this->success)));
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_getDataById_args::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_6402583257721468108(*schema);
    iprot->setNextStructType(MyService_getDataById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_getDataById_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_getDataById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_getDataById_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_getDataById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_getDataById_presult::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_8469747470745394316(*schema);
    iprot->setNextStructType(MyService_getDataById_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString((*(this->success)));
          this->__isset.success = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_getDataById_presult::write(Protocol_* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyService_getDataById_presult");

  if (this->__isset.success) {
    xfer += oprot->writeFieldBegin("success", apache::thrift::protocol::T_STRING, 0);
    xfer += oprot->writeString((*(this->success)));
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_putDataById_args::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_546042509371991564(*schema);
    iprot->setNextStructType(MyService_putDataById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_putDataById_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_putDataById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_putDataById_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_putDataById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->data)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_putDataById_presult::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_9940143875439151532(*schema);
    iprot->setNextStructType(MyService_putDataById_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_putDataById_presult::write(Protocol_* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyService_putDataById_presult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_lobDataById_args::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_15564732069918360876(*schema);
    iprot->setNextStructType(MyService_lobDataById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_lobDataById_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_lobDataById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->data);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_lobDataById_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_lobDataById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString((*(this->data)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_putStructById_args::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_15712934915173236044(*schema);
    iprot->setNextStructType(MyService_putStructById_args::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->data.read(iprot);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_putStructById_args::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_putStructById_args");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->data.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_putStructById_pargs::write(Protocol_* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("MyService_putStructById_pargs");
  xfer += oprot->writeFieldBegin("id", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64((*(this->id)));
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->data)).write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
uint32_t MyService_putStructById_presult::read(Protocol_* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  ::apache::thrift::reflection::Schema * schema = iprot->getSchema();
  if (schema != nullptr) {
     ::module_reflection_::reflectionInitializer_4967378470319252300(*schema);
    iprot->setNextStructType(MyService_putStructById_presult::_reflection_id);
  }
  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;



  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyService_putStructById_presult::write(Protocol_* oprot) const {

  uint32_t xfer = 0;

  xfer += oprot->writeStructBegin("MyService_putStructById_presult");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

template <class Protocol_>
int32_t MyServiceClientT<Protocol_>::getNextSendSequenceId()
{
  return nextSendSequenceId_++;
}

template <class Protocol_>
int32_t MyServiceClientT<Protocol_>::getNextRecvSequenceId()
{
  return nextRecvSequenceId_++;
}

template <class Protocol_>
const char* MyServiceClientT<Protocol_>::getServiceName() {
{
  return "MyService";
}
}
template <class Protocol_>
void MyServiceClientT<Protocol_>::ping()
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.ping", this->getConnectionContext());

  try {
    send_ping();
    recv_ping();
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::send_ping()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("ping", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_ping_pargs args;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes1 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes1);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceClientT<Protocol_>::recv_wrapped_ping()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("ping") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_ping_presult result;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::recv_ping()
{
  auto ew = recv_wrapped_ping();
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::getRandomData(std::string& _return)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.getRandomData", this->getConnectionContext());

  try {
    send_getRandomData();
    recv_getRandomData(_return);
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::send_getRandomData()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("getRandomData", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_getRandomData_pargs args;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes2 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes2);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceClientT<Protocol_>::recv_wrapped_getRandomData(std::string& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("getRandomData") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_getRandomData_presult result;
    result.success = &_return;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      // _return pointer has now been filled
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "getRandomData failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::recv_getRandomData(std::string& _return)
{
  auto ew = recv_wrapped_getRandomData(_return);
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
bool MyServiceClientT<Protocol_>::hasDataById(int64_t id)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.hasDataById", this->getConnectionContext());

  try {
    send_hasDataById(id);
    return recv_hasDataById();
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::send_hasDataById(int64_t id)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("hasDataById", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_hasDataById_pargs args;
  args.id = &id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes3 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes3);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceClientT<Protocol_>::recv_wrapped_hasDataById(bool& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("hasDataById") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_hasDataById_presult result;
    result.success = &_return;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "hasDataById failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
bool MyServiceClientT<Protocol_>::recv_hasDataById()
{
  bool _return;
  auto ew = recv_wrapped_hasDataById(_return);
  if (ew) {
    ew.throwException();
  }
  return _return;
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::getDataById(std::string& _return, int64_t id)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.getDataById", this->getConnectionContext());

  try {
    send_getDataById(id);
    recv_getDataById(_return);
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::send_getDataById(int64_t id)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("getDataById", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_getDataById_pargs args;
  args.id = &id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes4 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes4);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceClientT<Protocol_>::recv_wrapped_getDataById(std::string& _return)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("getDataById") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_getDataById_presult result;
    result.success = &_return;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      // _return pointer has now been filled
      return; // from try_and_catch
    }
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "getDataById failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::recv_getDataById(std::string& _return)
{
  auto ew = recv_wrapped_getDataById(_return);
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::putDataById(int64_t id, const std::string& data)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.putDataById", this->getConnectionContext());

  try {
    send_putDataById(id, data);
    recv_putDataById();
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::send_putDataById(int64_t id, const std::string& data)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("putDataById", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_putDataById_pargs args;
  args.id = &id;
  args.data = &data;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes5 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes5);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceClientT<Protocol_>::recv_wrapped_putDataById()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("putDataById") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_putDataById_presult result;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::recv_putDataById()
{
  auto ew = recv_wrapped_putDataById();
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::lobDataById(int64_t id, const std::string& data)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.lobDataById", this->getConnectionContext());

  try {
    send_lobDataById(id, data);
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::send_lobDataById(int64_t id, const std::string& data)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("lobDataById", apache::thrift::protocol::T_CALL, 0);

  MyService_lobDataById_pargs args;
  args.id = &id;
  args.data = &data;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes6 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->onewayFlush();
  if (ctx) ctx->postWrite(_bytes6);
  return;
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::putStructById(int64_t id, const MyStruct& data)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.putStructById", this->getConnectionContext());

  try {
    send_putStructById(id, data);
    recv_putStructById();
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::send_putStructById(int64_t id, const MyStruct& data)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("putStructById", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_putStructById_pargs args;
  args.id = &id;
  args.data = &data;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes7 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes7);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceClientT<Protocol_>::recv_wrapped_putStructById()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("putStructById") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_putStructById_presult result;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    return interior_ew ? interior_ew : caught_ew;
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceClientT<Protocol_>::recv_putStructById()
{
  auto ew = recv_wrapped_putStructById();
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
bool MyServiceProcessorT<Protocol_>::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  const ProcessFunctions& pf = pfn->second;
  (this->*(pf.generic))(seqid, iprot, oprot, connectionContext);
  return true;
}

template <class Protocol_>
bool MyServiceProcessorT<Protocol_>::dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  const ProcessFunctions& pf = pfn->second;
  (this->*(pf.specialized))(seqid, iprot, oprot, connectionContext);
  return true;
}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_ping(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.ping", connectionContext));

  if (ctx) ctx->preRead();
  MyService_ping_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("ping", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_ping_presult result;
  try {
    iface_->ping();
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ping", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("ping", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_ping(int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.ping", connectionContext));

  if (ctx) ctx->preRead();
  MyService_ping_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("ping", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_ping_presult result;
  try {
    iface_->ping();
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("ping", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("ping", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_getRandomData(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.getRandomData", connectionContext));

  if (ctx) ctx->preRead();
  MyService_getRandomData_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_getRandomData_presult result;
  std::string success;
  result.success = &success;
  try {
    iface_->getRandomData(*result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_getRandomData(int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.getRandomData", connectionContext));

  if (ctx) ctx->preRead();
  MyService_getRandomData_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_getRandomData_presult result;
  std::string success;
  result.success = &success;
  try {
    iface_->getRandomData(*result.success);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_hasDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.hasDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_hasDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_hasDataById_presult result;
  bool success;
  result.success = &success;
  try {
    *result.success = iface_->hasDataById(args.id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_hasDataById(int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.hasDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_hasDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_hasDataById_presult result;
  bool success;
  result.success = &success;
  try {
    *result.success = iface_->hasDataById(args.id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_getDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.getDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_getDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_getDataById_presult result;
  std::string success;
  result.success = &success;
  try {
    iface_->getDataById(*result.success, args.id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_getDataById(int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.getDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_getDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_getDataById_presult result;
  std::string success;
  result.success = &success;
  try {
    iface_->getDataById(*result.success, args.id);
    result.__isset.success = true;
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_putDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.putDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_putDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_putDataById_presult result;
  try {
    iface_->putDataById(args.id, args.data);
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_putDataById(int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.putDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_putDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_putDataById_presult result;
  try {
    iface_->putDataById(args.id, args.data);
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_lobDataById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.lobDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_lobDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("lobDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  try {
    iface_->lobDataById(args.id, args.data);
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();

    return;
  }

  if (ctx) ctx->asyncComplete();
  return;
}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_lobDataById(int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.lobDataById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_lobDataById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("lobDataById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  try {
    iface_->lobDataById(args.id, args.data);
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();

    return;
  }

  if (ctx) ctx->asyncComplete();
  return;
}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_putStructById(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.putStructById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_putStructById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("putStructById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_putStructById_presult result;
  try {
    iface_->putStructById(args.id, args.data);
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("putStructById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("putStructById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
void MyServiceProcessorT<Protocol_>::process_putStructById(int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.putStructById", connectionContext));

  if (ctx) ctx->preRead();
  MyService_putStructById_args args;
  try {
    args.read(iprot);
  } catch (const apache::thrift::protocol::TProtocolException& e) {
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::PROTOCOL_ERROR, e.what());
    oprot->writeMessageBegin("putStructById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (ctx) ctx->postRead(nullptr, bytes);

  MyService_putStructById_presult result;
  try {
    iface_->putStructById(args.id, args.data);
  } catch (const std::exception& e) {
    if (ctx) ctx->handlerError();


    apache::thrift::TApplicationException x(e.what());
    oprot->writeMessageBegin("putStructById", apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return;
  }

  if (ctx) ctx->preWrite();
  oprot->writeMessageBegin("putStructById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();

  if (ctx) ctx->postWrite(bytes);

}

template <class Protocol_>
::std::shared_ptr< ::apache::thrift::TProcessor > MyServiceProcessorFactoryT<Protocol_>::getProcessor(::apache::thrift::server::TConnectionContext* ctx) {
  ::apache::thrift::ReleaseHandler< MyServiceIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< MyServiceIf > handler(handlerFactory_->getHandler(ctx), cleanup);
  ::std::shared_ptr< ::apache::thrift::TProcessor > processor(new MyServiceProcessorT<Protocol_>(handler));
  return processor;
}
template <class Protocol_>
int32_t MyServiceCobClientT<Protocol_>::getNextSendSequenceId()
{
  return nextSendSequenceId_++;
}

template <class Protocol_>
int32_t MyServiceCobClientT<Protocol_>::getNextRecvSequenceId()
{
  return nextRecvSequenceId_++;
}

template <class Protocol_>
const char* MyServiceCobClientT<Protocol_>::getServiceName() {
{
  return "MyService";
}
}
template <class Protocol_>
void MyServiceCobClientT<Protocol_>::ping(std::function<void(MyServiceCobClientT<Protocol_>* client)> cob)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.ping", this->getConnectionContext());

  try {
    send_ping();
    this->channel_->sendAndRecvMessage(std::bind(cob, this), this->otrans_.get(), this->itrans_.get());
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::send_ping()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("ping", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_ping_pargs args;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes8 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes8);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceCobClientT<Protocol_>::recv_wrapped_ping()
{
  // TODO: load ContextStack generated in ping
  this->clearClientContextStack();
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(true);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("ping") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_ping_presult result;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    completed__(true);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    if (interior_ew) {
      return interior_ew;
    } else {
      completed__(false);
      return caught_ew;
    }
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::recv_ping()
{
  auto ew = recv_wrapped_ping();
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::getRandomData(std::function<void(MyServiceCobClientT<Protocol_>* client)> cob)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.getRandomData", this->getConnectionContext());

  try {
    send_getRandomData();
    this->channel_->sendAndRecvMessage(std::bind(cob, this), this->otrans_.get(), this->itrans_.get());
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::send_getRandomData()
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("getRandomData", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_getRandomData_pargs args;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes9 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes9);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceCobClientT<Protocol_>::recv_wrapped_getRandomData(std::string& _return)
{
  // TODO: load ContextStack generated in getRandomData
  this->clearClientContextStack();
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(true);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("getRandomData") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_getRandomData_presult result;
    result.success = &_return;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      // _return pointer has now been filled
      completed__(true);
      return; // from try_and_catch
    }
    completed__(true);
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "getRandomData failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    if (interior_ew) {
      return interior_ew;
    } else {
      completed__(false);
      return caught_ew;
    }
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::recv_getRandomData(std::string& _return)
{
  auto ew = recv_wrapped_getRandomData(_return);
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::hasDataById(std::function<void(MyServiceCobClientT<Protocol_>* client)> cob, int64_t id)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.hasDataById", this->getConnectionContext());

  try {
    send_hasDataById(id);
    this->channel_->sendAndRecvMessage(std::bind(cob, this), this->otrans_.get(), this->itrans_.get());
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::send_hasDataById(int64_t id)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("hasDataById", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_hasDataById_pargs args;
  args.id = &id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes10 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes10);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceCobClientT<Protocol_>::recv_wrapped_hasDataById(bool& _return)
{
  // TODO: load ContextStack generated in hasDataById
  this->clearClientContextStack();
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(true);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("hasDataById") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_hasDataById_presult result;
    result.success = &_return;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      completed__(true);
      return; // from try_and_catch
    }
    completed__(true);
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "hasDataById failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    if (interior_ew) {
      return interior_ew;
    } else {
      completed__(false);
      return caught_ew;
    }
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
bool MyServiceCobClientT<Protocol_>::recv_hasDataById()
{
  bool _return;
  auto ew = recv_wrapped_hasDataById(_return);
  if (ew) {
    ew.throwException();
  }
  return _return;
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::getDataById(std::function<void(MyServiceCobClientT<Protocol_>* client)> cob, int64_t id)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.getDataById", this->getConnectionContext());

  try {
    send_getDataById(id);
    this->channel_->sendAndRecvMessage(std::bind(cob, this), this->otrans_.get(), this->itrans_.get());
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::send_getDataById(int64_t id)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("getDataById", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_getDataById_pargs args;
  args.id = &id;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes11 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes11);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceCobClientT<Protocol_>::recv_wrapped_getDataById(std::string& _return)
{
  // TODO: load ContextStack generated in getDataById
  this->clearClientContextStack();
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(true);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("getDataById") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_getDataById_presult result;
    result.success = &_return;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    if (result.__isset.success) {
      // _return pointer has now been filled
      completed__(true);
      return; // from try_and_catch
    }
    completed__(true);
    interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::MISSING_RESULT, "getDataById failed: unknown result");
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    if (interior_ew) {
      return interior_ew;
    } else {
      completed__(false);
      return caught_ew;
    }
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::recv_getDataById(std::string& _return)
{
  auto ew = recv_wrapped_getDataById(_return);
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::putDataById(std::function<void(MyServiceCobClientT<Protocol_>* client)> cob, int64_t id, const std::string& data)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.putDataById", this->getConnectionContext());

  try {
    send_putDataById(id, data);
    this->channel_->sendAndRecvMessage(std::bind(cob, this), this->otrans_.get(), this->itrans_.get());
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::send_putDataById(int64_t id, const std::string& data)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("putDataById", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_putDataById_pargs args;
  args.id = &id;
  args.data = &data;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes12 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes12);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceCobClientT<Protocol_>::recv_wrapped_putDataById()
{
  // TODO: load ContextStack generated in putDataById
  this->clearClientContextStack();
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(true);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("putDataById") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_putDataById_presult result;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    completed__(true);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    if (interior_ew) {
      return interior_ew;
    } else {
      completed__(false);
      return caught_ew;
    }
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::recv_putDataById()
{
  auto ew = recv_wrapped_putDataById();
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::lobDataById(std::function<void(MyServiceCobClientT<Protocol_>* client)> cob, int64_t id, const std::string& data)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.lobDataById", this->getConnectionContext());

  try {
    send_lobDataById(id, data);
    this->channel_->sendOnewayMessage(std::bind(cob, this), this->otrans_.get());
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::send_lobDataById(int64_t id, const std::string& data)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("lobDataById", apache::thrift::protocol::T_CALL, 0);

  MyService_lobDataById_pargs args;
  args.id = &id;
  args.data = &data;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes13 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->onewayFlush();
  if (ctx) ctx->postWrite(_bytes13);
  return;
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::putStructById(std::function<void(MyServiceCobClientT<Protocol_>* client)> cob, int64_t id, const MyStruct& data)
{
  SCOPE_EXIT { this->clearClientContextStack(); };
  this->generateClientContextStack(this->getServiceName(), "MyService.putStructById", this->getConnectionContext());

  try {
    send_putStructById(id, data);
    this->channel_->sendAndRecvMessage(std::bind(cob, this), this->otrans_.get(), this->itrans_.get());
  } catch (apache::thrift::transport::TTransportException& ex) {
    ::apache::thrift::ContextStack* c = this->getClientContextStack();
    if (c) c->handlerError();
    this->iprot_->getTransport()->close();
    this->oprot_->getTransport()->close();
    throw;
  } catch (apache::thrift::TApplicationException& ex) {
    if (ex.getType() == apache::thrift::TApplicationException::BAD_SEQUENCE_ID) {
      ::apache::thrift::ContextStack* c = this->getClientContextStack();
      if (c) c->handlerError();
      this->iprot_->getTransport()->close();
      this->oprot_->getTransport()->close();
    }
    throw;
  }
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::send_putStructById(int64_t id, const MyStruct& data)
{
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  if (ctx) ctx->preWrite();
  this->oprot_->writeMessageBegin("putStructById", apache::thrift::protocol::T_CALL, this->getNextSendSequenceId());

  MyService_putStructById_pargs args;
  args.id = &id;
  args.data = &data;
  args.write(this->oprot_);

  this->oprot_->writeMessageEnd();
  uint32_t _bytes14 = this->oprot_->getTransport()->writeEnd();
  this->oprot_->getTransport()->flush();
  if (ctx) ctx->postWrite(_bytes14);
  return;
}

template <class Protocol_>
folly::exception_wrapper MyServiceCobClientT<Protocol_>::recv_wrapped_putStructById()
{
  // TODO: load ContextStack generated in putStructById
  this->clearClientContextStack();
  apache::thrift::ContextStack* ctx = this->getClientContextStack();
  int32_t rseqid = 0;
  int32_t eseqid = this->getNextRecvSequenceId();
  std::string fname;
  apache::thrift::protocol::TMessageType mtype;
  if (ctx) ctx->preRead();
  folly::exception_wrapper interior_ew;
  auto caught_ew = folly::try_and_catch<apache::thrift::TException, apache::thrift::protocol::TProtocolException>([&]() {
    this->iprot_->readMessageBegin(fname, mtype, rseqid);
    if (this->checkSeqid_ && rseqid != eseqid) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::BAD_SEQUENCE_ID);
      return; // from try_and_catch
    }
    if (mtype == apache::thrift::protocol::T_EXCEPTION) {
      apache::thrift::TApplicationException x;
      x.read(this->iprot_);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(true);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(x);
      return; // from try_and_catch
    }
    if (mtype != apache::thrift::protocol::T_REPLY) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::INVALID_MESSAGE_TYPE);
      return; // from try_and_catch
    }
    if (fname.compare("putStructById") != 0) {
      this->iprot_->skip(apache::thrift::protocol::T_STRUCT);
      this->iprot_->readMessageEnd();
      this->iprot_->getTransport()->readEnd();
      completed__(false);
      interior_ew = folly::make_exception_wrapper<apache::thrift::TApplicationException>(apache::thrift::TApplicationException::WRONG_METHOD_NAME);
      return; // from try_and_catch
    }
    MyService_putStructById_presult result;
    result.read(this->iprot_);
    this->iprot_->readMessageEnd();
    uint32_t bytes = this->iprot_->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);
    completed__(true);
    return; // from try_and_catch
  });
  if (interior_ew || caught_ew) {
    if (interior_ew) {
      return interior_ew;
    } else {
      completed__(false);
      return caught_ew;
    }
  }
  return folly::exception_wrapper();
}

template <class Protocol_>
void MyServiceCobClientT<Protocol_>::recv_putStructById()
{
  auto ew = recv_wrapped_putStructById();
  if (ew) {
    ew.throwException();
  }
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::dispatchCall(std::function<void(bool ok)> cob, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  const ProcessFunctions& pf = pfn->second;
  (this->*(pf.generic))(cob, seqid, iprot, oprot, connectionContext);
  return;
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::dispatchCallTemplated(std::function<void(bool ok)> cob, Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext) {
  typename ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    apache::thrift::TApplicationException x(apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return cob(true);
  }
  const ProcessFunctions& pf = pfn->second;
  (this->*(pf.specialized))(cob, seqid, iprot, oprot, connectionContext);
  return;
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_ping(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  Protocol_* _iprot = dynamic_cast<Protocol_*>(iprot);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_iprot && _oprot) {
    return process_ping(cob, seqid, _iprot, _oprot, connectionContext);
  }
  T_GENERIC_PROTOCOL(this, iprot, _iprot);
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_ping_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.ping", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* ctx) =
    &MyServiceAsyncProcessorT<Protocol_>::return_ping;
  iface_->ping(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack));
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_ping(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* contextStack)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_oprot) {
    return return_ping(cob, seqid, _oprot, ctx.release());
  }
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_ping_presult result;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("ping", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_ping(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  MyService_ping_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.ping", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* ctx) =
    &MyServiceAsyncProcessorT<Protocol_>::return_ping;
  iface_->ping(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack));
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_ping(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* contextStack)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  MyService_ping_presult result;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("ping", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_getRandomData(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  Protocol_* _iprot = dynamic_cast<Protocol_*>(iprot);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_iprot && _oprot) {
    return process_getRandomData(cob, seqid, _iprot, _oprot, connectionContext);
  }
  T_GENERIC_PROTOCOL(this, iprot, _iprot);
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_getRandomData_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.getRandomData", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* ctx, const std::string& _return) =
    &MyServiceAsyncProcessorT<Protocol_>::return_getRandomData;
  iface_->getRandomData(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack, std::placeholders::_1));
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_getRandomData(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* contextStack, const std::string& _return)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_oprot) {
    return return_getRandomData(cob, seqid, _oprot, ctx.release(), _return);
  }
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_getRandomData_presult result;
  result.success = const_cast<std::string*>(&_return);
  result.__isset.success = true;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_getRandomData(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  MyService_getRandomData_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.getRandomData", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* ctx, const std::string& _return) =
    &MyServiceAsyncProcessorT<Protocol_>::return_getRandomData;
  iface_->getRandomData(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack, std::placeholders::_1));
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_getRandomData(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* contextStack, const std::string& _return)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  MyService_getRandomData_presult result;
  result.success = const_cast<std::string*>(&_return);
  result.__isset.success = true;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("getRandomData", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_hasDataById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  Protocol_* _iprot = dynamic_cast<Protocol_*>(iprot);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_iprot && _oprot) {
    return process_hasDataById(cob, seqid, _iprot, _oprot, connectionContext);
  }
  T_GENERIC_PROTOCOL(this, iprot, _iprot);
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_hasDataById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.hasDataById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* ctx, const bool& _return) =
    &MyServiceAsyncProcessorT<Protocol_>::return_hasDataById;
  iface_->hasDataById(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack, std::placeholders::_1),
      args.id);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_hasDataById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* contextStack, const bool& _return)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_oprot) {
    return return_hasDataById(cob, seqid, _oprot, ctx.release(), _return);
  }
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_hasDataById_presult result;
  result.success = const_cast<bool*>(&_return);
  result.__isset.success = true;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_hasDataById(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  MyService_hasDataById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.hasDataById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* ctx, const bool& _return) =
    &MyServiceAsyncProcessorT<Protocol_>::return_hasDataById;
  iface_->hasDataById(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack, std::placeholders::_1),
      args.id);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_hasDataById(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* contextStack, const bool& _return)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  MyService_hasDataById_presult result;
  result.success = const_cast<bool*>(&_return);
  result.__isset.success = true;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("hasDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_getDataById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  Protocol_* _iprot = dynamic_cast<Protocol_*>(iprot);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_iprot && _oprot) {
    return process_getDataById(cob, seqid, _iprot, _oprot, connectionContext);
  }
  T_GENERIC_PROTOCOL(this, iprot, _iprot);
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_getDataById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.getDataById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* ctx, const std::string& _return) =
    &MyServiceAsyncProcessorT<Protocol_>::return_getDataById;
  iface_->getDataById(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack, std::placeholders::_1),
      args.id);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_getDataById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* contextStack, const std::string& _return)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_oprot) {
    return return_getDataById(cob, seqid, _oprot, ctx.release(), _return);
  }
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_getDataById_presult result;
  result.success = const_cast<std::string*>(&_return);
  result.__isset.success = true;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_getDataById(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  MyService_getDataById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.getDataById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* ctx, const std::string& _return) =
    &MyServiceAsyncProcessorT<Protocol_>::return_getDataById;
  iface_->getDataById(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack, std::placeholders::_1),
      args.id);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_getDataById(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* contextStack, const std::string& _return)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  MyService_getDataById_presult result;
  result.success = const_cast<std::string*>(&_return);
  result.__isset.success = true;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("getDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_putDataById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  Protocol_* _iprot = dynamic_cast<Protocol_*>(iprot);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_iprot && _oprot) {
    return process_putDataById(cob, seqid, _iprot, _oprot, connectionContext);
  }
  T_GENERIC_PROTOCOL(this, iprot, _iprot);
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_putDataById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.putDataById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* ctx) =
    &MyServiceAsyncProcessorT<Protocol_>::return_putDataById;
  iface_->putDataById(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack),
      args.id,
      args.data);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_putDataById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* contextStack)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_oprot) {
    return return_putDataById(cob, seqid, _oprot, ctx.release());
  }
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_putDataById_presult result;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_putDataById(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  MyService_putDataById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.putDataById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* ctx) =
    &MyServiceAsyncProcessorT<Protocol_>::return_putDataById;
  iface_->putDataById(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack),
      args.id,
      args.data);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_putDataById(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* contextStack)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  MyService_putDataById_presult result;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("putDataById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_lobDataById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  Protocol_* _iprot = dynamic_cast<Protocol_*>(iprot);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_iprot && _oprot) {
    return process_lobDataById(cob, seqid, _iprot, _oprot, connectionContext);
  }
  T_GENERIC_PROTOCOL(this, iprot, _iprot);
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_lobDataById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.lobDataById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  if (ctx) ctx->asyncComplete();

  iface_->lobDataById(std::bind(cob, true)
,
      args.id,
      args.data);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_lobDataById(std::function<void(bool ok)> cob, int32_t /*seqid*/, Protocol_* iprot, Protocol_* /*oprot*/, apache::thrift::server::TConnectionContext* connectionContext)
{
  MyService_lobDataById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.lobDataById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  if (ctx) ctx->asyncComplete();

  iface_->lobDataById(std::bind(cob, true)
,
      args.id,
      args.data);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_putStructById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  Protocol_* _iprot = dynamic_cast<Protocol_*>(iprot);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_iprot && _oprot) {
    return process_putStructById(cob, seqid, _iprot, _oprot, connectionContext);
  }
  T_GENERIC_PROTOCOL(this, iprot, _iprot);
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_putStructById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.putStructById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* ctx) =
    &MyServiceAsyncProcessorT<Protocol_>::return_putStructById;
  iface_->putStructById(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack),
      args.id,
      args.data);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_putStructById(std::function<void(bool ok)> cob, int32_t seqid, apache::thrift::protocol::TProtocol* oprot, apache::thrift::ContextStack* contextStack)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  Protocol_* _oprot = dynamic_cast<Protocol_*>(oprot);
  if (_oprot) {
    return return_putStructById(cob, seqid, _oprot, ctx.release());
  }
  T_GENERIC_PROTOCOL(this, oprot, _oprot);

  MyService_putStructById_presult result;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("putStructById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::process_putStructById(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* iprot, Protocol_* oprot, apache::thrift::server::TConnectionContext* connectionContext)
{
  MyService_putStructById_args args;
  std::unique_ptr<apache::thrift::ContextStack> ctx(this->getContextStack(this->getServiceName(), "MyService.putStructById", connectionContext));

  try {
    if (ctx) ctx->preRead();
    args.read(iprot);
    iprot->readMessageEnd();
    uint32_t bytes = iprot->getTransport()->readEnd();
    if (ctx) ctx->postRead(nullptr, bytes);

  }
  catch (const std::exception& exn) {
    if (ctx) ctx->handlerError();
    return cob(false);
  }
  apache::thrift::ContextStack *contextStack = ctx.release();
  void (MyServiceAsyncProcessorT<Protocol_>::*return_fn)(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* ctx) =
    &MyServiceAsyncProcessorT<Protocol_>::return_putStructById;
  iface_->putStructById(
      std::bind(return_fn, this, cob, seqid, oprot, contextStack),
      args.id,
      args.data);
}

template <class Protocol_>
void MyServiceAsyncProcessorT<Protocol_>::return_putStructById(std::function<void(bool ok)> cob, int32_t seqid, Protocol_* oprot, apache::thrift::ContextStack* contextStack)
{
  std::unique_ptr<apache::thrift::ContextStack> ctx(contextStack);
  MyService_putStructById_presult result;

  if (ctx) ctx->preWrite();

  oprot->writeMessageBegin("putStructById", apache::thrift::protocol::T_REPLY, seqid);
  result.write(oprot);
  oprot->writeMessageEnd();
  uint32_t bytes = oprot->getTransport()->writeEnd();
  oprot->getTransport()->flush();
  if (ctx) ctx->postWrite(bytes);

  return cob(true);
}

template <class Protocol_>
::std::shared_ptr< ::apache::thrift::TAsyncProcessor > MyServiceAsyncProcessorFactoryT<Protocol_>::getProcessor(::apache::thrift::server::TConnectionContext* ctx) {
  ::apache::thrift::ReleaseHandler< MyServiceCobSvIfFactory > cleanup(handlerFactory_);
  ::std::shared_ptr< MyServiceCobSvIf > handler(handlerFactory_->getHandler(ctx), cleanup);
  ::std::shared_ptr< ::apache::thrift::TAsyncProcessor > processor(new MyServiceAsyncProcessorT<Protocol_>(handler));
  return processor;
}


#endif
