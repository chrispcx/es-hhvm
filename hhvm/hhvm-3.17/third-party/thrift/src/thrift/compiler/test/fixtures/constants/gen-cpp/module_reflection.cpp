/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/constants/gen-cpp/module_reflection.h"
#include <thrift/lib/cpp/Reflection.h>

 namespace module_reflection_ {

// Reflection initializer for enum module.Company
static void reflectionInitializer_16163282776448022760(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 16163282776448022760U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "enum module.Company";
  schema.names[dt.name] = id;
  dt.__isset.enumValues = true;
  static const std::pair<const char*, int32_t> enumValues[] = {
    {"FACEBOOK", 0},
    {"INSTAGRAM", 3},
    {"OCULUS", 2},
    {"WHATSAPP", 1},
  };
  dt.enumValues.insert(enumValues, enumValues + 4);
}

static void  reflectionInitializer_16163282776448022760(::apache::thrift::reflection::Schema&);  // enum module.Company
// Reflection initializer for struct module.Internship
void reflectionInitializer_9022508676980868684(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 9022508676980868684U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct module.Internship";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 5U;
    f.name = "weeks";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = true;
    f.type = 1U;
    f.name = "title";
    f.order = 1;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[3];
    f.isRequired = false;
    f.type = 16163282776448022760U;
    f.name = "employer";
    f.order = 2;
  }
  reflectionInitializer_16163282776448022760(schema);  // enum module.Company
}

// Reflection initializer for enum module.City
static void reflectionInitializer_12670503349505482568(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 12670503349505482568U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "enum module.City";
  schema.names[dt.name] = id;
  dt.__isset.enumValues = true;
  static const std::pair<const char*, int32_t> enumValues[] = {
    {"LON", 3},
    {"MPK", 1},
    {"NYC", 0},
    {"SEA", 2},
  };
  dt.enumValues.insert(enumValues, enumValues + 4);
}

static void  reflectionInitializer_12670503349505482568(::apache::thrift::reflection::Schema&);  // enum module.City
// Reflection initializer for struct module.UnEnumStruct
void reflectionInitializer_18314195816413397484(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 18314195816413397484U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct module.UnEnumStruct";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 12670503349505482568U;
    f.name = "city";
    f.order = 0;
  }
  reflectionInitializer_12670503349505482568(schema);  // enum module.City
}

// Reflection initializer for struct module.Range
void reflectionInitializer_7757081658652615948(::apache::thrift::reflection::Schema& schema) {
  const uint64_t id = 7757081658652615948U;
  if (schema.dataTypes.count(id)) return;
  ::apache::thrift::reflection::DataType& dt = schema.dataTypes[id];
  dt.name = "struct module.Range";
  schema.names[dt.name] = id;
  dt.__isset.fields = true;
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[1];
    f.isRequired = true;
    f.type = 5U;
    f.name = "min";
    f.order = 0;
  }
  {
    ::apache::thrift::reflection::StructField& f = dt.fields[2];
    f.isRequired = true;
    f.type = 5U;
    f.name = "max";
    f.order = 1;
  }
}

}

