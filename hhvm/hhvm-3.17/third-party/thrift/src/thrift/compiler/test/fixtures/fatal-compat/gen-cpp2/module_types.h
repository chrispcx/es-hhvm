/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp/module_types.h"
#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>

#include "thrift/test/fatal_custom_types.h"


namespace test_cpp2 { namespace cpp_reflection {

typedef  ::test_cpp1::cpp_reflection::enum1 enum1;
typedef  ::test_cpp1::cpp_reflection::enum2 enum2;
typedef  ::test_cpp1::cpp_reflection::enum3 enum3;
typedef  ::test_cpp1::cpp_reflection::enum_with_special_names enum_with_special_names;
typedef test_cpp_reflection::custom_structA my_structA;

typedef ::test_cpp1::cpp_reflection::union1 union1;
template <class Protocol_>
uint32_t union1_read(Protocol_* iprot, union1* obj);
template <class Protocol_>
uint32_t union1_serializedSize(Protocol_ const* prot_, const union1* obj);
template <class Protocol_>
uint32_t union1_serializedSizeZC(Protocol_ const* prot_, const union1* obj);
template <class Protocol_>
uint32_t union1_write(Protocol_* prot_, const union1* obj);
extern template uint32_t union1_read<>(apache::thrift::BinaryProtocolReader*, union1*);
extern template uint32_t union1_write<>(apache::thrift::BinaryProtocolWriter*, const union1*);
extern template uint32_t union1_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const union1*);
extern template uint32_t union1_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const union1*);
extern template uint32_t union1_read<>(apache::thrift::CompactProtocolReader*, union1*);
extern template uint32_t union1_write<>(apache::thrift::CompactProtocolWriter*, const union1*);
extern template uint32_t union1_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const union1*);
extern template uint32_t union1_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const union1*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::union1>::clear( ::test_cpp2::cpp_reflection::union1* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::union1>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union1>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::union1 const* obj) {
  return  ::test_cpp2::cpp_reflection::union1_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union1>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::union1* obj) {
  return  ::test_cpp2::cpp_reflection::union1_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union1>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::union1 const* obj) {
  return  ::test_cpp2::cpp_reflection::union1_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::union1 const* obj) {
  return  ::test_cpp2::cpp_reflection::union1_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::union2 union2;
template <class Protocol_>
uint32_t union2_read(Protocol_* iprot, union2* obj);
template <class Protocol_>
uint32_t union2_serializedSize(Protocol_ const* prot_, const union2* obj);
template <class Protocol_>
uint32_t union2_serializedSizeZC(Protocol_ const* prot_, const union2* obj);
template <class Protocol_>
uint32_t union2_write(Protocol_* prot_, const union2* obj);
extern template uint32_t union2_read<>(apache::thrift::BinaryProtocolReader*, union2*);
extern template uint32_t union2_write<>(apache::thrift::BinaryProtocolWriter*, const union2*);
extern template uint32_t union2_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const union2*);
extern template uint32_t union2_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const union2*);
extern template uint32_t union2_read<>(apache::thrift::CompactProtocolReader*, union2*);
extern template uint32_t union2_write<>(apache::thrift::CompactProtocolWriter*, const union2*);
extern template uint32_t union2_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const union2*);
extern template uint32_t union2_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const union2*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::union2>::clear( ::test_cpp2::cpp_reflection::union2* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::union2>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union2>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::union2 const* obj) {
  return  ::test_cpp2::cpp_reflection::union2_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union2>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::union2* obj) {
  return  ::test_cpp2::cpp_reflection::union2_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union2>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::union2 const* obj) {
  return  ::test_cpp2::cpp_reflection::union2_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::union2 const* obj) {
  return  ::test_cpp2::cpp_reflection::union2_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::union3 union3;
template <class Protocol_>
uint32_t union3_read(Protocol_* iprot, union3* obj);
template <class Protocol_>
uint32_t union3_serializedSize(Protocol_ const* prot_, const union3* obj);
template <class Protocol_>
uint32_t union3_serializedSizeZC(Protocol_ const* prot_, const union3* obj);
template <class Protocol_>
uint32_t union3_write(Protocol_* prot_, const union3* obj);
extern template uint32_t union3_read<>(apache::thrift::BinaryProtocolReader*, union3*);
extern template uint32_t union3_write<>(apache::thrift::BinaryProtocolWriter*, const union3*);
extern template uint32_t union3_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const union3*);
extern template uint32_t union3_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const union3*);
extern template uint32_t union3_read<>(apache::thrift::CompactProtocolReader*, union3*);
extern template uint32_t union3_write<>(apache::thrift::CompactProtocolWriter*, const union3*);
extern template uint32_t union3_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const union3*);
extern template uint32_t union3_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const union3*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::union3>::clear( ::test_cpp2::cpp_reflection::union3* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::union3>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union3>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::union3 const* obj) {
  return  ::test_cpp2::cpp_reflection::union3_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union3>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::union3* obj) {
  return  ::test_cpp2::cpp_reflection::union3_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union3>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::union3 const* obj) {
  return  ::test_cpp2::cpp_reflection::union3_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union3>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::union3 const* obj) {
  return  ::test_cpp2::cpp_reflection::union3_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::structA structA;
template <class Protocol_>
uint32_t structA_read(Protocol_* iprot, structA* obj);
template <class Protocol_>
uint32_t structA_serializedSize(Protocol_ const* prot_, const structA* obj);
template <class Protocol_>
uint32_t structA_serializedSizeZC(Protocol_ const* prot_, const structA* obj);
template <class Protocol_>
uint32_t structA_write(Protocol_* prot_, const structA* obj);
extern template uint32_t structA_read<>(apache::thrift::BinaryProtocolReader*, structA*);
extern template uint32_t structA_write<>(apache::thrift::BinaryProtocolWriter*, const structA*);
extern template uint32_t structA_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const structA*);
extern template uint32_t structA_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const structA*);
extern template uint32_t structA_read<>(apache::thrift::CompactProtocolReader*, structA*);
extern template uint32_t structA_write<>(apache::thrift::CompactProtocolWriter*, const structA*);
extern template uint32_t structA_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const structA*);
extern template uint32_t structA_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const structA*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::structA>::clear( ::test_cpp2::cpp_reflection::structA* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::structA>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structA>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::structA const* obj) {
  return  ::test_cpp2::cpp_reflection::structA_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structA>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::structA* obj) {
  return  ::test_cpp2::cpp_reflection::structA_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structA>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::structA const* obj) {
  return  ::test_cpp2::cpp_reflection::structA_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::structA const* obj) {
  return  ::test_cpp2::cpp_reflection::structA_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::unionA unionA;
template <class Protocol_>
uint32_t unionA_read(Protocol_* iprot, unionA* obj);
template <class Protocol_>
uint32_t unionA_serializedSize(Protocol_ const* prot_, const unionA* obj);
template <class Protocol_>
uint32_t unionA_serializedSizeZC(Protocol_ const* prot_, const unionA* obj);
template <class Protocol_>
uint32_t unionA_write(Protocol_* prot_, const unionA* obj);
extern template uint32_t unionA_read<>(apache::thrift::BinaryProtocolReader*, unionA*);
extern template uint32_t unionA_write<>(apache::thrift::BinaryProtocolWriter*, const unionA*);
extern template uint32_t unionA_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const unionA*);
extern template uint32_t unionA_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const unionA*);
extern template uint32_t unionA_read<>(apache::thrift::CompactProtocolReader*, unionA*);
extern template uint32_t unionA_write<>(apache::thrift::CompactProtocolWriter*, const unionA*);
extern template uint32_t unionA_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const unionA*);
extern template uint32_t unionA_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const unionA*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::unionA>::clear( ::test_cpp2::cpp_reflection::unionA* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::unionA>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::unionA>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::unionA const* obj) {
  return  ::test_cpp2::cpp_reflection::unionA_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::unionA>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::unionA* obj) {
  return  ::test_cpp2::cpp_reflection::unionA_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::unionA>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::unionA const* obj) {
  return  ::test_cpp2::cpp_reflection::unionA_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::unionA>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::unionA const* obj) {
  return  ::test_cpp2::cpp_reflection::unionA_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::structB structB;
template <class Protocol_>
uint32_t structB_read(Protocol_* iprot, structB* obj);
template <class Protocol_>
uint32_t structB_serializedSize(Protocol_ const* prot_, const structB* obj);
template <class Protocol_>
uint32_t structB_serializedSizeZC(Protocol_ const* prot_, const structB* obj);
template <class Protocol_>
uint32_t structB_write(Protocol_* prot_, const structB* obj);
extern template uint32_t structB_read<>(apache::thrift::BinaryProtocolReader*, structB*);
extern template uint32_t structB_write<>(apache::thrift::BinaryProtocolWriter*, const structB*);
extern template uint32_t structB_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const structB*);
extern template uint32_t structB_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const structB*);
extern template uint32_t structB_read<>(apache::thrift::CompactProtocolReader*, structB*);
extern template uint32_t structB_write<>(apache::thrift::CompactProtocolWriter*, const structB*);
extern template uint32_t structB_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const structB*);
extern template uint32_t structB_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const structB*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::structB>::clear( ::test_cpp2::cpp_reflection::structB* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::structB>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structB>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::structB const* obj) {
  return  ::test_cpp2::cpp_reflection::structB_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structB>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::structB* obj) {
  return  ::test_cpp2::cpp_reflection::structB_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structB>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::structB const* obj) {
  return  ::test_cpp2::cpp_reflection::structB_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::structB const* obj) {
  return  ::test_cpp2::cpp_reflection::structB_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::structC structC;
template <class Protocol_>
uint32_t structC_read(Protocol_* iprot, structC* obj);
template <class Protocol_>
uint32_t structC_serializedSize(Protocol_ const* prot_, const structC* obj);
template <class Protocol_>
uint32_t structC_serializedSizeZC(Protocol_ const* prot_, const structC* obj);
template <class Protocol_>
uint32_t structC_write(Protocol_* prot_, const structC* obj);
extern template uint32_t structC_read<>(apache::thrift::BinaryProtocolReader*, structC*);
extern template uint32_t structC_write<>(apache::thrift::BinaryProtocolWriter*, const structC*);
extern template uint32_t structC_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const structC*);
extern template uint32_t structC_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const structC*);
extern template uint32_t structC_read<>(apache::thrift::CompactProtocolReader*, structC*);
extern template uint32_t structC_write<>(apache::thrift::CompactProtocolWriter*, const structC*);
extern template uint32_t structC_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const structC*);
extern template uint32_t structC_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const structC*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::structC>::clear( ::test_cpp2::cpp_reflection::structC* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::structC>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structC>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::structC const* obj) {
  return  ::test_cpp2::cpp_reflection::structC_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structC>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::structC* obj) {
  return  ::test_cpp2::cpp_reflection::structC_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structC>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::structC const* obj) {
  return  ::test_cpp2::cpp_reflection::structC_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::structC>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::structC const* obj) {
  return  ::test_cpp2::cpp_reflection::structC_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::struct1 struct1;
template <class Protocol_>
uint32_t struct1_read(Protocol_* iprot, struct1* obj);
template <class Protocol_>
uint32_t struct1_serializedSize(Protocol_ const* prot_, const struct1* obj);
template <class Protocol_>
uint32_t struct1_serializedSizeZC(Protocol_ const* prot_, const struct1* obj);
template <class Protocol_>
uint32_t struct1_write(Protocol_* prot_, const struct1* obj);
extern template uint32_t struct1_read<>(apache::thrift::BinaryProtocolReader*, struct1*);
extern template uint32_t struct1_write<>(apache::thrift::BinaryProtocolWriter*, const struct1*);
extern template uint32_t struct1_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const struct1*);
extern template uint32_t struct1_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const struct1*);
extern template uint32_t struct1_read<>(apache::thrift::CompactProtocolReader*, struct1*);
extern template uint32_t struct1_write<>(apache::thrift::CompactProtocolWriter*, const struct1*);
extern template uint32_t struct1_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const struct1*);
extern template uint32_t struct1_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const struct1*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::struct1>::clear( ::test_cpp2::cpp_reflection::struct1* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::struct1>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct1>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::struct1 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct1_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct1>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::struct1* obj) {
  return  ::test_cpp2::cpp_reflection::struct1_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct1>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct1 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct1_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct1 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct1_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::struct2 struct2;
template <class Protocol_>
uint32_t struct2_read(Protocol_* iprot, struct2* obj);
template <class Protocol_>
uint32_t struct2_serializedSize(Protocol_ const* prot_, const struct2* obj);
template <class Protocol_>
uint32_t struct2_serializedSizeZC(Protocol_ const* prot_, const struct2* obj);
template <class Protocol_>
uint32_t struct2_write(Protocol_* prot_, const struct2* obj);
extern template uint32_t struct2_read<>(apache::thrift::BinaryProtocolReader*, struct2*);
extern template uint32_t struct2_write<>(apache::thrift::BinaryProtocolWriter*, const struct2*);
extern template uint32_t struct2_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const struct2*);
extern template uint32_t struct2_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const struct2*);
extern template uint32_t struct2_read<>(apache::thrift::CompactProtocolReader*, struct2*);
extern template uint32_t struct2_write<>(apache::thrift::CompactProtocolWriter*, const struct2*);
extern template uint32_t struct2_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const struct2*);
extern template uint32_t struct2_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const struct2*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::struct2>::clear( ::test_cpp2::cpp_reflection::struct2* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::struct2>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct2>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::struct2 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct2_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct2>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::struct2* obj) {
  return  ::test_cpp2::cpp_reflection::struct2_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct2>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct2 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct2_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct2>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct2 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct2_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::struct3 struct3;
template <class Protocol_>
uint32_t struct3_read(Protocol_* iprot, struct3* obj);
template <class Protocol_>
uint32_t struct3_serializedSize(Protocol_ const* prot_, const struct3* obj);
template <class Protocol_>
uint32_t struct3_serializedSizeZC(Protocol_ const* prot_, const struct3* obj);
template <class Protocol_>
uint32_t struct3_write(Protocol_* prot_, const struct3* obj);
extern template uint32_t struct3_read<>(apache::thrift::BinaryProtocolReader*, struct3*);
extern template uint32_t struct3_write<>(apache::thrift::BinaryProtocolWriter*, const struct3*);
extern template uint32_t struct3_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const struct3*);
extern template uint32_t struct3_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const struct3*);
extern template uint32_t struct3_read<>(apache::thrift::CompactProtocolReader*, struct3*);
extern template uint32_t struct3_write<>(apache::thrift::CompactProtocolWriter*, const struct3*);
extern template uint32_t struct3_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const struct3*);
extern template uint32_t struct3_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const struct3*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::struct3>::clear( ::test_cpp2::cpp_reflection::struct3* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::struct3>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct3>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::struct3 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct3_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct3>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::struct3* obj) {
  return  ::test_cpp2::cpp_reflection::struct3_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct3>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct3 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct3_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct3>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct3 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct3_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::struct4 struct4;
template <class Protocol_>
uint32_t struct4_read(Protocol_* iprot, struct4* obj);
template <class Protocol_>
uint32_t struct4_serializedSize(Protocol_ const* prot_, const struct4* obj);
template <class Protocol_>
uint32_t struct4_serializedSizeZC(Protocol_ const* prot_, const struct4* obj);
template <class Protocol_>
uint32_t struct4_write(Protocol_* prot_, const struct4* obj);
extern template uint32_t struct4_read<>(apache::thrift::BinaryProtocolReader*, struct4*);
extern template uint32_t struct4_write<>(apache::thrift::BinaryProtocolWriter*, const struct4*);
extern template uint32_t struct4_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const struct4*);
extern template uint32_t struct4_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const struct4*);
extern template uint32_t struct4_read<>(apache::thrift::CompactProtocolReader*, struct4*);
extern template uint32_t struct4_write<>(apache::thrift::CompactProtocolWriter*, const struct4*);
extern template uint32_t struct4_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const struct4*);
extern template uint32_t struct4_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const struct4*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::struct4>::clear( ::test_cpp2::cpp_reflection::struct4* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::struct4>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct4>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::struct4 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct4_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct4>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::struct4* obj) {
  return  ::test_cpp2::cpp_reflection::struct4_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct4>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct4 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct4_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct4>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct4 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct4_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::struct5 struct5;
template <class Protocol_>
uint32_t struct5_read(Protocol_* iprot, struct5* obj);
template <class Protocol_>
uint32_t struct5_serializedSize(Protocol_ const* prot_, const struct5* obj);
template <class Protocol_>
uint32_t struct5_serializedSizeZC(Protocol_ const* prot_, const struct5* obj);
template <class Protocol_>
uint32_t struct5_write(Protocol_* prot_, const struct5* obj);
extern template uint32_t struct5_read<>(apache::thrift::BinaryProtocolReader*, struct5*);
extern template uint32_t struct5_write<>(apache::thrift::BinaryProtocolWriter*, const struct5*);
extern template uint32_t struct5_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const struct5*);
extern template uint32_t struct5_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const struct5*);
extern template uint32_t struct5_read<>(apache::thrift::CompactProtocolReader*, struct5*);
extern template uint32_t struct5_write<>(apache::thrift::CompactProtocolWriter*, const struct5*);
extern template uint32_t struct5_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const struct5*);
extern template uint32_t struct5_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const struct5*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::struct5>::clear( ::test_cpp2::cpp_reflection::struct5* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::struct5>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct5>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::struct5 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct5_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct5>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::struct5* obj) {
  return  ::test_cpp2::cpp_reflection::struct5_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct5>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct5 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct5_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct5>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct5 const* obj) {
  return  ::test_cpp2::cpp_reflection::struct5_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::struct_binary struct_binary;
template <class Protocol_>
uint32_t struct_binary_read(Protocol_* iprot, struct_binary* obj);
template <class Protocol_>
uint32_t struct_binary_serializedSize(Protocol_ const* prot_, const struct_binary* obj);
template <class Protocol_>
uint32_t struct_binary_serializedSizeZC(Protocol_ const* prot_, const struct_binary* obj);
template <class Protocol_>
uint32_t struct_binary_write(Protocol_* prot_, const struct_binary* obj);
extern template uint32_t struct_binary_read<>(apache::thrift::BinaryProtocolReader*, struct_binary*);
extern template uint32_t struct_binary_write<>(apache::thrift::BinaryProtocolWriter*, const struct_binary*);
extern template uint32_t struct_binary_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const struct_binary*);
extern template uint32_t struct_binary_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const struct_binary*);
extern template uint32_t struct_binary_read<>(apache::thrift::CompactProtocolReader*, struct_binary*);
extern template uint32_t struct_binary_write<>(apache::thrift::CompactProtocolWriter*, const struct_binary*);
extern template uint32_t struct_binary_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const struct_binary*);
extern template uint32_t struct_binary_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const struct_binary*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::struct_binary>::clear( ::test_cpp2::cpp_reflection::struct_binary* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::struct_binary>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct_binary>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::struct_binary const* obj) {
  return  ::test_cpp2::cpp_reflection::struct_binary_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct_binary>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::struct_binary* obj) {
  return  ::test_cpp2::cpp_reflection::struct_binary_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct_binary>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct_binary const* obj) {
  return  ::test_cpp2::cpp_reflection::struct_binary_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct_binary>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct_binary const* obj) {
  return  ::test_cpp2::cpp_reflection::struct_binary_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::annotated annotated;
template <class Protocol_>
uint32_t annotated_read(Protocol_* iprot, annotated* obj);
template <class Protocol_>
uint32_t annotated_serializedSize(Protocol_ const* prot_, const annotated* obj);
template <class Protocol_>
uint32_t annotated_serializedSizeZC(Protocol_ const* prot_, const annotated* obj);
template <class Protocol_>
uint32_t annotated_write(Protocol_* prot_, const annotated* obj);
extern template uint32_t annotated_read<>(apache::thrift::BinaryProtocolReader*, annotated*);
extern template uint32_t annotated_write<>(apache::thrift::BinaryProtocolWriter*, const annotated*);
extern template uint32_t annotated_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const annotated*);
extern template uint32_t annotated_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const annotated*);
extern template uint32_t annotated_read<>(apache::thrift::CompactProtocolReader*, annotated*);
extern template uint32_t annotated_write<>(apache::thrift::CompactProtocolWriter*, const annotated*);
extern template uint32_t annotated_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const annotated*);
extern template uint32_t annotated_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const annotated*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::annotated>::clear( ::test_cpp2::cpp_reflection::annotated* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::annotated>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::annotated>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::annotated const* obj) {
  return  ::test_cpp2::cpp_reflection::annotated_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::annotated>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::annotated* obj) {
  return  ::test_cpp2::cpp_reflection::annotated_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::annotated>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::annotated const* obj) {
  return  ::test_cpp2::cpp_reflection::annotated_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::annotated>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::annotated const* obj) {
  return  ::test_cpp2::cpp_reflection::annotated_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::union_with_special_names union_with_special_names;
template <class Protocol_>
uint32_t union_with_special_names_read(Protocol_* iprot, union_with_special_names* obj);
template <class Protocol_>
uint32_t union_with_special_names_serializedSize(Protocol_ const* prot_, const union_with_special_names* obj);
template <class Protocol_>
uint32_t union_with_special_names_serializedSizeZC(Protocol_ const* prot_, const union_with_special_names* obj);
template <class Protocol_>
uint32_t union_with_special_names_write(Protocol_* prot_, const union_with_special_names* obj);
extern template uint32_t union_with_special_names_read<>(apache::thrift::BinaryProtocolReader*, union_with_special_names*);
extern template uint32_t union_with_special_names_write<>(apache::thrift::BinaryProtocolWriter*, const union_with_special_names*);
extern template uint32_t union_with_special_names_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const union_with_special_names*);
extern template uint32_t union_with_special_names_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const union_with_special_names*);
extern template uint32_t union_with_special_names_read<>(apache::thrift::CompactProtocolReader*, union_with_special_names*);
extern template uint32_t union_with_special_names_write<>(apache::thrift::CompactProtocolWriter*, const union_with_special_names*);
extern template uint32_t union_with_special_names_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const union_with_special_names*);
extern template uint32_t union_with_special_names_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const union_with_special_names*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::union_with_special_names>::clear( ::test_cpp2::cpp_reflection::union_with_special_names* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::union_with_special_names>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union_with_special_names>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::union_with_special_names const* obj) {
  return  ::test_cpp2::cpp_reflection::union_with_special_names_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union_with_special_names>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::union_with_special_names* obj) {
  return  ::test_cpp2::cpp_reflection::union_with_special_names_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union_with_special_names>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::union_with_special_names const* obj) {
  return  ::test_cpp2::cpp_reflection::union_with_special_names_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::union_with_special_names>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::union_with_special_names const* obj) {
  return  ::test_cpp2::cpp_reflection::union_with_special_names_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::struct_with_special_names struct_with_special_names;
template <class Protocol_>
uint32_t struct_with_special_names_read(Protocol_* iprot, struct_with_special_names* obj);
template <class Protocol_>
uint32_t struct_with_special_names_serializedSize(Protocol_ const* prot_, const struct_with_special_names* obj);
template <class Protocol_>
uint32_t struct_with_special_names_serializedSizeZC(Protocol_ const* prot_, const struct_with_special_names* obj);
template <class Protocol_>
uint32_t struct_with_special_names_write(Protocol_* prot_, const struct_with_special_names* obj);
extern template uint32_t struct_with_special_names_read<>(apache::thrift::BinaryProtocolReader*, struct_with_special_names*);
extern template uint32_t struct_with_special_names_write<>(apache::thrift::BinaryProtocolWriter*, const struct_with_special_names*);
extern template uint32_t struct_with_special_names_serializedSize<>(apache::thrift::BinaryProtocolWriter const*, const struct_with_special_names*);
extern template uint32_t struct_with_special_names_serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*, const struct_with_special_names*);
extern template uint32_t struct_with_special_names_read<>(apache::thrift::CompactProtocolReader*, struct_with_special_names*);
extern template uint32_t struct_with_special_names_write<>(apache::thrift::CompactProtocolWriter*, const struct_with_special_names*);
extern template uint32_t struct_with_special_names_serializedSize<>(apache::thrift::CompactProtocolWriter const*, const struct_with_special_names*);
extern template uint32_t struct_with_special_names_serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*, const struct_with_special_names*);

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::test_cpp2::cpp_reflection::struct_with_special_names>::clear( ::test_cpp2::cpp_reflection::struct_with_special_names* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp2::cpp_reflection::struct_with_special_names>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct_with_special_names>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::struct_with_special_names const* obj) {
  return  ::test_cpp2::cpp_reflection::struct_with_special_names_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct_with_special_names>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::struct_with_special_names* obj) {
  return  ::test_cpp2::cpp_reflection::struct_with_special_names_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct_with_special_names>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct_with_special_names const* obj) {
  return  ::test_cpp2::cpp_reflection::struct_with_special_names_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp2::cpp_reflection::struct_with_special_names>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::struct_with_special_names const* obj) {
  return  ::test_cpp2::cpp_reflection::struct_with_special_names_serializedSizeZC(proto, obj);
}

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
