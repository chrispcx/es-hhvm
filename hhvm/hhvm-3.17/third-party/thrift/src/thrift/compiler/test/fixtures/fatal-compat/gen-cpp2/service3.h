/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/ServiceIncludes.h>
#include <thrift/lib/cpp2/async/HeaderChannel.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <thrift/lib/cpp2/async/FutureRequest.h>
#include <folly/futures/Future.h>

#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp/service3.h"

#include "thrift/test/fatal_custom_types.h"

#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp2/module_types.h"

namespace folly {
  class IOBuf;
  class IOBufQueue;
}
namespace apache { namespace thrift {
  class Cpp2RequestContext;
  class BinaryProtocolReader;
  class CompactProtocolReader;
  namespace transport { class THeader; }
}}

namespace test_cpp2 { namespace cpp_reflection {

typedef ::test_cpp1::cpp_reflection::service3_methodA_pargs service3_methodA_pargs;
template <class Protocol_>
uint32_t service3_methodA_pargs_read(Protocol_* iprot, service3_methodA_pargs* obj);
template <class Protocol_>
uint32_t service3_methodA_pargs_serializedSize(Protocol_ const* prot_, const service3_methodA_pargs* obj);
template <class Protocol_>
uint32_t service3_methodA_pargs_serializedSizeZC(Protocol_ const* prot_, const service3_methodA_pargs* obj);
template <class Protocol_>
uint32_t service3_methodA_pargs_write(Protocol_* prot_, const service3_methodA_pargs* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodA_presult service3_methodA_presult;
template <class Protocol_>
uint32_t service3_methodA_presult_read(Protocol_* iprot, service3_methodA_presult* obj);
template <class Protocol_>
uint32_t service3_methodA_presult_serializedSize(Protocol_ const* prot_, const service3_methodA_presult* obj);
template <class Protocol_>
uint32_t service3_methodA_presult_serializedSizeZC(Protocol_ const* prot_, const service3_methodA_presult* obj);
template <class Protocol_>
uint32_t service3_methodA_presult_write(Protocol_* prot_, const service3_methodA_presult* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodB_pargs service3_methodB_pargs;
template <class Protocol_>
uint32_t service3_methodB_pargs_read(Protocol_* iprot, service3_methodB_pargs* obj);
template <class Protocol_>
uint32_t service3_methodB_pargs_serializedSize(Protocol_ const* prot_, const service3_methodB_pargs* obj);
template <class Protocol_>
uint32_t service3_methodB_pargs_serializedSizeZC(Protocol_ const* prot_, const service3_methodB_pargs* obj);
template <class Protocol_>
uint32_t service3_methodB_pargs_write(Protocol_* prot_, const service3_methodB_pargs* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodB_presult service3_methodB_presult;
template <class Protocol_>
uint32_t service3_methodB_presult_read(Protocol_* iprot, service3_methodB_presult* obj);
template <class Protocol_>
uint32_t service3_methodB_presult_serializedSize(Protocol_ const* prot_, const service3_methodB_presult* obj);
template <class Protocol_>
uint32_t service3_methodB_presult_serializedSizeZC(Protocol_ const* prot_, const service3_methodB_presult* obj);
template <class Protocol_>
uint32_t service3_methodB_presult_write(Protocol_* prot_, const service3_methodB_presult* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodC_pargs service3_methodC_pargs;
template <class Protocol_>
uint32_t service3_methodC_pargs_read(Protocol_* iprot, service3_methodC_pargs* obj);
template <class Protocol_>
uint32_t service3_methodC_pargs_serializedSize(Protocol_ const* prot_, const service3_methodC_pargs* obj);
template <class Protocol_>
uint32_t service3_methodC_pargs_serializedSizeZC(Protocol_ const* prot_, const service3_methodC_pargs* obj);
template <class Protocol_>
uint32_t service3_methodC_pargs_write(Protocol_* prot_, const service3_methodC_pargs* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodC_presult service3_methodC_presult;
template <class Protocol_>
uint32_t service3_methodC_presult_read(Protocol_* iprot, service3_methodC_presult* obj);
template <class Protocol_>
uint32_t service3_methodC_presult_serializedSize(Protocol_ const* prot_, const service3_methodC_presult* obj);
template <class Protocol_>
uint32_t service3_methodC_presult_serializedSizeZC(Protocol_ const* prot_, const service3_methodC_presult* obj);
template <class Protocol_>
uint32_t service3_methodC_presult_write(Protocol_* prot_, const service3_methodC_presult* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodD_pargs service3_methodD_pargs;
template <class Protocol_>
uint32_t service3_methodD_pargs_read(Protocol_* iprot, service3_methodD_pargs* obj);
template <class Protocol_>
uint32_t service3_methodD_pargs_serializedSize(Protocol_ const* prot_, const service3_methodD_pargs* obj);
template <class Protocol_>
uint32_t service3_methodD_pargs_serializedSizeZC(Protocol_ const* prot_, const service3_methodD_pargs* obj);
template <class Protocol_>
uint32_t service3_methodD_pargs_write(Protocol_* prot_, const service3_methodD_pargs* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodD_presult service3_methodD_presult;
template <class Protocol_>
uint32_t service3_methodD_presult_read(Protocol_* iprot, service3_methodD_presult* obj);
template <class Protocol_>
uint32_t service3_methodD_presult_serializedSize(Protocol_ const* prot_, const service3_methodD_presult* obj);
template <class Protocol_>
uint32_t service3_methodD_presult_serializedSizeZC(Protocol_ const* prot_, const service3_methodD_presult* obj);
template <class Protocol_>
uint32_t service3_methodD_presult_write(Protocol_* prot_, const service3_methodD_presult* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodE_pargs service3_methodE_pargs;
template <class Protocol_>
uint32_t service3_methodE_pargs_read(Protocol_* iprot, service3_methodE_pargs* obj);
template <class Protocol_>
uint32_t service3_methodE_pargs_serializedSize(Protocol_ const* prot_, const service3_methodE_pargs* obj);
template <class Protocol_>
uint32_t service3_methodE_pargs_serializedSizeZC(Protocol_ const* prot_, const service3_methodE_pargs* obj);
template <class Protocol_>
uint32_t service3_methodE_pargs_write(Protocol_* prot_, const service3_methodE_pargs* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodE_presult service3_methodE_presult;
template <class Protocol_>
uint32_t service3_methodE_presult_read(Protocol_* iprot, service3_methodE_presult* obj);
template <class Protocol_>
uint32_t service3_methodE_presult_serializedSize(Protocol_ const* prot_, const service3_methodE_presult* obj);
template <class Protocol_>
uint32_t service3_methodE_presult_serializedSizeZC(Protocol_ const* prot_, const service3_methodE_presult* obj);
template <class Protocol_>
uint32_t service3_methodE_presult_write(Protocol_* prot_, const service3_methodE_presult* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodF_pargs service3_methodF_pargs;
template <class Protocol_>
uint32_t service3_methodF_pargs_read(Protocol_* iprot, service3_methodF_pargs* obj);
template <class Protocol_>
uint32_t service3_methodF_pargs_serializedSize(Protocol_ const* prot_, const service3_methodF_pargs* obj);
template <class Protocol_>
uint32_t service3_methodF_pargs_serializedSizeZC(Protocol_ const* prot_, const service3_methodF_pargs* obj);
template <class Protocol_>
uint32_t service3_methodF_pargs_write(Protocol_* prot_, const service3_methodF_pargs* obj);
typedef ::test_cpp1::cpp_reflection::service3_methodF_presult service3_methodF_presult;
template <class Protocol_>
uint32_t service3_methodF_presult_read(Protocol_* iprot, service3_methodF_presult* obj);
template <class Protocol_>
uint32_t service3_methodF_presult_serializedSize(Protocol_ const* prot_, const service3_methodF_presult* obj);
template <class Protocol_>
uint32_t service3_methodF_presult_serializedSizeZC(Protocol_ const* prot_, const service3_methodF_presult* obj);
template <class Protocol_>
uint32_t service3_methodF_presult_write(Protocol_* prot_, const service3_methodF_presult* obj);

class service3SvAsyncIf {
 public:
  virtual ~service3SvAsyncIf() {}
  virtual void async_tm_methodA(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) = 0;
  virtual void async_methodA(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) = delete;
  virtual folly::Future<folly::Unit> future_methodA() = 0;
  virtual void async_tm_methodB(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, int32_t x, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> y, double z) = 0;
  virtual void async_methodB(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, int32_t x, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> y, double z) = delete;
  virtual folly::Future<folly::Unit> future_methodB(int32_t x, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> y, double z) = 0;
  virtual void async_tm_methodC(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback) = 0;
  virtual void async_methodC(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback) = delete;
  virtual folly::Future<int32_t> future_methodC() = 0;
  virtual void async_tm_methodD(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback, int32_t i, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> j, double k) = 0;
  virtual void async_methodD(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback, int32_t i, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> j, double k) = delete;
  virtual folly::Future<int32_t> future_methodD(int32_t i, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> j, double k) = 0;
  virtual void async_tm_methodE(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::test_cpp2::cpp_reflection::struct2>>> callback) = 0;
  virtual void async_methodE(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::test_cpp2::cpp_reflection::struct2>>> callback) = delete;
  virtual folly::Future<std::unique_ptr< ::test_cpp2::cpp_reflection::struct2>> future_methodE() = 0;
  virtual void async_tm_methodF(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::test_cpp2::cpp_reflection::struct3>>> callback, int32_t l, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> m, double n) = 0;
  virtual void async_methodF(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::test_cpp2::cpp_reflection::struct3>>> callback, int32_t l, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> m, double n) = delete;
  virtual folly::Future<std::unique_ptr< ::test_cpp2::cpp_reflection::struct3>> future_methodF(int32_t l, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> m, double n) = 0;
};

class service3AsyncProcessor;

class service3SvIf : public service3SvAsyncIf, public apache::thrift::ServerInterface {
 public:
  typedef service3AsyncProcessor ProcessorType;
  std::unique_ptr<apache::thrift::AsyncProcessor> getProcessor() override;
  virtual void methodA();
  folly::Future<folly::Unit> future_methodA() override;
  void async_tm_methodA(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback) override;
  virtual void methodB(int32_t /*x*/, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> /*y*/, double /*z*/);
  folly::Future<folly::Unit> future_methodB(int32_t x, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> y, double z) override;
  void async_tm_methodB(std::unique_ptr<apache::thrift::HandlerCallback<void>> callback, int32_t x, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> y, double z) override;
  virtual int32_t methodC();
  folly::Future<int32_t> future_methodC() override;
  void async_tm_methodC(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback) override;
  virtual int32_t methodD(int32_t /*i*/, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> /*j*/, double /*k*/);
  folly::Future<int32_t> future_methodD(int32_t i, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> j, double k) override;
  void async_tm_methodD(std::unique_ptr<apache::thrift::HandlerCallback<int32_t>> callback, int32_t i, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> j, double k) override;
  virtual void methodE( ::test_cpp2::cpp_reflection::struct2& /*_return*/);
  folly::Future<std::unique_ptr< ::test_cpp2::cpp_reflection::struct2>> future_methodE() override;
  void async_tm_methodE(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::test_cpp2::cpp_reflection::struct2>>> callback) override;
  virtual void methodF( ::test_cpp2::cpp_reflection::struct3& /*_return*/, int32_t /*l*/, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> /*m*/, double /*n*/);
  folly::Future<std::unique_ptr< ::test_cpp2::cpp_reflection::struct3>> future_methodF(int32_t l, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> m, double n) override;
  void async_tm_methodF(std::unique_ptr<apache::thrift::HandlerCallback<std::unique_ptr< ::test_cpp2::cpp_reflection::struct3>>> callback, int32_t l, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> m, double n) override;
};

class service3SvNull : public service3SvIf {
 public:
  void methodA() override;
  void methodB(int32_t /*x*/, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> /*y*/, double /*z*/) override;
  int32_t methodC() override;
  int32_t methodD(int32_t /*i*/, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> /*j*/, double /*k*/) override;
  void methodE( ::test_cpp2::cpp_reflection::struct2& /*_return*/) override;
  void methodF( ::test_cpp2::cpp_reflection::struct3& /*_return*/, int32_t /*l*/, std::unique_ptr< ::test_cpp2::cpp_reflection::struct1> /*m*/, double /*n*/) override;
};

class service3AsyncProcessor : public ::apache::thrift::GeneratedAsyncProcessor {
 public:
  const char* getServiceName() override;
  using BaseAsyncProcessor = void;
 protected:
  service3SvIf* iface_;
  folly::Optional<std::string> getCacheKey(folly::IOBuf* buf, apache::thrift::protocol::PROTOCOL_TYPES protType) override;
 public:
  void process(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, apache::thrift::protocol::PROTOCOL_TYPES protType, apache::thrift::Cpp2RequestContext* context, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm) override;
 protected:
  bool isOnewayMethod(const folly::IOBuf* buf, const apache::thrift::transport::THeader* header) override;
 private:
  static std::unordered_set<std::string> onewayMethods_;
  static std::unordered_map<std::string, int16_t> cacheKeyMap_;
 public:
  using BinaryProtocolProcessFunc = ProcessFunc<service3AsyncProcessor, apache::thrift::BinaryProtocolReader>;
  using BinaryProtocolProcessMap = ProcessMap<BinaryProtocolProcessFunc>;
  static const service3AsyncProcessor::BinaryProtocolProcessMap& getBinaryProtocolProcessMap();
 private:
  static const service3AsyncProcessor::BinaryProtocolProcessMap binaryProcessMap_;
 public:
  using CompactProtocolProcessFunc = ProcessFunc<service3AsyncProcessor, apache::thrift::CompactProtocolReader>;
  using CompactProtocolProcessMap = ProcessMap<CompactProtocolProcessFunc>;
  static const service3AsyncProcessor::CompactProtocolProcessMap& getCompactProtocolProcessMap();
 private:
  static const service3AsyncProcessor::CompactProtocolProcessMap compactProcessMap_;
 private:
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_methodA(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_methodA(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_methodA(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_methodA(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_methodA(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_methodB(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_methodB(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_methodB(int32_t protoSeqId, apache::thrift::ContextStack* ctx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_methodB(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_methodB(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_methodC(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_methodC(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_methodC(int32_t protoSeqId, apache::thrift::ContextStack* ctx, int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_methodC(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_methodC(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_methodD(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_methodD(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_methodD(int32_t protoSeqId, apache::thrift::ContextStack* ctx, int32_t const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_methodD(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_methodD(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_methodE(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_methodE(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_methodE(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::test_cpp2::cpp_reflection::struct2 const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_methodE(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_methodE(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void _processInThread_methodF(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot, apache::thrift::Cpp2RequestContext* ctx, folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <typename ProtocolIn_, typename ProtocolOut_>
  void process_methodF(std::unique_ptr<apache::thrift::ResponseChannel::Request> req, std::unique_ptr<folly::IOBuf> buf, std::unique_ptr<ProtocolIn_> iprot,apache::thrift::Cpp2RequestContext* ctx,folly::EventBase* eb, apache::thrift::concurrency::ThreadManager* tm);
  template <class ProtocolIn_, class ProtocolOut_>
  static folly::IOBufQueue return_methodF(int32_t protoSeqId, apache::thrift::ContextStack* ctx,  ::test_cpp2::cpp_reflection::struct3 const& _return);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_methodF(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,std::exception_ptr ep,apache::thrift::Cpp2RequestContext* reqCtx);
  template <class ProtocolIn_, class ProtocolOut_>
  static void throw_wrapped_methodF(std::unique_ptr<apache::thrift::ResponseChannel::Request> req,int32_t protoSeqId,apache::thrift::ContextStack* ctx,folly::exception_wrapper ew,apache::thrift::Cpp2RequestContext* reqCtx);
 public:
  service3AsyncProcessor(service3SvIf* iface) :
      iface_(iface) {}

  virtual ~service3AsyncProcessor() {}
};

class service3AsyncClient : public apache::thrift::TClientBase {
 public:
  virtual const char* getServiceName();
  typedef std::unique_ptr<apache::thrift::RequestChannel, folly::DelayedDestruction::Destructor> channel_ptr;

  virtual ~service3AsyncClient() {}

  service3AsyncClient(std::shared_ptr<apache::thrift::RequestChannel> channel) :
      channel_(channel) {
    connectionContext_.reset(new apache::thrift::Cpp2ConnContext);
  }

  apache::thrift::RequestChannel*  getChannel() {
    return this->channel_.get();
  }

  apache::thrift::HeaderChannel*  getHeaderChannel() {
    return dynamic_cast<apache::thrift::HeaderChannel*>(this->channel_.get());
  }
  virtual void methodA(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void methodA(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_methodA();
  virtual void sync_methodA(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::Future<folly::Unit> future_methodA();
  virtual folly::Future<folly::Unit> future_methodA(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_methodA(apache::thrift::RpcOptions& rpcOptions);
  virtual void methodA(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  static folly::exception_wrapper recv_wrapped_methodA(::apache::thrift::ClientReceiveState& state);
  static void recv_methodA(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_methodA(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_methodA(::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void methodAT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_methodAT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_methodAT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void methodB(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  virtual void methodB(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  virtual void sync_methodB(int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  virtual void sync_methodB(apache::thrift::RpcOptions& rpcOptions, int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  virtual folly::Future<folly::Unit> future_methodB(int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  virtual folly::Future<folly::Unit> future_methodB(apache::thrift::RpcOptions& rpcOptions, int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  virtual folly::Future<std::pair<folly::Unit, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_methodB(apache::thrift::RpcOptions& rpcOptions, int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  virtual void methodB(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  static folly::exception_wrapper recv_wrapped_methodB(::apache::thrift::ClientReceiveState& state);
  static void recv_methodB(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_methodB(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_methodB(::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void methodBT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t x, const  ::test_cpp2::cpp_reflection::struct1& y, double z);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_methodBT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_methodBT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void methodC(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void methodC(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual int32_t sync_methodC();
  virtual int32_t sync_methodC(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::Future<int32_t> future_methodC();
  virtual folly::Future<int32_t> future_methodC(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::Future<std::pair<int32_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_methodC(apache::thrift::RpcOptions& rpcOptions);
  virtual void methodC(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  static folly::exception_wrapper recv_wrapped_methodC(int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  static int32_t recv_methodC(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual int32_t recv_instance_methodC(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_methodC(int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void methodCT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_methodCT(Protocol_* prot, int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static int32_t recv_methodCT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void methodD(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  virtual void methodD(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  virtual int32_t sync_methodD(int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  virtual int32_t sync_methodD(apache::thrift::RpcOptions& rpcOptions, int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  virtual folly::Future<int32_t> future_methodD(int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  virtual folly::Future<int32_t> future_methodD(apache::thrift::RpcOptions& rpcOptions, int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  virtual folly::Future<std::pair<int32_t, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_methodD(apache::thrift::RpcOptions& rpcOptions, int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  virtual void methodD(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  static folly::exception_wrapper recv_wrapped_methodD(int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  static int32_t recv_methodD(::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual int32_t recv_instance_methodD(::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_methodD(int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void methodDT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t i, const  ::test_cpp2::cpp_reflection::struct1& j, double k);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_methodDT(Protocol_* prot, int32_t& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static int32_t recv_methodDT(Protocol_* prot, ::apache::thrift::ClientReceiveState& state);
  virtual void methodE(std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void methodE(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  virtual void sync_methodE( ::test_cpp2::cpp_reflection::struct2& _return);
  virtual void sync_methodE(apache::thrift::RpcOptions& rpcOptions,  ::test_cpp2::cpp_reflection::struct2& _return);
  virtual folly::Future< ::test_cpp2::cpp_reflection::struct2> future_methodE();
  virtual folly::Future< ::test_cpp2::cpp_reflection::struct2> future_methodE(apache::thrift::RpcOptions& rpcOptions);
  virtual folly::Future<std::pair< ::test_cpp2::cpp_reflection::struct2, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_methodE(apache::thrift::RpcOptions& rpcOptions);
  virtual void methodE(std::function<void (::apache::thrift::ClientReceiveState&&)> callback);
  static folly::exception_wrapper recv_wrapped_methodE( ::test_cpp2::cpp_reflection::struct2& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_methodE( ::test_cpp2::cpp_reflection::struct2& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_methodE( ::test_cpp2::cpp_reflection::struct2& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_methodE( ::test_cpp2::cpp_reflection::struct2& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void methodET(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_methodET(Protocol_* prot,  ::test_cpp2::cpp_reflection::struct2& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_methodET(Protocol_* prot,  ::test_cpp2::cpp_reflection::struct2& _return, ::apache::thrift::ClientReceiveState& state);
  virtual void methodF(std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  virtual void methodF(apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  virtual void sync_methodF( ::test_cpp2::cpp_reflection::struct3& _return, int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  virtual void sync_methodF(apache::thrift::RpcOptions& rpcOptions,  ::test_cpp2::cpp_reflection::struct3& _return, int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  virtual folly::Future< ::test_cpp2::cpp_reflection::struct3> future_methodF(int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  virtual folly::Future< ::test_cpp2::cpp_reflection::struct3> future_methodF(apache::thrift::RpcOptions& rpcOptions, int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  virtual folly::Future<std::pair< ::test_cpp2::cpp_reflection::struct3, std::unique_ptr<apache::thrift::transport::THeader>>> header_future_methodF(apache::thrift::RpcOptions& rpcOptions, int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  virtual void methodF(std::function<void (::apache::thrift::ClientReceiveState&&)> callback, int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  static folly::exception_wrapper recv_wrapped_methodF( ::test_cpp2::cpp_reflection::struct3& _return, ::apache::thrift::ClientReceiveState& state);
  static void recv_methodF( ::test_cpp2::cpp_reflection::struct3& _return, ::apache::thrift::ClientReceiveState& state);
  // Mock friendly virtual instance method
  virtual void recv_instance_methodF( ::test_cpp2::cpp_reflection::struct3& _return, ::apache::thrift::ClientReceiveState& state);
  virtual folly::exception_wrapper recv_instance_wrapped_methodF( ::test_cpp2::cpp_reflection::struct3& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  void methodFT(Protocol_* prot, apache::thrift::RpcOptions& rpcOptions, std::unique_ptr<apache::thrift::RequestCallback> callback, int32_t l, const  ::test_cpp2::cpp_reflection::struct1& m, double n);
  template <typename Protocol_>
  static folly::exception_wrapper recv_wrapped_methodFT(Protocol_* prot,  ::test_cpp2::cpp_reflection::struct3& _return, ::apache::thrift::ClientReceiveState& state);
  template <typename Protocol_>
  static void recv_methodFT(Protocol_* prot,  ::test_cpp2::cpp_reflection::struct3& _return, ::apache::thrift::ClientReceiveState& state);
 protected:
  std::unique_ptr<apache::thrift::Cpp2ConnContext> connectionContext_;
  std::shared_ptr<apache::thrift::RequestChannel> channel_;
};

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_pargs>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_pargs>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodA_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodA_pargs_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_pargs>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodA_pargs* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodA_pargs_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_pargs>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodA_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodA_pargs_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_pargs>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodA_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodA_pargs_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_presult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_presult>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodA_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodA_presult_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_presult>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodA_presult* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodA_presult_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_presult>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodA_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodA_presult_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodA_presult>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodA_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodA_presult_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_pargs>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_pargs>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodB_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodB_pargs_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_pargs>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodB_pargs* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodB_pargs_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_pargs>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodB_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodB_pargs_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_pargs>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodB_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodB_pargs_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_presult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_presult>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodB_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodB_presult_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_presult>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodB_presult* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodB_presult_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_presult>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodB_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodB_presult_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodB_presult>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodB_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodB_presult_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_pargs>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_pargs>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodC_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodC_pargs_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_pargs>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodC_pargs* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodC_pargs_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_pargs>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodC_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodC_pargs_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_pargs>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodC_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodC_pargs_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_presult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_presult>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodC_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodC_presult_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_presult>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodC_presult* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodC_presult_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_presult>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodC_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodC_presult_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodC_presult>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodC_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodC_presult_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_pargs>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_pargs>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodD_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodD_pargs_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_pargs>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodD_pargs* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodD_pargs_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_pargs>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodD_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodD_pargs_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_pargs>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodD_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodD_pargs_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_presult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_presult>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodD_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodD_presult_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_presult>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodD_presult* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodD_presult_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_presult>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodD_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodD_presult_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodD_presult>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodD_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodD_presult_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_pargs>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_pargs>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodE_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodE_pargs_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_pargs>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodE_pargs* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodE_pargs_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_pargs>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodE_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodE_pargs_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_pargs>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodE_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodE_pargs_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_presult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_presult>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodE_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodE_presult_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_presult>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodE_presult* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodE_presult_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_presult>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodE_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodE_presult_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodE_presult>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodE_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodE_presult_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_pargs>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_pargs>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodF_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodF_pargs_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_pargs>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodF_pargs* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodF_pargs_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_pargs>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodF_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodF_pargs_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_pargs>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodF_pargs const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodF_pargs_serializedSizeZC(proto, obj);
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_presult>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_presult>::write(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodF_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodF_presult_write(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_presult>::read(Protocol* proto,  ::test_cpp2::cpp_reflection::service3_methodF_presult* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodF_presult_read(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_presult>::serializedSize(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodF_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodF_presult_serializedSize(proto, obj);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::test_cpp1::cpp_reflection::service3_methodF_presult>::serializedSizeZC(Protocol const* proto,  ::test_cpp2::cpp_reflection::service3_methodF_presult const* obj) {
  return  ::test_cpp2::cpp_reflection::service3_methodF_presult_serializedSizeZC(proto, obj);
}

}} // apache::thrift
