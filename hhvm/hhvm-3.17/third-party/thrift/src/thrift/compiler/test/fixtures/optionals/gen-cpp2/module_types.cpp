/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/optionals/gen-cpp2/module_types.h"

#include "thrift/compiler/test/fixtures/optionals/gen-cpp2/module_types.tcc"


#include <algorithm>

namespace cpp2 {

const typename apache::thrift::detail::TEnumMapFactory<Animal, Animal>::ValuesToNamesMapType _Animal_VALUES_TO_NAMES = apache::thrift::detail::TEnumMapFactory<Animal, Animal>::makeValuesToNamesMap();
const typename apache::thrift::detail::TEnumMapFactory<Animal, Animal>::NamesToValuesMapType _Animal_NAMES_TO_VALUES = apache::thrift::detail::TEnumMapFactory<Animal, Animal>::makeNamesToValuesMap();

} // cpp2
namespace std {

} // std
namespace apache { namespace thrift {

template <> folly::Range<const std::pair< ::cpp2::Animal, folly::StringPiece>*> TEnumTraitsBase< ::cpp2::Animal>::enumerators() {
  static constexpr const std::pair< ::cpp2::Animal, folly::StringPiece> storage[3] = {
    { ::cpp2::Animal::DOG, "DOG"},
    { ::cpp2::Animal::CAT, "CAT"},
    { ::cpp2::Animal::TARANTULA, "TARANTULA"},
  };
  return folly::range(storage);
}

template <> const char* TEnumTraitsBase< ::cpp2::Animal>::findName( ::cpp2::Animal value) {
  return findName( ::cpp2::_Animal_VALUES_TO_NAMES, value);
}

template <> bool TEnumTraitsBase< ::cpp2::Animal>::findValue(const char* name,  ::cpp2::Animal* outValue) {
  return findValue( ::cpp2::_Animal_NAMES_TO_VALUES, name, outValue);
}

}} // apache::thrift
namespace cpp2 {

void Color::__clear() {
  red = 0;
  green = 0;
  blue = 0;
  alpha = 0;
}

bool Color::operator==(const Color& rhs) const {
  if (!((red == rhs.red))) {
    return false;
  }
  if (!((green == rhs.green))) {
    return false;
  }
  if (!((blue == rhs.blue))) {
    return false;
  }
  if (!((alpha == rhs.alpha))) {
    return false;
  }
  return true;
}

void swap(Color& a, Color& b) {
  using ::std::swap;
  swap(a.red, b.red);
  swap(a.green, b.green);
  swap(a.blue, b.blue);
  swap(a.alpha, b.alpha);
}

template uint32_t Color::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Color::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Color::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Color::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Color::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Color::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Color::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Color::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Vehicle::__clear() {
  ::apache::thrift::Cpp2Ops<  ::cpp2::Color>::clear(&color);
  licensePlate.clear();
  description.clear();
  name.clear();
}

bool Vehicle::operator==(const Vehicle& rhs) const {
  if (!((color == rhs.color))) {
    return false;
  }
  if (!((licensePlate == rhs.licensePlate))) {
    return false;
  }
  if (!((description == rhs.description))) {
    return false;
  }
  if (!((name == rhs.name))) {
    return false;
  }
  return true;
}

void swap(Vehicle& a, Vehicle& b) {
  using ::std::swap;
  swap(a.color, b.color);
  swap(a.licensePlate, b.licensePlate);
  swap(a.description, b.description);
  swap(a.name, b.name);
}

template uint32_t Vehicle::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Vehicle::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Vehicle::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Vehicle::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Vehicle::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Vehicle::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Vehicle::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Vehicle::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

void Person::__clear() {
  id = 0;
  name = std::string();
  age.clear();
  address.clear();
  favoriteColor.clear();
  friends.clear();
  bestFriend.clear();
  petNames.clear();
  afraidOfAnimal.clear();
  vehicles.clear();
}

bool Person::operator==(const Person& rhs) const {
  if (!((id == rhs.id))) {
    return false;
  }
  if (!((name == rhs.name))) {
    return false;
  }
  if (!((age == rhs.age))) {
    return false;
  }
  if (!((address == rhs.address))) {
    return false;
  }
  if (!((favoriteColor == rhs.favoriteColor))) {
    return false;
  }
  if (!((friends == rhs.friends))) {
    return false;
  }
  if (!((bestFriend == rhs.bestFriend))) {
    return false;
  }
  if (!((petNames == rhs.petNames))) {
    return false;
  }
  if (!((afraidOfAnimal == rhs.afraidOfAnimal))) {
    return false;
  }
  if (!((vehicles == rhs.vehicles))) {
    return false;
  }
  return true;
}

void swap(Person& a, Person& b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.age, b.age);
  swap(a.address, b.address);
  swap(a.favoriteColor, b.favoriteColor);
  swap(a.friends, b.friends);
  swap(a.bestFriend, b.bestFriend);
  swap(a.petNames, b.petNames);
  swap(a.afraidOfAnimal, b.afraidOfAnimal);
  swap(a.vehicles, b.vehicles);
}

template uint32_t Person::read<>(apache::thrift::BinaryProtocolReader*);
template uint32_t Person::write<>(apache::thrift::BinaryProtocolWriter*) const;
template uint32_t Person::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Person::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
template uint32_t Person::read<>(apache::thrift::CompactProtocolReader*);
template uint32_t Person::write<>(apache::thrift::CompactProtocolWriter*) const;
template uint32_t Person::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
template uint32_t Person::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
