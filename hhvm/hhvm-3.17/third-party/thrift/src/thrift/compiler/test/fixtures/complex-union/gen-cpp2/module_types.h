/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include <thrift/lib/cpp2/Thrift.h>
#include <thrift/lib/cpp2/protocol/Protocol.h>
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/Cursor.h>

#include <thrift/lib/cpp2/GeneratedHeaderHelper.h>



namespace cpp2 {

class ComplexUnion;

class ComplexUnion : private apache::thrift::detail::st::ComparisonOperators<ComplexUnion> {
 public:
  enum Type {
    __EMPTY__ = 0,
    intValue = 1,
    stringValue = 2,
    intListValue = 3,
    stringListValue = 4,
    stringRef = 5,
  } ;

  ComplexUnion() :
      type_(Type::__EMPTY__) {}

  ComplexUnion(ComplexUnion&& rhs) :
      type_(Type::__EMPTY__) {
    if (this == &rhs) {return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(std::move(rhs.value_.stringValue));
        break;
      }
      case Type::intListValue:
      {
        set_intListValue(std::move(rhs.value_.intListValue));
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(std::move(rhs.value_.stringListValue));
        break;
      }
      case Type::stringRef:
      {
        set_stringRef(std::move(*rhs.value_.stringRef));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
  }

  ComplexUnion(const ComplexUnion& rhs) :
      type_(Type::__EMPTY__) {
    if (this == &rhs) {return; }
    if (rhs.type_ == Type::__EMPTY__) { return; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(rhs.value_.stringValue);
        break;
      }
      case Type::intListValue:
      {
        set_intListValue(rhs.value_.intListValue);
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(rhs.value_.stringListValue);
        break;
      }
      case Type::stringRef:
      {
        set_stringRef(*rhs.value_.stringRef);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
  }

  ComplexUnion& operator=(ComplexUnion&& rhs) {
    if (this == &rhs) {return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(std::move(rhs.value_.intValue));
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(std::move(rhs.value_.stringValue));
        break;
      }
      case Type::intListValue:
      {
        set_intListValue(std::move(rhs.value_.intListValue));
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(std::move(rhs.value_.stringListValue));
        break;
      }
      case Type::stringRef:
      {
        set_stringRef(std::move(*rhs.value_.stringRef));
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    rhs.__clear();
    return *this;
  }

  ComplexUnion& operator=(const ComplexUnion& rhs) {
    if (this == &rhs) {return *this; }
    __clear();
    if (rhs.type_ == Type::__EMPTY__) { return *this; }
    switch(rhs.type_) {
      case Type::intValue:
      {
        set_intValue(rhs.value_.intValue);
        break;
      }
      case Type::stringValue:
      {
        set_stringValue(rhs.value_.stringValue);
        break;
      }
      case Type::intListValue:
      {
        set_intListValue(rhs.value_.intListValue);
        break;
      }
      case Type::stringListValue:
      {
        set_stringListValue(rhs.value_.stringListValue);
        break;
      }
      case Type::stringRef:
      {
        set_stringRef(*rhs.value_.stringRef);
        break;
      }
      default:
      {
        assert(false);
        break;
      }
    }
    return *this;
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<1, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_intValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<2, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_stringValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<3, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_intListValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<4, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_stringListValue(arg.move());
  }
  template <typename T__ThriftWrappedArgument__Ctor>
  ComplexUnion(::apache::thrift::detail::argument_wrapper<5, T__ThriftWrappedArgument__Ctor> arg):
    type_(Type::__EMPTY__)
  {
    set_stringRef(arg.move());
  }
  void __clear();

  virtual ~ComplexUnion() throw() {
    __clear();
  }

  union storage_type {
    int64_t intValue;
    std::string stringValue;
    std::vector<int64_t> intListValue;
    std::vector<std::string> stringListValue;
    std::unique_ptr<std::string> stringRef;

    storage_type() {}
    ~storage_type() {}
  } ;
  bool operator==(const ComplexUnion& rhs) const;

  bool operator < (const ComplexUnion& rhs) const {
    if (type_ != rhs.type_) { return type_ < rhs.type_; }
    switch(type_) {
      case Type::intValue:
      {
        return value_.intValue < rhs.value_.intValue;
        break;
      }
      case Type::stringValue:
      {
        return value_.stringValue < rhs.value_.stringValue;
        break;
      }
      case Type::intListValue:
      {
        return value_.intListValue < rhs.value_.intListValue;
        break;
      }
      case Type::stringListValue:
      {
        return value_.stringListValue < rhs.value_.stringListValue;
        break;
      }
      case Type::stringRef:
      {
        return *value_.stringRef < *rhs.value_.stringRef;
        break;
      }
      default:
      {
        return false;
        break;
      }
    }
  }

  int64_t& set_intValue(int64_t t = int64_t()) {
    __clear();
    type_ = Type::intValue;
    ::new (std::addressof(value_.intValue)) int64_t(t);
    return value_.intValue;
  }

  std::string& set_stringValue(std::string const &t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(t);
    return value_.stringValue;
  }

  std::string& set_stringValue(std::string&& t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(std::move(t));
    return value_.stringValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::string& set_stringValue(T&&... t) {
    __clear();
    type_ = Type::stringValue;
    ::new (std::addressof(value_.stringValue)) std::string(std::forward<T>(t)...);
    return value_.stringValue;
  }

  std::vector<int64_t>& set_intListValue(std::vector<int64_t> const &t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) std::vector<int64_t>(t);
    return value_.intListValue;
  }

  std::vector<int64_t>& set_intListValue(std::vector<int64_t>&& t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) std::vector<int64_t>(std::move(t));
    return value_.intListValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::vector<int64_t>, T...>> std::vector<int64_t>& set_intListValue(T&&... t) {
    __clear();
    type_ = Type::intListValue;
    ::new (std::addressof(value_.intListValue)) std::vector<int64_t>(std::forward<T>(t)...);
    return value_.intListValue;
  }

  std::vector<std::string>& set_stringListValue(std::vector<std::string> const &t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) std::vector<std::string>(t);
    return value_.stringListValue;
  }

  std::vector<std::string>& set_stringListValue(std::vector<std::string>&& t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) std::vector<std::string>(std::move(t));
    return value_.stringListValue;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::vector<std::string>, T...>> std::vector<std::string>& set_stringListValue(T&&... t) {
    __clear();
    type_ = Type::stringListValue;
    ::new (std::addressof(value_.stringListValue)) std::vector<std::string>(std::forward<T>(t)...);
    return value_.stringListValue;
  }

  std::unique_ptr<std::string>& set_stringRef(std::string const &t) {
    __clear();
    type_ = Type::stringRef;
    ::new (std::addressof(value_.stringRef)) std::unique_ptr<std::string>(new std::unique_ptr<std::string>::element_type(t));
    return value_.stringRef;
  }

  std::unique_ptr<std::string>& set_stringRef(std::string&& t) {
    __clear();
    type_ = Type::stringRef;
    ::new (std::addressof(value_.stringRef)) std::unique_ptr<std::string>(new std::unique_ptr<std::string>::element_type(std::move(t)));
    return value_.stringRef;
  }

  template<typename... T, typename = ::apache::thrift::safe_overload_t<std::string, T...>> std::unique_ptr<std::string>& set_stringRef(T&&... t) {
    __clear();
    type_ = Type::stringRef;
    ::new (std::addressof(value_.stringRef)) std::unique_ptr<std::string>(new std::unique_ptr<std::string>::element_type(std::forward<T>(t)...));
    return value_.stringRef;
  }

  int64_t const & get_intValue() const {
    assert(type_ == Type::intValue);
    return value_.intValue;
  }

  std::string const & get_stringValue() const {
    assert(type_ == Type::stringValue);
    return value_.stringValue;
  }

  std::vector<int64_t> const & get_intListValue() const {
    assert(type_ == Type::intListValue);
    return value_.intListValue;
  }

  std::vector<std::string> const & get_stringListValue() const {
    assert(type_ == Type::stringListValue);
    return value_.stringListValue;
  }

  std::unique_ptr<std::string> const & get_stringRef() const {
    assert(type_ == Type::stringRef);
    return value_.stringRef;
  }

  int64_t & mutable_intValue() {
    assert(type_ == Type::intValue);
    return value_.intValue;
  }

  std::string & mutable_stringValue() {
    assert(type_ == Type::stringValue);
    return value_.stringValue;
  }

  std::vector<int64_t> & mutable_intListValue() {
    assert(type_ == Type::intListValue);
    return value_.intListValue;
  }

  std::vector<std::string> & mutable_stringListValue() {
    assert(type_ == Type::stringListValue);
    return value_.stringListValue;
  }

  std::unique_ptr<std::string> & mutable_stringRef() {
    assert(type_ == Type::stringRef);
    return value_.stringRef;
  }

  int64_t move_intValue() {
    assert(type_ == Type::intValue);
    return std::move(value_.intValue);
  }

  std::string move_stringValue() {
    assert(type_ == Type::stringValue);
    return std::move(value_.stringValue);
  }

  std::vector<int64_t> move_intListValue() {
    assert(type_ == Type::intListValue);
    return std::move(value_.intListValue);
  }

  std::vector<std::string> move_stringListValue() {
    assert(type_ == Type::stringListValue);
    return std::move(value_.stringListValue);
  }

  std::unique_ptr<std::string> move_stringRef() {
    assert(type_ == Type::stringRef);
    return std::move(value_.stringRef);
  }

  Type getType() const { return type_; }

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t serializedSize(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t serializedSizeZC(Protocol_ const* prot_) const;
  template <class Protocol_>
  uint32_t write(Protocol_* prot_) const;
 protected:
  template <class T>
  void destruct(T &val) {
    (&val)->~T();
  }

  Type type_;
  storage_type value_;
};

void swap(ComplexUnion& a, ComplexUnion& b);
extern template uint32_t ComplexUnion::read<>(apache::thrift::BinaryProtocolReader*);
extern template uint32_t ComplexUnion::write<>(apache::thrift::BinaryProtocolWriter*) const;
extern template uint32_t ComplexUnion::serializedSize<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::BinaryProtocolWriter const*) const;
extern template uint32_t ComplexUnion::read<>(apache::thrift::CompactProtocolReader*);
extern template uint32_t ComplexUnion::write<>(apache::thrift::CompactProtocolWriter*) const;
extern template uint32_t ComplexUnion::serializedSize<>(apache::thrift::CompactProtocolWriter const*) const;
extern template uint32_t ComplexUnion::serializedSizeZC<>(apache::thrift::CompactProtocolWriter const*) const;

} // cpp2
namespace apache { namespace thrift {

template <> inline void Cpp2Ops< ::cpp2::ComplexUnion>::clear( ::cpp2::ComplexUnion* obj) {
  return obj->__clear();
}

template <> inline constexpr apache::thrift::protocol::TType Cpp2Ops< ::cpp2::ComplexUnion>::thriftType() {
  return apache::thrift::protocol::T_STRUCT;
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::ComplexUnion>::write(Protocol* proto,  ::cpp2::ComplexUnion const* obj) {
  return obj->write(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::ComplexUnion>::read(Protocol* proto,  ::cpp2::ComplexUnion* obj) {
  return obj->read(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::ComplexUnion>::serializedSize(Protocol const* proto,  ::cpp2::ComplexUnion const* obj) {
  return obj->serializedSize(proto);
}

template <> template <class Protocol> inline uint32_t Cpp2Ops< ::cpp2::ComplexUnion>::serializedSizeZC(Protocol const* proto,  ::cpp2::ComplexUnion const* obj) {
  return obj->serializedSizeZC(proto);
}

}} // apache::thrift
namespace cpp2 {

} // cpp2
