/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp2/module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union1_read(Protocol_* iprot, union1* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ui();
          xfer += iprot->readI32(obj->mutable_ui());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          obj->set_ud();
          xfer += iprot->readDouble(obj->mutable_ud());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          obj->set_us();
          xfer += iprot->readString(obj->mutable_us());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ue();
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          obj->mutable_ue() = ( ::test_cpp2::cpp_reflection::enum1)ecast0;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union1_serializedSize(Protocol_ const* prot_, const union1* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union1");
  switch(obj->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->serializedFieldSize("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui());
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->serializedFieldSize("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud());
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->serializedFieldSize("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us());
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->serializedFieldSize("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue());
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union1_serializedSizeZC(Protocol_ const* prot_, const union1* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union1");
  switch(obj->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->serializedFieldSize("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui());
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->serializedFieldSize("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud());
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->serializedFieldSize("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us());
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->serializedFieldSize("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue());
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union1_write(Protocol_* prot_, const union1* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union1");
  switch(obj->getType()) {
    case union1::Type::ui:
    {
      xfer += prot_->writeFieldBegin("ui", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_ui());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::ud:
    {
      xfer += prot_->writeFieldBegin("ud", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(obj->get_ud());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::us:
    {
      xfer += prot_->writeFieldBegin("us", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(obj->get_us());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::ue:
    {
      xfer += prot_->writeFieldBegin("ue", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)obj->get_ue());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union1::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union2_read(Protocol_* iprot, union2* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui_2") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud_2") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us_2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue_2") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ui_2();
          xfer += iprot->readI32(obj->mutable_ui_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          obj->set_ud_2();
          xfer += iprot->readDouble(obj->mutable_ud_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          obj->set_us_2();
          xfer += iprot->readString(obj->mutable_us_2());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ue_2();
          int32_t ecast1;
          xfer += iprot->readI32(ecast1);
          obj->mutable_ue_2() = ( ::test_cpp2::cpp_reflection::enum1)ecast1;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union2_serializedSize(Protocol_ const* prot_, const union2* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union2");
  switch(obj->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->serializedFieldSize("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui_2());
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->serializedFieldSize("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud_2());
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->serializedFieldSize("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us_2());
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->serializedFieldSize("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue_2());
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union2_serializedSizeZC(Protocol_ const* prot_, const union2* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union2");
  switch(obj->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->serializedFieldSize("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui_2());
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->serializedFieldSize("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud_2());
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->serializedFieldSize("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us_2());
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->serializedFieldSize("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue_2());
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union2_write(Protocol_* prot_, const union2* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union2");
  switch(obj->getType()) {
    case union2::Type::ui_2:
    {
      xfer += prot_->writeFieldBegin("ui_2", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_ui_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::ud_2:
    {
      xfer += prot_->writeFieldBegin("ud_2", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(obj->get_ud_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::us_2:
    {
      xfer += prot_->writeFieldBegin("us_2", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(obj->get_us_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::ue_2:
    {
      xfer += prot_->writeFieldBegin("ue_2", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)obj->get_ue_2());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union2::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union3_read(Protocol_* iprot, union3* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "ui_3") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ud_3") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "us_3") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "ue_3") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ui_3();
          xfer += iprot->readI32(obj->mutable_ui_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          obj->set_ud_3();
          xfer += iprot->readDouble(obj->mutable_ud_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          obj->set_us_3();
          xfer += iprot->readString(obj->mutable_us_3());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ue_3();
          int32_t ecast2;
          xfer += iprot->readI32(ecast2);
          obj->mutable_ue_3() = ( ::test_cpp2::cpp_reflection::enum1)ecast2;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union3_serializedSize(Protocol_ const* prot_, const union3* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union3");
  switch(obj->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->serializedFieldSize("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui_3());
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->serializedFieldSize("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud_3());
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->serializedFieldSize("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us_3());
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->serializedFieldSize("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue_3());
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union3_serializedSizeZC(Protocol_ const* prot_, const union3* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union3");
  switch(obj->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->serializedFieldSize("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_ui_3());
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->serializedFieldSize("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_ud_3());
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->serializedFieldSize("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_us_3());
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->serializedFieldSize("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_ue_3());
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union3_write(Protocol_* prot_, const union3* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union3");
  switch(obj->getType()) {
    case union3::Type::ui_3:
    {
      xfer += prot_->writeFieldBegin("ui_3", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_ui_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::ud_3:
    {
      xfer += prot_->writeFieldBegin("ud_3", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(obj->get_ud_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::us_3:
    {
      xfer += prot_->writeFieldBegin("us_3", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(obj->get_us_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::ue_3:
    {
      xfer += prot_->writeFieldBegin("ue_3", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)obj->get_ue_3());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union3::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structA_read(Protocol_* iprot, structA* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "a") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "b") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->a);
          obj->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->b);
          obj->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t structA_serializedSize(Protocol_ const* prot_, const structA* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structA");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->b);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structA_serializedSizeZC(Protocol_ const* prot_, const structA* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structA");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->b);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structA_write(Protocol_* prot_, const structA* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structA");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(obj->b);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t unionA_read(Protocol_* iprot, unionA* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "i") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "d") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "s") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "e") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "a") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_i();
          xfer += iprot->readI32(obj->mutable_i());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          obj->set_d();
          xfer += iprot->readDouble(obj->mutable_d());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          obj->set_s();
          xfer += iprot->readString(obj->mutable_s());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_e();
          int32_t ecast3;
          xfer += iprot->readI32(ecast3);
          obj->mutable_e() = ( ::test_cpp2::cpp_reflection::enum1)ecast3;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          obj->set_a();
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->mutable_a());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t unionA_serializedSize(Protocol_ const* prot_, const unionA* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("unionA");
  switch(obj->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_i());
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_d());
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->serializedFieldSize("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_s());
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_e());
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &obj->get_a());
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t unionA_serializedSizeZC(Protocol_ const* prot_, const unionA* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("unionA");
  switch(obj->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_i());
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->serializedSizeDouble(obj->get_d());
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->serializedFieldSize("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->serializedSizeString(obj->get_s());
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32((int32_t)obj->get_e());
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &obj->get_a());
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t unionA_write(Protocol_* prot_, const unionA* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("unionA");
  switch(obj->getType()) {
    case unionA::Type::i:
    {
      xfer += prot_->writeFieldBegin("i", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_i());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::d:
    {
      xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_DOUBLE, 2);
      xfer += prot_->writeDouble(obj->get_d());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::s:
    {
      xfer += prot_->writeFieldBegin("s", apache::thrift::protocol::T_STRING, 3);
      xfer += prot_->writeString(obj->get_s());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::e:
    {
      xfer += prot_->writeFieldBegin("e", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32((int32_t)obj->get_e());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::a:
    {
      xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_STRUCT, 5);
      xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &obj->get_a());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case unionA::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structB_read(Protocol_* iprot, structB* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "c") {
        fid = 1;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "d") {
        fid = 2;
        ftype = apache::thrift::protocol::T_BOOL;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(obj->c);
          obj->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(obj->d);
          obj->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t structB_serializedSize(Protocol_ const* prot_, const structB* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structB");
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(obj->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(obj->d);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structB_serializedSizeZC(Protocol_ const* prot_, const structB* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structB");
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->serializedSizeDouble(obj->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->serializedSizeBool(obj->d);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structB_write(Protocol_* prot_, const structB* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structB");
  xfer += prot_->writeFieldBegin("c", apache::thrift::protocol::T_DOUBLE, 1);
  xfer += prot_->writeDouble(obj->c);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_BOOL, 2);
  xfer += prot_->writeBool(obj->d);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t structC_read(Protocol_* iprot, structC* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "a") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "b") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "c") {
        fid = 3;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "d") {
        fid = 4;
        ftype = apache::thrift::protocol::T_BOOL;
      }
      else if (fname == "e") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "f") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "g") {
        fid = 7;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "h") {
        fid = 8;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "i") {
        fid = 9;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "j") {
        fid = 10;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "j1") {
        fid = 11;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "j2") {
        fid = 12;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "j3") {
        fid = 13;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "k") {
        fid = 14;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "k1") {
        fid = 15;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "k2") {
        fid = 16;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "k3") {
        fid = 17;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "l") {
        fid = 18;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "l1") {
        fid = 19;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "l2") {
        fid = 20;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "l3") {
        fid = 21;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "m1") {
        fid = 22;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "m2") {
        fid = 23;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "m3") {
        fid = 24;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "n1") {
        fid = 25;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "n2") {
        fid = 26;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "n3") {
        fid = 27;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "o1") {
        fid = 28;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "o2") {
        fid = 29;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "o3") {
        fid = 30;
        ftype = apache::thrift::protocol::T_MAP;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->a);
          obj->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->b);
          obj->__isset.b = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(obj->c);
          obj->__isset.c = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(obj->d);
          obj->__isset.d = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast4;
          xfer += iprot->readI32(ecast4);
          obj->e = ( ::test_cpp2::cpp_reflection::enum1)ecast4;
          obj->__isset.e = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast5;
          xfer += iprot->readI32(ecast5);
          obj->f = ( ::test_cpp2::cpp_reflection::enum2)ecast5;
          obj->__isset.f = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &obj->g);
          obj->__isset.g = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::read(iprot, &obj->h);
          obj->__isset.h = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::read(iprot, &obj->i);
          obj->__isset.i = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->j = std::vector<int32_t>();
          uint32_t _size6;
          apache::thrift::protocol::TType _etype9;
          xfer += iprot->readListBegin(_etype9, _size6);
          uint32_t _i10;
          if (_size6 == std::numeric_limits<uint32_t>::max()) {
            for (_i10 = 0; iprot->peekList(); _i10++) {
              obj->j.resize(_i10 + 1);
              xfer += iprot->readI32(obj->j[_i10]);
            }
          }
          else {
            obj->j.resize(_size6);
            for (_i10 = 0; _i10 < _size6; ++_i10) {
              xfer += iprot->readI32(obj->j[_i10]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.j = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->j1 = std::vector<int32_t>();
          uint32_t _size11;
          apache::thrift::protocol::TType _etype14;
          xfer += iprot->readListBegin(_etype14, _size11);
          uint32_t _i15;
          if (_size11 == std::numeric_limits<uint32_t>::max()) {
            for (_i15 = 0; iprot->peekList(); _i15++) {
              obj->j1.resize(_i15 + 1);
              xfer += iprot->readI32(obj->j1[_i15]);
            }
          }
          else {
            obj->j1.resize(_size11);
            for (_i15 = 0; _i15 < _size11; ++_i15) {
              xfer += iprot->readI32(obj->j1[_i15]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.j1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->j2 = std::vector< ::test_cpp2::cpp_reflection::enum1>();
          uint32_t _size16;
          apache::thrift::protocol::TType _etype19;
          xfer += iprot->readListBegin(_etype19, _size16);
          uint32_t _i20;
          if (_size16 == std::numeric_limits<uint32_t>::max()) {
            for (_i20 = 0; iprot->peekList(); _i20++) {
              obj->j2.resize(_i20 + 1);
              int32_t ecast21;
              xfer += iprot->readI32(ecast21);
              obj->j2[_i20] = ( ::test_cpp2::cpp_reflection::enum1)ecast21;
            }
          }
          else {
            obj->j2.resize(_size16);
            for (_i20 = 0; _i20 < _size16; ++_i20) {
              int32_t ecast22;
              xfer += iprot->readI32(ecast22);
              obj->j2[_i20] = ( ::test_cpp2::cpp_reflection::enum1)ecast22;
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.j2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->j3 = std::vector< ::test_cpp2::cpp_reflection::structA>();
          uint32_t _size23;
          apache::thrift::protocol::TType _etype26;
          xfer += iprot->readListBegin(_etype26, _size23);
          uint32_t _i27;
          if (_size23 == std::numeric_limits<uint32_t>::max()) {
            for (_i27 = 0; iprot->peekList(); _i27++) {
              obj->j3.resize(_i27 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->j3[_i27]);
            }
          }
          else {
            obj->j3.resize(_size23);
            for (_i27 = 0; _i27 < _size23; ++_i27) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->j3[_i27]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.j3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->k = std::set<int32_t>();
          uint32_t _size28;
          apache::thrift::protocol::TType _etype31;
          xfer += iprot->readSetBegin(_etype31, _size28);
          uint32_t _i32;
          if (_size28 == std::numeric_limits<uint32_t>::max()) {
            for (_i32 = 0; iprot->peekSet(); _i32++) {
              int32_t _elem33;
              xfer += iprot->readI32(_elem33);
              obj->k.insert(std::move(_elem33));
            }
          }
          else {
            for (_i32 = 0; _i32 < _size28; ++_i32) {
              int32_t _elem34;
              xfer += iprot->readI32(_elem34);
              obj->k.insert(std::move(_elem34));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.k = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->k1 = std::set<int32_t>();
          uint32_t _size35;
          apache::thrift::protocol::TType _etype38;
          xfer += iprot->readSetBegin(_etype38, _size35);
          uint32_t _i39;
          if (_size35 == std::numeric_limits<uint32_t>::max()) {
            for (_i39 = 0; iprot->peekSet(); _i39++) {
              int32_t _elem40;
              xfer += iprot->readI32(_elem40);
              obj->k1.insert(std::move(_elem40));
            }
          }
          else {
            for (_i39 = 0; _i39 < _size35; ++_i39) {
              int32_t _elem41;
              xfer += iprot->readI32(_elem41);
              obj->k1.insert(std::move(_elem41));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.k1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->k2 = std::set< ::test_cpp2::cpp_reflection::enum2>();
          uint32_t _size42;
          apache::thrift::protocol::TType _etype45;
          xfer += iprot->readSetBegin(_etype45, _size42);
          uint32_t _i46;
          if (_size42 == std::numeric_limits<uint32_t>::max()) {
            for (_i46 = 0; iprot->peekSet(); _i46++) {
               ::test_cpp2::cpp_reflection::enum2 _elem47;
              int32_t ecast48;
              xfer += iprot->readI32(ecast48);
              _elem47 = ( ::test_cpp2::cpp_reflection::enum2)ecast48;
              obj->k2.insert(std::move(_elem47));
            }
          }
          else {
            for (_i46 = 0; _i46 < _size42; ++_i46) {
               ::test_cpp2::cpp_reflection::enum2 _elem49;
              int32_t ecast50;
              xfer += iprot->readI32(ecast50);
              _elem49 = ( ::test_cpp2::cpp_reflection::enum2)ecast50;
              obj->k2.insert(std::move(_elem49));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.k2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->k3 = std::set< ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size51;
          apache::thrift::protocol::TType _etype54;
          xfer += iprot->readSetBegin(_etype54, _size51);
          uint32_t _i55;
          if (_size51 == std::numeric_limits<uint32_t>::max()) {
            for (_i55 = 0; iprot->peekSet(); _i55++) {
               ::test_cpp2::cpp_reflection::structB _elem56;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem56);
              obj->k3.insert(std::move(_elem56));
            }
          }
          else {
            for (_i55 = 0; _i55 < _size51; ++_i55) {
               ::test_cpp2::cpp_reflection::structB _elem57;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem57);
              obj->k3.insert(std::move(_elem57));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.k3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->l = std::map<int32_t, int32_t>();
          uint32_t _size58;
          apache::thrift::protocol::TType _ktype59;
          apache::thrift::protocol::TType _vtype60;
          xfer += iprot->readMapBegin(_ktype59, _vtype60, _size58);
          uint32_t _i62;
          if (_size58 == std::numeric_limits<uint32_t>::max()) {
            for (_i62 = 0; iprot->peekMap(); _i62++) {
              int32_t _key63;
              xfer += iprot->readI32(_key63);
              int32_t& _val64 = obj->l[std::move(_key63)];
              xfer += iprot->readI32(_val64);
            }
          }
          else {
            auto const _kreader65 = [&xfer, &iprot](auto& _key67) {
              xfer += iprot->readI32(_key67);
            }
            ;
            auto const _vreader66 = [&xfer, &iprot](auto& _val68) {
              xfer += iprot->readI32(_val68);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->l, _size58, _kreader65, _vreader66);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.l = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 19:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->l1 = std::map<int32_t, int32_t>();
          uint32_t _size69;
          apache::thrift::protocol::TType _ktype70;
          apache::thrift::protocol::TType _vtype71;
          xfer += iprot->readMapBegin(_ktype70, _vtype71, _size69);
          uint32_t _i73;
          if (_size69 == std::numeric_limits<uint32_t>::max()) {
            for (_i73 = 0; iprot->peekMap(); _i73++) {
              int32_t _key74;
              xfer += iprot->readI32(_key74);
              int32_t& _val75 = obj->l1[std::move(_key74)];
              xfer += iprot->readI32(_val75);
            }
          }
          else {
            auto const _kreader76 = [&xfer, &iprot](auto& _key78) {
              xfer += iprot->readI32(_key78);
            }
            ;
            auto const _vreader77 = [&xfer, &iprot](auto& _val79) {
              xfer += iprot->readI32(_val79);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->l1, _size69, _kreader76, _vreader77);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.l1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 20:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->l2 = std::map<int32_t,  ::test_cpp2::cpp_reflection::enum1>();
          uint32_t _size80;
          apache::thrift::protocol::TType _ktype81;
          apache::thrift::protocol::TType _vtype82;
          xfer += iprot->readMapBegin(_ktype81, _vtype82, _size80);
          uint32_t _i84;
          if (_size80 == std::numeric_limits<uint32_t>::max()) {
            for (_i84 = 0; iprot->peekMap(); _i84++) {
              int32_t _key85;
              xfer += iprot->readI32(_key85);
               ::test_cpp2::cpp_reflection::enum1& _val86 = obj->l2[std::move(_key85)];
              int32_t ecast87;
              xfer += iprot->readI32(ecast87);
              _val86 = ( ::test_cpp2::cpp_reflection::enum1)ecast87;
            }
          }
          else {
            auto const _kreader88 = [&xfer, &iprot](auto& _key90) {
              xfer += iprot->readI32(_key90);
            }
            ;
            auto const _vreader89 = [&xfer, &iprot](auto& _val91) {
              int32_t ecast92;
              xfer += iprot->readI32(ecast92);
              _val91 = ( ::test_cpp2::cpp_reflection::enum1)ecast92;
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->l2, _size80, _kreader88, _vreader89);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.l2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 21:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->l3 = std::map<int32_t,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size93;
          apache::thrift::protocol::TType _ktype94;
          apache::thrift::protocol::TType _vtype95;
          xfer += iprot->readMapBegin(_ktype94, _vtype95, _size93);
          uint32_t _i97;
          if (_size93 == std::numeric_limits<uint32_t>::max()) {
            for (_i97 = 0; iprot->peekMap(); _i97++) {
              int32_t _key98;
              xfer += iprot->readI32(_key98);
               ::test_cpp2::cpp_reflection::structB& _val99 = obj->l3[std::move(_key98)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val99);
            }
          }
          else {
            auto const _kreader100 = [&xfer, &iprot](auto& _key102) {
              xfer += iprot->readI32(_key102);
            }
            ;
            auto const _vreader101 = [&xfer, &iprot](auto& _val103) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val103);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->l3, _size93, _kreader100, _vreader101);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.l3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 22:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->m1 = std::map< ::test_cpp2::cpp_reflection::enum1, int32_t>();
          uint32_t _size104;
          apache::thrift::protocol::TType _ktype105;
          apache::thrift::protocol::TType _vtype106;
          xfer += iprot->readMapBegin(_ktype105, _vtype106, _size104);
          uint32_t _i108;
          if (_size104 == std::numeric_limits<uint32_t>::max()) {
            for (_i108 = 0; iprot->peekMap(); _i108++) {
               ::test_cpp2::cpp_reflection::enum1 _key109;
              int32_t ecast111;
              xfer += iprot->readI32(ecast111);
              _key109 = ( ::test_cpp2::cpp_reflection::enum1)ecast111;
              int32_t& _val110 = obj->m1[std::move(_key109)];
              xfer += iprot->readI32(_val110);
            }
          }
          else {
            auto const _kreader112 = [&xfer, &iprot](auto& _key114) {
              int32_t ecast116;
              xfer += iprot->readI32(ecast116);
              _key114 = ( ::test_cpp2::cpp_reflection::enum1)ecast116;
            }
            ;
            auto const _vreader113 = [&xfer, &iprot](auto& _val115) {
              xfer += iprot->readI32(_val115);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->m1, _size104, _kreader112, _vreader113);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.m1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 23:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->m2 = std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::enum2>();
          uint32_t _size117;
          apache::thrift::protocol::TType _ktype118;
          apache::thrift::protocol::TType _vtype119;
          xfer += iprot->readMapBegin(_ktype118, _vtype119, _size117);
          uint32_t _i121;
          if (_size117 == std::numeric_limits<uint32_t>::max()) {
            for (_i121 = 0; iprot->peekMap(); _i121++) {
               ::test_cpp2::cpp_reflection::enum1 _key122;
              int32_t ecast124;
              xfer += iprot->readI32(ecast124);
              _key122 = ( ::test_cpp2::cpp_reflection::enum1)ecast124;
               ::test_cpp2::cpp_reflection::enum2& _val123 = obj->m2[std::move(_key122)];
              int32_t ecast125;
              xfer += iprot->readI32(ecast125);
              _val123 = ( ::test_cpp2::cpp_reflection::enum2)ecast125;
            }
          }
          else {
            auto const _kreader126 = [&xfer, &iprot](auto& _key128) {
              int32_t ecast130;
              xfer += iprot->readI32(ecast130);
              _key128 = ( ::test_cpp2::cpp_reflection::enum1)ecast130;
            }
            ;
            auto const _vreader127 = [&xfer, &iprot](auto& _val129) {
              int32_t ecast131;
              xfer += iprot->readI32(ecast131);
              _val129 = ( ::test_cpp2::cpp_reflection::enum2)ecast131;
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->m2, _size117, _kreader126, _vreader127);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.m2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 24:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->m3 = std::map< ::test_cpp2::cpp_reflection::enum1,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size132;
          apache::thrift::protocol::TType _ktype133;
          apache::thrift::protocol::TType _vtype134;
          xfer += iprot->readMapBegin(_ktype133, _vtype134, _size132);
          uint32_t _i136;
          if (_size132 == std::numeric_limits<uint32_t>::max()) {
            for (_i136 = 0; iprot->peekMap(); _i136++) {
               ::test_cpp2::cpp_reflection::enum1 _key137;
              int32_t ecast139;
              xfer += iprot->readI32(ecast139);
              _key137 = ( ::test_cpp2::cpp_reflection::enum1)ecast139;
               ::test_cpp2::cpp_reflection::structB& _val138 = obj->m3[std::move(_key137)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val138);
            }
          }
          else {
            auto const _kreader140 = [&xfer, &iprot](auto& _key142) {
              int32_t ecast144;
              xfer += iprot->readI32(ecast144);
              _key142 = ( ::test_cpp2::cpp_reflection::enum1)ecast144;
            }
            ;
            auto const _vreader141 = [&xfer, &iprot](auto& _val143) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val143);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->m3, _size132, _kreader140, _vreader141);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.m3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 25:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->n1 = std::map<std::string, int32_t>();
          uint32_t _size145;
          apache::thrift::protocol::TType _ktype146;
          apache::thrift::protocol::TType _vtype147;
          xfer += iprot->readMapBegin(_ktype146, _vtype147, _size145);
          uint32_t _i149;
          if (_size145 == std::numeric_limits<uint32_t>::max()) {
            for (_i149 = 0; iprot->peekMap(); _i149++) {
              std::string _key150;
              xfer += iprot->readString(_key150);
              int32_t& _val151 = obj->n1[std::move(_key150)];
              xfer += iprot->readI32(_val151);
            }
          }
          else {
            auto const _kreader152 = [&xfer, &iprot](auto& _key154) {
              xfer += iprot->readString(_key154);
            }
            ;
            auto const _vreader153 = [&xfer, &iprot](auto& _val155) {
              xfer += iprot->readI32(_val155);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->n1, _size145, _kreader152, _vreader153);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.n1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 26:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->n2 = std::map<std::string,  ::test_cpp2::cpp_reflection::enum1>();
          uint32_t _size156;
          apache::thrift::protocol::TType _ktype157;
          apache::thrift::protocol::TType _vtype158;
          xfer += iprot->readMapBegin(_ktype157, _vtype158, _size156);
          uint32_t _i160;
          if (_size156 == std::numeric_limits<uint32_t>::max()) {
            for (_i160 = 0; iprot->peekMap(); _i160++) {
              std::string _key161;
              xfer += iprot->readString(_key161);
               ::test_cpp2::cpp_reflection::enum1& _val162 = obj->n2[std::move(_key161)];
              int32_t ecast163;
              xfer += iprot->readI32(ecast163);
              _val162 = ( ::test_cpp2::cpp_reflection::enum1)ecast163;
            }
          }
          else {
            auto const _kreader164 = [&xfer, &iprot](auto& _key166) {
              xfer += iprot->readString(_key166);
            }
            ;
            auto const _vreader165 = [&xfer, &iprot](auto& _val167) {
              int32_t ecast168;
              xfer += iprot->readI32(ecast168);
              _val167 = ( ::test_cpp2::cpp_reflection::enum1)ecast168;
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->n2, _size156, _kreader164, _vreader165);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.n2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 27:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->n3 = std::map<std::string,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size169;
          apache::thrift::protocol::TType _ktype170;
          apache::thrift::protocol::TType _vtype171;
          xfer += iprot->readMapBegin(_ktype170, _vtype171, _size169);
          uint32_t _i173;
          if (_size169 == std::numeric_limits<uint32_t>::max()) {
            for (_i173 = 0; iprot->peekMap(); _i173++) {
              std::string _key174;
              xfer += iprot->readString(_key174);
               ::test_cpp2::cpp_reflection::structB& _val175 = obj->n3[std::move(_key174)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val175);
            }
          }
          else {
            auto const _kreader176 = [&xfer, &iprot](auto& _key178) {
              xfer += iprot->readString(_key178);
            }
            ;
            auto const _vreader177 = [&xfer, &iprot](auto& _val179) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val179);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->n3, _size169, _kreader176, _vreader177);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.n3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 28:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->o1 = std::map< ::test_cpp2::cpp_reflection::structA, int32_t>();
          uint32_t _size180;
          apache::thrift::protocol::TType _ktype181;
          apache::thrift::protocol::TType _vtype182;
          xfer += iprot->readMapBegin(_ktype181, _vtype182, _size180);
          uint32_t _i184;
          if (_size180 == std::numeric_limits<uint32_t>::max()) {
            for (_i184 = 0; iprot->peekMap(); _i184++) {
               ::test_cpp2::cpp_reflection::structA _key185;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key185);
              int32_t& _val186 = obj->o1[std::move(_key185)];
              xfer += iprot->readI32(_val186);
            }
          }
          else {
            auto const _kreader187 = [&xfer, &iprot](auto& _key189) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key189);
            }
            ;
            auto const _vreader188 = [&xfer, &iprot](auto& _val190) {
              xfer += iprot->readI32(_val190);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->o1, _size180, _kreader187, _vreader188);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.o1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 29:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->o2 = std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::enum1>();
          uint32_t _size191;
          apache::thrift::protocol::TType _ktype192;
          apache::thrift::protocol::TType _vtype193;
          xfer += iprot->readMapBegin(_ktype192, _vtype193, _size191);
          uint32_t _i195;
          if (_size191 == std::numeric_limits<uint32_t>::max()) {
            for (_i195 = 0; iprot->peekMap(); _i195++) {
               ::test_cpp2::cpp_reflection::structA _key196;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key196);
               ::test_cpp2::cpp_reflection::enum1& _val197 = obj->o2[std::move(_key196)];
              int32_t ecast198;
              xfer += iprot->readI32(ecast198);
              _val197 = ( ::test_cpp2::cpp_reflection::enum1)ecast198;
            }
          }
          else {
            auto const _kreader199 = [&xfer, &iprot](auto& _key201) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key201);
            }
            ;
            auto const _vreader200 = [&xfer, &iprot](auto& _val202) {
              int32_t ecast203;
              xfer += iprot->readI32(ecast203);
              _val202 = ( ::test_cpp2::cpp_reflection::enum1)ecast203;
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->o2, _size191, _kreader199, _vreader200);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.o2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 30:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->o3 = std::map< ::test_cpp2::cpp_reflection::structA,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size204;
          apache::thrift::protocol::TType _ktype205;
          apache::thrift::protocol::TType _vtype206;
          xfer += iprot->readMapBegin(_ktype205, _vtype206, _size204);
          uint32_t _i208;
          if (_size204 == std::numeric_limits<uint32_t>::max()) {
            for (_i208 = 0; iprot->peekMap(); _i208++) {
               ::test_cpp2::cpp_reflection::structA _key209;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key209);
               ::test_cpp2::cpp_reflection::structB& _val210 = obj->o3[std::move(_key209)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val210);
            }
          }
          else {
            auto const _kreader211 = [&xfer, &iprot](auto& _key213) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_key213);
            }
            ;
            auto const _vreader212 = [&xfer, &iprot](auto& _val214) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val214);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->o3, _size204, _kreader211, _vreader212);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.o3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t structC_serializedSize(Protocol_ const* prot_, const structC* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structC");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->b);
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(obj->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(obj->d);
  xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32((int32_t)obj->e);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32((int32_t)obj->f);
  xfer += prot_->serializedFieldSize("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &obj->g);
  xfer += prot_->serializedFieldSize("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSize(prot_, &obj->h);
  xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSize(prot_, &obj->i);
  xfer += prot_->serializedFieldSize("j", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j.size());
  for (auto _iter215 = obj->j.begin(); _iter215 != obj->j.end(); ++_iter215) {
    xfer += prot_->serializedSizeI32((*_iter215));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j1.size());
  for (auto _iter216 = obj->j1.begin(); _iter216 != obj->j1.end(); ++_iter216) {
    xfer += prot_->serializedSizeI32((*_iter216));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j2.size());
  for (auto _iter217 = obj->j2.begin(); _iter217 != obj->j2.end(); ++_iter217) {
    xfer += prot_->serializedSizeI32((int32_t)(*_iter217));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, obj->j3.size());
  for (auto _iter218 = obj->j3.begin(); _iter218 != obj->j3.end(); ++_iter218) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &(*_iter218));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("k", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k.size());
  for (auto _iter219 = obj->k.begin(); _iter219 != obj->k.end(); ++_iter219) {
    xfer += prot_->serializedSizeI32((*_iter219));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k1", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k1.size());
  for (auto _iter220 = obj->k1.begin(); _iter220 != obj->k1.end(); ++_iter220) {
    xfer += prot_->serializedSizeI32((*_iter220));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k2", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k2.size());
  for (auto _iter221 = obj->k2.begin(); _iter221 != obj->k2.end(); ++_iter221) {
    xfer += prot_->serializedSizeI32((int32_t)(*_iter221));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k3", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, obj->k3.size());
  for (auto _iter222 = obj->k3.begin(); _iter222 != obj->k3.end(); ++_iter222) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &(*_iter222));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("l", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l.size());
  for (auto _iter223 = obj->l.begin(); _iter223 != obj->l.end(); ++_iter223) {
    xfer += prot_->serializedSizeI32(_iter223->first);
    xfer += prot_->serializedSizeI32(_iter223->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l1.size());
  for (auto _iter224 = obj->l1.begin(); _iter224 != obj->l1.end(); ++_iter224) {
    xfer += prot_->serializedSizeI32(_iter224->first);
    xfer += prot_->serializedSizeI32(_iter224->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l2.size());
  for (auto _iter225 = obj->l2.begin(); _iter225 != obj->l2.end(); ++_iter225) {
    xfer += prot_->serializedSizeI32(_iter225->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter225->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->l3.size());
  for (auto _iter226 = obj->l3.begin(); _iter226 != obj->l3.end(); ++_iter226) {
    xfer += prot_->serializedSizeI32(_iter226->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter226->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m1.size());
  for (auto _iter227 = obj->m1.begin(); _iter227 != obj->m1.end(); ++_iter227) {
    xfer += prot_->serializedSizeI32((int32_t)_iter227->first);
    xfer += prot_->serializedSizeI32(_iter227->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m2.size());
  for (auto _iter228 = obj->m2.begin(); _iter228 != obj->m2.end(); ++_iter228) {
    xfer += prot_->serializedSizeI32((int32_t)_iter228->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter228->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->m3.size());
  for (auto _iter229 = obj->m3.begin(); _iter229 != obj->m3.end(); ++_iter229) {
    xfer += prot_->serializedSizeI32((int32_t)_iter229->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter229->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n1.size());
  for (auto _iter230 = obj->n1.begin(); _iter230 != obj->n1.end(); ++_iter230) {
    xfer += prot_->serializedSizeString(_iter230->first);
    xfer += prot_->serializedSizeI32(_iter230->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n2.size());
  for (auto _iter231 = obj->n2.begin(); _iter231 != obj->n2.end(); ++_iter231) {
    xfer += prot_->serializedSizeString(_iter231->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter231->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->n3.size());
  for (auto _iter232 = obj->n3.begin(); _iter232 != obj->n3.end(); ++_iter232) {
    xfer += prot_->serializedSizeString(_iter232->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter232->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o1.size());
  for (auto _iter233 = obj->o1.begin(); _iter233 != obj->o1.end(); ++_iter233) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter233->first);
    xfer += prot_->serializedSizeI32(_iter233->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o2.size());
  for (auto _iter234 = obj->o2.begin(); _iter234 != obj->o2.end(); ++_iter234) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter234->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter234->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_STRUCT, obj->o3.size());
  for (auto _iter235 = obj->o3.begin(); _iter235 != obj->o3.end(); ++_iter235) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter235->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter235->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structC_serializedSizeZC(Protocol_ const* prot_, const structC* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("structC");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedFieldSize("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->b);
  xfer += prot_->serializedFieldSize("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->serializedSizeDouble(obj->c);
  xfer += prot_->serializedFieldSize("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->serializedSizeBool(obj->d);
  xfer += prot_->serializedFieldSize("e", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32((int32_t)obj->e);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32((int32_t)obj->f);
  xfer += prot_->serializedFieldSize("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &obj->g);
  xfer += prot_->serializedFieldSize("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSizeZC(prot_, &obj->h);
  xfer += prot_->serializedFieldSize("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::serializedSizeZC(prot_, &obj->i);
  xfer += prot_->serializedFieldSize("j", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j.size());
  for (auto _iter236 = obj->j.begin(); _iter236 != obj->j.end(); ++_iter236) {
    xfer += prot_->serializedSizeI32((*_iter236));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j1.size());
  for (auto _iter237 = obj->j1.begin(); _iter237 != obj->j1.end(); ++_iter237) {
    xfer += prot_->serializedSizeI32((*_iter237));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->j2.size());
  for (auto _iter238 = obj->j2.begin(); _iter238 != obj->j2.end(); ++_iter238) {
    xfer += prot_->serializedSizeI32((int32_t)(*_iter238));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, obj->j3.size());
  for (auto _iter239 = obj->j3.begin(); _iter239 != obj->j3.end(); ++_iter239) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &(*_iter239));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("k", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k.size());
  for (auto _iter240 = obj->k.begin(); _iter240 != obj->k.end(); ++_iter240) {
    xfer += prot_->serializedSizeI32((*_iter240));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k1", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k1.size());
  for (auto _iter241 = obj->k1.begin(); _iter241 != obj->k1.end(); ++_iter241) {
    xfer += prot_->serializedSizeI32((*_iter241));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k2", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->k2.size());
  for (auto _iter242 = obj->k2.begin(); _iter242 != obj->k2.end(); ++_iter242) {
    xfer += prot_->serializedSizeI32((int32_t)(*_iter242));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("k3", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, obj->k3.size());
  for (auto _iter243 = obj->k3.begin(); _iter243 != obj->k3.end(); ++_iter243) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &(*_iter243));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("l", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l.size());
  for (auto _iter244 = obj->l.begin(); _iter244 != obj->l.end(); ++_iter244) {
    xfer += prot_->serializedSizeI32(_iter244->first);
    xfer += prot_->serializedSizeI32(_iter244->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l1.size());
  for (auto _iter245 = obj->l1.begin(); _iter245 != obj->l1.end(); ++_iter245) {
    xfer += prot_->serializedSizeI32(_iter245->first);
    xfer += prot_->serializedSizeI32(_iter245->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l2.size());
  for (auto _iter246 = obj->l2.begin(); _iter246 != obj->l2.end(); ++_iter246) {
    xfer += prot_->serializedSizeI32(_iter246->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter246->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->l3.size());
  for (auto _iter247 = obj->l3.begin(); _iter247 != obj->l3.end(); ++_iter247) {
    xfer += prot_->serializedSizeI32(_iter247->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter247->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m1.size());
  for (auto _iter248 = obj->m1.begin(); _iter248 != obj->m1.end(); ++_iter248) {
    xfer += prot_->serializedSizeI32((int32_t)_iter248->first);
    xfer += prot_->serializedSizeI32(_iter248->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m2.size());
  for (auto _iter249 = obj->m2.begin(); _iter249 != obj->m2.end(); ++_iter249) {
    xfer += prot_->serializedSizeI32((int32_t)_iter249->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter249->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->m3.size());
  for (auto _iter250 = obj->m3.begin(); _iter250 != obj->m3.end(); ++_iter250) {
    xfer += prot_->serializedSizeI32((int32_t)_iter250->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter250->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n1.size());
  for (auto _iter251 = obj->n1.begin(); _iter251 != obj->n1.end(); ++_iter251) {
    xfer += prot_->serializedSizeString(_iter251->first);
    xfer += prot_->serializedSizeI32(_iter251->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n2.size());
  for (auto _iter252 = obj->n2.begin(); _iter252 != obj->n2.end(); ++_iter252) {
    xfer += prot_->serializedSizeString(_iter252->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter252->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->n3.size());
  for (auto _iter253 = obj->n3.begin(); _iter253 != obj->n3.end(); ++_iter253) {
    xfer += prot_->serializedSizeString(_iter253->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter253->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o1.size());
  for (auto _iter254 = obj->o1.begin(); _iter254 != obj->o1.end(); ++_iter254) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter254->first);
    xfer += prot_->serializedSizeI32(_iter254->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o2.size());
  for (auto _iter255 = obj->o2.begin(); _iter255 != obj->o2.end(); ++_iter255) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter255->first);
    xfer += prot_->serializedSizeI32((int32_t)_iter255->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_STRUCT, obj->o3.size());
  for (auto _iter256 = obj->o3.begin(); _iter256 != obj->o3.end(); ++_iter256) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter256->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter256->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t structC_write(Protocol_* prot_, const structC* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("structC");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("b", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(obj->b);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("c", apache::thrift::protocol::T_DOUBLE, 3);
  xfer += prot_->writeDouble(obj->c);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("d", apache::thrift::protocol::T_BOOL, 4);
  xfer += prot_->writeBool(obj->d);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("e", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32((int32_t)obj->e);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("f", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32((int32_t)obj->f);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("g", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &obj->g);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("h", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::write(prot_, &obj->h);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("i", apache::thrift::protocol::T_STRUCT, 9);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::unionA>::write(prot_, &obj->i);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, obj->j.size());
  for (auto _iter257 = obj->j.begin(); _iter257 != obj->j.end(); ++_iter257) {
    xfer += prot_->writeI32((*_iter257));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j1", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, obj->j1.size());
  for (auto _iter258 = obj->j1.begin(); _iter258 != obj->j1.end(); ++_iter258) {
    xfer += prot_->writeI32((*_iter258));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j2", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, obj->j2.size());
  for (auto _iter259 = obj->j2.begin(); _iter259 != obj->j2.end(); ++_iter259) {
    xfer += prot_->writeI32((int32_t)(*_iter259));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("j3", apache::thrift::protocol::T_LIST, 13);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, obj->j3.size());
  for (auto _iter260 = obj->j3.begin(); _iter260 != obj->j3.end(); ++_iter260) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &(*_iter260));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, obj->k.size());
  for (auto _iter261 = obj->k.begin(); _iter261 != obj->k.end(); ++_iter261) {
    xfer += prot_->writeI32((*_iter261));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k1", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, obj->k1.size());
  for (auto _iter262 = obj->k1.begin(); _iter262 != obj->k1.end(); ++_iter262) {
    xfer += prot_->writeI32((*_iter262));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k2", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, obj->k2.size());
  for (auto _iter263 = obj->k2.begin(); _iter263 != obj->k2.end(); ++_iter263) {
    xfer += prot_->writeI32((int32_t)(*_iter263));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("k3", apache::thrift::protocol::T_SET, 17);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, obj->k3.size());
  for (auto _iter264 = obj->k3.begin(); _iter264 != obj->k3.end(); ++_iter264) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &(*_iter264));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l.size());
  for (auto _iter265 = obj->l.begin(); _iter265 != obj->l.end(); ++_iter265) {
    xfer += prot_->writeI32(_iter265->first);
    xfer += prot_->writeI32(_iter265->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l1", apache::thrift::protocol::T_MAP, 19);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l1.size());
  for (auto _iter266 = obj->l1.begin(); _iter266 != obj->l1.end(); ++_iter266) {
    xfer += prot_->writeI32(_iter266->first);
    xfer += prot_->writeI32(_iter266->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l2", apache::thrift::protocol::T_MAP, 20);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->l2.size());
  for (auto _iter267 = obj->l2.begin(); _iter267 != obj->l2.end(); ++_iter267) {
    xfer += prot_->writeI32(_iter267->first);
    xfer += prot_->writeI32((int32_t)_iter267->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("l3", apache::thrift::protocol::T_MAP, 21);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->l3.size());
  for (auto _iter268 = obj->l3.begin(); _iter268 != obj->l3.end(); ++_iter268) {
    xfer += prot_->writeI32(_iter268->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter268->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m1", apache::thrift::protocol::T_MAP, 22);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m1.size());
  for (auto _iter269 = obj->m1.begin(); _iter269 != obj->m1.end(); ++_iter269) {
    xfer += prot_->writeI32((int32_t)_iter269->first);
    xfer += prot_->writeI32(_iter269->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m2", apache::thrift::protocol::T_MAP, 23);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, obj->m2.size());
  for (auto _iter270 = obj->m2.begin(); _iter270 != obj->m2.end(); ++_iter270) {
    xfer += prot_->writeI32((int32_t)_iter270->first);
    xfer += prot_->writeI32((int32_t)_iter270->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("m3", apache::thrift::protocol::T_MAP, 24);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_STRUCT, obj->m3.size());
  for (auto _iter271 = obj->m3.begin(); _iter271 != obj->m3.end(); ++_iter271) {
    xfer += prot_->writeI32((int32_t)_iter271->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter271->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n1", apache::thrift::protocol::T_MAP, 25);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n1.size());
  for (auto _iter272 = obj->n1.begin(); _iter272 != obj->n1.end(); ++_iter272) {
    xfer += prot_->writeString(_iter272->first);
    xfer += prot_->writeI32(_iter272->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n2", apache::thrift::protocol::T_MAP, 26);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_I32, obj->n2.size());
  for (auto _iter273 = obj->n2.begin(); _iter273 != obj->n2.end(); ++_iter273) {
    xfer += prot_->writeString(_iter273->first);
    xfer += prot_->writeI32((int32_t)_iter273->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("n3", apache::thrift::protocol::T_MAP, 27);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->n3.size());
  for (auto _iter274 = obj->n3.begin(); _iter274 != obj->n3.end(); ++_iter274) {
    xfer += prot_->writeString(_iter274->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter274->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o1", apache::thrift::protocol::T_MAP, 28);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o1.size());
  for (auto _iter275 = obj->o1.begin(); _iter275 != obj->o1.end(); ++_iter275) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter275->first);
    xfer += prot_->writeI32(_iter275->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o2", apache::thrift::protocol::T_MAP, 29);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_I32, obj->o2.size());
  for (auto _iter276 = obj->o2.begin(); _iter276 != obj->o2.end(); ++_iter276) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter276->first);
    xfer += prot_->writeI32((int32_t)_iter276->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("o3", apache::thrift::protocol::T_MAP, 30);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRUCT, apache::thrift::protocol::T_STRUCT, obj->o3.size());
  for (auto _iter277 = obj->o3.begin(); _iter277 != obj->o3.end(); ++_iter277) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter277->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter277->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct1_read(Protocol_* iprot, struct1* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;
  bool isset_field3 = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "field0") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field1") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "field2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field3") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field4") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "field5") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->field0);
          isset_field0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->field1);
          obj->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast278;
          xfer += iprot->readI32(ecast278);
          obj->field2 = ( ::test_cpp2::cpp_reflection::enum1)ecast278;
          obj->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast279;
          xfer += iprot->readI32(ecast279);
          obj->field3 = ( ::test_cpp2::cpp_reflection::enum2)ecast279;
          isset_field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &obj->field4);
          obj->__isset.field4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &obj->field5);
          obj->__isset.field5 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_field0) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'field0' was not found in serialized data! Struct: struct1");
  }
  if (!isset_field3) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'field3' was not found in serialized data! Struct: struct1");
  }
  return xfer;
}

template <class Protocol_>
uint32_t struct1_serializedSize(Protocol_ const* prot_, const struct1* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct1");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->field3);
  if (obj->__isset.field4) {
    xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &obj->field4);
  }
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &obj->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct1_serializedSizeZC(Protocol_ const* prot_, const struct1* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct1");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->field3);
  if (obj->__isset.field4) {
    xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &obj->field4);
  }
  xfer += prot_->serializedFieldSize("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &obj->field5);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct1_write(Protocol_* prot_, const struct1* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct1");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->field0);
  xfer += prot_->writeFieldEnd();
  if (obj->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(obj->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)obj->field3);
  xfer += prot_->writeFieldEnd();
  if (obj->__isset.field4) {
    xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 5);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &obj->field4);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field5", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &obj->field5);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct2_read(Protocol_* iprot, struct2* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "fieldA") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldB") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "fieldC") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldD") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldE") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldF") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldG") {
        fid = 7;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->fieldA);
          obj->__isset.fieldA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->fieldB);
          obj->__isset.fieldB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast280;
          xfer += iprot->readI32(ecast280);
          obj->fieldC = ( ::test_cpp2::cpp_reflection::enum1)ecast280;
          obj->__isset.fieldC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast281;
          xfer += iprot->readI32(ecast281);
          obj->fieldD = ( ::test_cpp2::cpp_reflection::enum2)ecast281;
          obj->__isset.fieldD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &obj->fieldE);
          obj->__isset.fieldE = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &obj->fieldF);
          obj->__isset.fieldF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::read(iprot, &obj->fieldG);
          obj->__isset.fieldG = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct2_serializedSize(Protocol_ const* prot_, const struct2* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct2");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &obj->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &obj->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSize(prot_, &obj->fieldG);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct2_serializedSizeZC(Protocol_ const* prot_, const struct2* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct2");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &obj->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &obj->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(prot_, &obj->fieldG);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct2_write(Protocol_* prot_, const struct2* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct2");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(obj->fieldB);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->fieldC);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)obj->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &obj->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &obj->fieldF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::write(prot_, &obj->fieldG);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct3_read(Protocol_* iprot, struct3* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "fieldA") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldB") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "fieldC") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldD") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "fieldE") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldF") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldG") {
        fid = 7;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldH") {
        fid = 8;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "fieldI") {
        fid = 9;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldJ") {
        fid = 10;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldK") {
        fid = 11;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldL") {
        fid = 12;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "fieldM") {
        fid = 13;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldN") {
        fid = 14;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldO") {
        fid = 15;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldP") {
        fid = 16;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "fieldQ") {
        fid = 17;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "fieldR") {
        fid = 18;
        ftype = apache::thrift::protocol::T_MAP;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->fieldA);
          obj->__isset.fieldA = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->fieldB);
          obj->__isset.fieldB = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast282;
          xfer += iprot->readI32(ecast282);
          obj->fieldC = ( ::test_cpp2::cpp_reflection::enum1)ecast282;
          obj->__isset.fieldC = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast283;
          xfer += iprot->readI32(ecast283);
          obj->fieldD = ( ::test_cpp2::cpp_reflection::enum2)ecast283;
          obj->__isset.fieldD = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::read(iprot, &obj->fieldE);
          obj->__isset.fieldE = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &obj->fieldF);
          obj->__isset.fieldF = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::read(iprot, &obj->fieldG);
          obj->__isset.fieldG = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::read(iprot, &obj->fieldH);
          obj->__isset.fieldH = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->fieldI = std::vector<int32_t>();
          uint32_t _size284;
          apache::thrift::protocol::TType _etype287;
          xfer += iprot->readListBegin(_etype287, _size284);
          uint32_t _i288;
          if (_size284 == std::numeric_limits<uint32_t>::max()) {
            for (_i288 = 0; iprot->peekList(); _i288++) {
              obj->fieldI.resize(_i288 + 1);
              xfer += iprot->readI32(obj->fieldI[_i288]);
            }
          }
          else {
            obj->fieldI.resize(_size284);
            for (_i288 = 0; _i288 < _size284; ++_i288) {
              xfer += iprot->readI32(obj->fieldI[_i288]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.fieldI = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->fieldJ = std::vector<std::string>();
          uint32_t _size289;
          apache::thrift::protocol::TType _etype292;
          xfer += iprot->readListBegin(_etype292, _size289);
          uint32_t _i293;
          if (_size289 == std::numeric_limits<uint32_t>::max()) {
            for (_i293 = 0; iprot->peekList(); _i293++) {
              obj->fieldJ.resize(_i293 + 1);
              xfer += iprot->readString(obj->fieldJ[_i293]);
            }
          }
          else {
            obj->fieldJ.resize(_size289);
            for (_i293 = 0; _i293 < _size289; ++_i293) {
              xfer += iprot->readString(obj->fieldJ[_i293]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.fieldJ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->fieldK = std::vector<std::string>();
          uint32_t _size294;
          apache::thrift::protocol::TType _etype297;
          xfer += iprot->readListBegin(_etype297, _size294);
          uint32_t _i298;
          if (_size294 == std::numeric_limits<uint32_t>::max()) {
            for (_i298 = 0; iprot->peekList(); _i298++) {
              obj->fieldK.resize(_i298 + 1);
              xfer += iprot->readString(obj->fieldK[_i298]);
            }
          }
          else {
            obj->fieldK.resize(_size294);
            for (_i298 = 0; _i298 < _size294; ++_i298) {
              xfer += iprot->readString(obj->fieldK[_i298]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.fieldK = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          obj->fieldL = std::vector< ::test_cpp2::cpp_reflection::structA>();
          uint32_t _size299;
          apache::thrift::protocol::TType _etype302;
          xfer += iprot->readListBegin(_etype302, _size299);
          uint32_t _i303;
          if (_size299 == std::numeric_limits<uint32_t>::max()) {
            for (_i303 = 0; iprot->peekList(); _i303++) {
              obj->fieldL.resize(_i303 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->fieldL[_i303]);
            }
          }
          else {
            obj->fieldL.resize(_size299);
            for (_i303 = 0; _i303 < _size299; ++_i303) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->fieldL[_i303]);
            }
          }
          xfer += iprot->readListEnd();
          obj->__isset.fieldL = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->fieldM = std::set<int32_t>();
          uint32_t _size304;
          apache::thrift::protocol::TType _etype307;
          xfer += iprot->readSetBegin(_etype307, _size304);
          uint32_t _i308;
          if (_size304 == std::numeric_limits<uint32_t>::max()) {
            for (_i308 = 0; iprot->peekSet(); _i308++) {
              int32_t _elem309;
              xfer += iprot->readI32(_elem309);
              obj->fieldM.insert(std::move(_elem309));
            }
          }
          else {
            for (_i308 = 0; _i308 < _size304; ++_i308) {
              int32_t _elem310;
              xfer += iprot->readI32(_elem310);
              obj->fieldM.insert(std::move(_elem310));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.fieldM = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->fieldN = std::set<std::string>();
          uint32_t _size311;
          apache::thrift::protocol::TType _etype314;
          xfer += iprot->readSetBegin(_etype314, _size311);
          uint32_t _i315;
          if (_size311 == std::numeric_limits<uint32_t>::max()) {
            for (_i315 = 0; iprot->peekSet(); _i315++) {
              std::string _elem316;
              xfer += iprot->readString(_elem316);
              obj->fieldN.insert(std::move(_elem316));
            }
          }
          else {
            for (_i315 = 0; _i315 < _size311; ++_i315) {
              std::string _elem317;
              xfer += iprot->readString(_elem317);
              obj->fieldN.insert(std::move(_elem317));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.fieldN = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->fieldO = std::set<std::string>();
          uint32_t _size318;
          apache::thrift::protocol::TType _etype321;
          xfer += iprot->readSetBegin(_etype321, _size318);
          uint32_t _i322;
          if (_size318 == std::numeric_limits<uint32_t>::max()) {
            for (_i322 = 0; iprot->peekSet(); _i322++) {
              std::string _elem323;
              xfer += iprot->readString(_elem323);
              obj->fieldO.insert(std::move(_elem323));
            }
          }
          else {
            for (_i322 = 0; _i322 < _size318; ++_i322) {
              std::string _elem324;
              xfer += iprot->readString(_elem324);
              obj->fieldO.insert(std::move(_elem324));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.fieldO = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          obj->fieldP = std::set< ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size325;
          apache::thrift::protocol::TType _etype328;
          xfer += iprot->readSetBegin(_etype328, _size325);
          uint32_t _i329;
          if (_size325 == std::numeric_limits<uint32_t>::max()) {
            for (_i329 = 0; iprot->peekSet(); _i329++) {
               ::test_cpp2::cpp_reflection::structB _elem330;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem330);
              obj->fieldP.insert(std::move(_elem330));
            }
          }
          else {
            for (_i329 = 0; _i329 < _size325; ++_i329) {
               ::test_cpp2::cpp_reflection::structB _elem331;
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_elem331);
              obj->fieldP.insert(std::move(_elem331));
            }
          }
          xfer += iprot->readSetEnd();
          obj->__isset.fieldP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->fieldQ = std::map<std::string,  ::test_cpp2::cpp_reflection::structA>();
          uint32_t _size332;
          apache::thrift::protocol::TType _ktype333;
          apache::thrift::protocol::TType _vtype334;
          xfer += iprot->readMapBegin(_ktype333, _vtype334, _size332);
          uint32_t _i336;
          if (_size332 == std::numeric_limits<uint32_t>::max()) {
            for (_i336 = 0; iprot->peekMap(); _i336++) {
              std::string _key337;
              xfer += iprot->readString(_key337);
               ::test_cpp2::cpp_reflection::structA& _val338 = obj->fieldQ[std::move(_key337)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_val338);
            }
          }
          else {
            auto const _kreader339 = [&xfer, &iprot](auto& _key341) {
              xfer += iprot->readString(_key341);
            }
            ;
            auto const _vreader340 = [&xfer, &iprot](auto& _val342) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &_val342);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->fieldQ, _size332, _kreader339, _vreader340);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.fieldQ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          obj->fieldR = std::map<std::string,  ::test_cpp2::cpp_reflection::structB>();
          uint32_t _size343;
          apache::thrift::protocol::TType _ktype344;
          apache::thrift::protocol::TType _vtype345;
          xfer += iprot->readMapBegin(_ktype344, _vtype345, _size343);
          uint32_t _i347;
          if (_size343 == std::numeric_limits<uint32_t>::max()) {
            for (_i347 = 0; iprot->peekMap(); _i347++) {
              std::string _key348;
              xfer += iprot->readString(_key348);
               ::test_cpp2::cpp_reflection::structB& _val349 = obj->fieldR[std::move(_key348)];
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val349);
            }
          }
          else {
            auto const _kreader350 = [&xfer, &iprot](auto& _key352) {
              xfer += iprot->readString(_key352);
            }
            ;
            auto const _vreader351 = [&xfer, &iprot](auto& _val353) {
              xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &_val353);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(obj->fieldR, _size343, _kreader350, _vreader351);
          }
          xfer += iprot->readMapEnd();
          obj->__isset.fieldR = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct3_serializedSize(Protocol_ const* prot_, const struct3* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct3");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSize(prot_, &obj->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &obj->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSize(prot_, &obj->fieldG);
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSize(prot_, &obj->fieldH);
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->fieldI.size());
  for (auto _iter354 = obj->fieldI.begin(); _iter354 != obj->fieldI.end(); ++_iter354) {
    xfer += prot_->serializedSizeI32((*_iter354));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, obj->fieldJ.size());
  for (auto _iter355 = obj->fieldJ.begin(); _iter355 != obj->fieldJ.end(); ++_iter355) {
    xfer += prot_->serializedSizeString((*_iter355));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, obj->fieldK.size());
  for (auto _iter356 = obj->fieldK.begin(); _iter356 != obj->fieldK.end(); ++_iter356) {
    xfer += prot_->serializedSizeString((*_iter356));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, obj->fieldL.size());
  for (auto _iter357 = obj->fieldL.begin(); _iter357 != obj->fieldL.end(); ++_iter357) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &(*_iter357));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->fieldM.size());
  for (auto _iter358 = obj->fieldM.begin(); _iter358 != obj->fieldM.end(); ++_iter358) {
    xfer += prot_->serializedSizeI32((*_iter358));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldN.size());
  for (auto _iter359 = obj->fieldN.begin(); _iter359 != obj->fieldN.end(); ++_iter359) {
    xfer += prot_->serializedSizeString((*_iter359));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldO.size());
  for (auto _iter360 = obj->fieldO.begin(); _iter360 != obj->fieldO.end(); ++_iter360) {
    xfer += prot_->serializedSizeString((*_iter360));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, obj->fieldP.size());
  for (auto _iter361 = obj->fieldP.begin(); _iter361 != obj->fieldP.end(); ++_iter361) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &(*_iter361));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldQ.size());
  for (auto _iter362 = obj->fieldQ.begin(); _iter362 != obj->fieldQ.end(); ++_iter362) {
    xfer += prot_->serializedSizeString(_iter362->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &_iter362->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldR.size());
  for (auto _iter363 = obj->fieldR.begin(); _iter363 != obj->fieldR.end(); ++_iter363) {
    xfer += prot_->serializedSizeString(_iter363->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &_iter363->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct3_serializedSizeZC(Protocol_ const* prot_, const struct3* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct3");
  xfer += prot_->serializedFieldSize("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->fieldA);
  xfer += prot_->serializedFieldSize("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->serializedSizeString(obj->fieldB);
  xfer += prot_->serializedFieldSize("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldC);
  xfer += prot_->serializedFieldSize("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32((int32_t)obj->fieldD);
  xfer += prot_->serializedFieldSize("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::serializedSizeZC(prot_, &obj->fieldE);
  xfer += prot_->serializedFieldSize("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &obj->fieldF);
  xfer += prot_->serializedFieldSize("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::serializedSizeZC(prot_, &obj->fieldG);
  xfer += prot_->serializedFieldSize("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::serializedSizeZC(prot_, &obj->fieldH);
  xfer += prot_->serializedFieldSize("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, obj->fieldI.size());
  for (auto _iter364 = obj->fieldI.begin(); _iter364 != obj->fieldI.end(); ++_iter364) {
    xfer += prot_->serializedSizeI32((*_iter364));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, obj->fieldJ.size());
  for (auto _iter365 = obj->fieldJ.begin(); _iter365 != obj->fieldJ.end(); ++_iter365) {
    xfer += prot_->serializedSizeString((*_iter365));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRING, obj->fieldK.size());
  for (auto _iter366 = obj->fieldK.begin(); _iter366 != obj->fieldK.end(); ++_iter366) {
    xfer += prot_->serializedSizeString((*_iter366));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, obj->fieldL.size());
  for (auto _iter367 = obj->fieldL.begin(); _iter367 != obj->fieldL.end(); ++_iter367) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &(*_iter367));
  }
  xfer += prot_->serializedSizeListEnd();
  xfer += prot_->serializedFieldSize("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, obj->fieldM.size());
  for (auto _iter368 = obj->fieldM.begin(); _iter368 != obj->fieldM.end(); ++_iter368) {
    xfer += prot_->serializedSizeI32((*_iter368));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldN.size());
  for (auto _iter369 = obj->fieldN.begin(); _iter369 != obj->fieldN.end(); ++_iter369) {
    xfer += prot_->serializedSizeString((*_iter369));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldO.size());
  for (auto _iter370 = obj->fieldO.begin(); _iter370 != obj->fieldO.end(); ++_iter370) {
    xfer += prot_->serializedSizeString((*_iter370));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_STRUCT, obj->fieldP.size());
  for (auto _iter371 = obj->fieldP.begin(); _iter371 != obj->fieldP.end(); ++_iter371) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &(*_iter371));
  }
  xfer += prot_->serializedSizeSetEnd();
  xfer += prot_->serializedFieldSize("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldQ.size());
  for (auto _iter372 = obj->fieldQ.begin(); _iter372 != obj->fieldQ.end(); ++_iter372) {
    xfer += prot_->serializedSizeString(_iter372->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &_iter372->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedFieldSize("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldR.size());
  for (auto _iter373 = obj->fieldR.begin(); _iter373 != obj->fieldR.end(); ++_iter373) {
    xfer += prot_->serializedSizeString(_iter373->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &_iter373->second);
  }
  xfer += prot_->serializedSizeMapEnd();
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct3_write(Protocol_* prot_, const struct3* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct3");
  xfer += prot_->writeFieldBegin("fieldA", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->fieldA);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldB", apache::thrift::protocol::T_STRING, 2);
  xfer += prot_->writeString(obj->fieldB);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldC", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->fieldC);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldD", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32((int32_t)obj->fieldD);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldE", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union1>::write(prot_, &obj->fieldE);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldF", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &obj->fieldF);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldG", apache::thrift::protocol::T_STRUCT, 7);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::struct1>::write(prot_, &obj->fieldG);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldH", apache::thrift::protocol::T_STRUCT, 8);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::union2>::write(prot_, &obj->fieldH);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldI", apache::thrift::protocol::T_LIST, 9);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, obj->fieldI.size());
  for (auto _iter374 = obj->fieldI.begin(); _iter374 != obj->fieldI.end(); ++_iter374) {
    xfer += prot_->writeI32((*_iter374));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldJ", apache::thrift::protocol::T_LIST, 10);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, obj->fieldJ.size());
  for (auto _iter375 = obj->fieldJ.begin(); _iter375 != obj->fieldJ.end(); ++_iter375) {
    xfer += prot_->writeString((*_iter375));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldK", apache::thrift::protocol::T_LIST, 11);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRING, obj->fieldK.size());
  for (auto _iter376 = obj->fieldK.begin(); _iter376 != obj->fieldK.end(); ++_iter376) {
    xfer += prot_->writeString((*_iter376));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldL", apache::thrift::protocol::T_LIST, 12);
  xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, obj->fieldL.size());
  for (auto _iter377 = obj->fieldL.begin(); _iter377 != obj->fieldL.end(); ++_iter377) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &(*_iter377));
  }
  xfer += prot_->writeListEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldM", apache::thrift::protocol::T_SET, 13);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, obj->fieldM.size());
  for (auto _iter378 = obj->fieldM.begin(); _iter378 != obj->fieldM.end(); ++_iter378) {
    xfer += prot_->writeI32((*_iter378));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldN", apache::thrift::protocol::T_SET, 14);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldN.size());
  for (auto _iter379 = obj->fieldN.begin(); _iter379 != obj->fieldN.end(); ++_iter379) {
    xfer += prot_->writeString((*_iter379));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldO", apache::thrift::protocol::T_SET, 15);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRING, obj->fieldO.size());
  for (auto _iter380 = obj->fieldO.begin(); _iter380 != obj->fieldO.end(); ++_iter380) {
    xfer += prot_->writeString((*_iter380));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldP", apache::thrift::protocol::T_SET, 16);
  xfer += prot_->writeSetBegin(apache::thrift::protocol::T_STRUCT, obj->fieldP.size());
  for (auto _iter381 = obj->fieldP.begin(); _iter381 != obj->fieldP.end(); ++_iter381) {
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &(*_iter381));
  }
  xfer += prot_->writeSetEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldQ", apache::thrift::protocol::T_MAP, 17);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldQ.size());
  for (auto _iter382 = obj->fieldQ.begin(); _iter382 != obj->fieldQ.end(); ++_iter382) {
    xfer += prot_->writeString(_iter382->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &_iter382->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("fieldR", apache::thrift::protocol::T_MAP, 18);
  xfer += prot_->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRUCT, obj->fieldR.size());
  for (auto _iter383 = obj->fieldR.begin(); _iter383 != obj->fieldR.end(); ++_iter383) {
    xfer += prot_->writeString(_iter383->first);
    xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &_iter383->second);
  }
  xfer += prot_->writeMapEnd();
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct4_read(Protocol_* iprot, struct4* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "field0") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field1") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "field2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field3") {
        fid = 6;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->field0);
          isset_field0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->field1);
          obj->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast384;
          xfer += iprot->readI32(ecast384);
          obj->field2 = ( ::test_cpp2::cpp_reflection::enum1)ecast384;
          obj->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->field3);
          obj->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_field0) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'field0' was not found in serialized data! Struct: struct4");
  }
  return xfer;
}

template <class Protocol_>
uint32_t struct4_serializedSize(Protocol_ const* prot_, const struct4* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct4");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &obj->field3);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct4_serializedSizeZC(Protocol_ const* prot_, const struct4* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct4");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &obj->field3);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct4_write(Protocol_* prot_, const struct4* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct4");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->field0);
  xfer += prot_->writeFieldEnd();
  if (obj->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(obj->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 6);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &obj->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct5_read(Protocol_* iprot, struct5* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_field0 = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "field0") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field1") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
      else if (fname == "field2") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "field3") {
        fid = 4;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "field4") {
        fid = 5;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->field0);
          isset_field0 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(obj->field1);
          obj->__isset.field1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast385;
          xfer += iprot->readI32(ecast385);
          obj->field2 = ( ::test_cpp2::cpp_reflection::enum1)ecast385;
          obj->__isset.field2 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::read(iprot, &obj->field3);
          obj->__isset.field3 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::read(iprot, &obj->field4);
          obj->__isset.field4 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_field0) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'field0' was not found in serialized data! Struct: struct5");
  }
  return xfer;
}

template <class Protocol_>
uint32_t struct5_serializedSize(Protocol_ const* prot_, const struct5* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct5");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSize(prot_, &obj->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSize(prot_, &obj->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct5_serializedSizeZC(Protocol_ const* prot_, const struct5* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct5");
  xfer += prot_->serializedFieldSize("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->field0);
  if (obj->__isset.field1) {
    xfer += prot_->serializedFieldSize("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->serializedSizeString(obj->field1);
  }
  xfer += prot_->serializedFieldSize("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32((int32_t)obj->field2);
  xfer += prot_->serializedFieldSize("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::serializedSizeZC(prot_, &obj->field3);
  xfer += prot_->serializedFieldSize("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::serializedSizeZC(prot_, &obj->field4);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct5_write(Protocol_* prot_, const struct5* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct5");
  xfer += prot_->writeFieldBegin("field0", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->field0);
  xfer += prot_->writeFieldEnd();
  if (obj->__isset.field1) {
    xfer += prot_->writeFieldBegin("field1", apache::thrift::protocol::T_STRING, 2);
    xfer += prot_->writeString(obj->field1);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("field2", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32((int32_t)obj->field2);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field3", apache::thrift::protocol::T_STRUCT, 4);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structA>::write(prot_, &obj->field3);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("field4", apache::thrift::protocol::T_STRUCT, 5);
  xfer += ::apache::thrift::Cpp2Ops<  ::test_cpp2::cpp_reflection::structB>::write(prot_, &obj->field4);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct_binary_read(Protocol_* iprot, struct_binary* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "bi") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(obj->bi);
          obj->__isset.bi = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct_binary_serializedSize(Protocol_ const* prot_, const struct_binary* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_binary");
  xfer += prot_->serializedFieldSize("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeBinary(obj->bi);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_binary_serializedSizeZC(Protocol_ const* prot_, const struct_binary* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_binary");
  xfer += prot_->serializedFieldSize("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->serializedSizeZCBinary(obj->bi);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_binary_write(Protocol_* prot_, const struct_binary* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct_binary");
  xfer += prot_->writeFieldBegin("bi", apache::thrift::protocol::T_STRING, 1);
  xfer += prot_->writeBinary(obj->bi);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t annotated_read(Protocol_* iprot, annotated* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "a") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->a);
          obj->__isset.a = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t annotated_serializedSize(Protocol_ const* prot_, const annotated* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("annotated");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t annotated_serializedSizeZC(Protocol_ const* prot_, const annotated* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("annotated");
  xfer += prot_->serializedFieldSize("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->a);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t annotated_write(Protocol_* prot_, const annotated* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("annotated");
  xfer += prot_->writeFieldBegin("a", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->a);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t union_with_special_names_read(Protocol_* iprot, union_with_special_names* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    obj->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "get") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "getter") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "lists") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "maps") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "name") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "name_to_value") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "names") {
        fid = 7;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "prefix_tree") {
        fid = 8;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "sets") {
        fid = 9;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "setter") {
        fid = 10;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "str") {
        fid = 11;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "strings") {
        fid = 12;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "type") {
        fid = 13;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value") {
        fid = 14;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value_to_name") {
        fid = 15;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "values") {
        fid = 16;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "id") {
        fid = 17;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ids") {
        fid = 18;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "descriptor") {
        fid = 19;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "descriptors") {
        fid = 20;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "key") {
        fid = 21;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "keys") {
        fid = 22;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "annotation") {
        fid = 23;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "annotations") {
        fid = 24;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "member") {
        fid = 25;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "members") {
        fid = 26;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_get();
          xfer += iprot->readI32(obj->mutable_get());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_getter();
          xfer += iprot->readI32(obj->mutable_getter());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_lists();
          xfer += iprot->readI32(obj->mutable_lists());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_maps();
          xfer += iprot->readI32(obj->mutable_maps());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_name();
          xfer += iprot->readI32(obj->mutable_name());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_name_to_value();
          xfer += iprot->readI32(obj->mutable_name_to_value());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_names();
          xfer += iprot->readI32(obj->mutable_names());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_prefix_tree();
          xfer += iprot->readI32(obj->mutable_prefix_tree());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_sets();
          xfer += iprot->readI32(obj->mutable_sets());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_setter();
          xfer += iprot->readI32(obj->mutable_setter());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_str();
          xfer += iprot->readI32(obj->mutable_str());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_strings();
          xfer += iprot->readI32(obj->mutable_strings());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_type();
          xfer += iprot->readI32(obj->mutable_type());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_value();
          xfer += iprot->readI32(obj->mutable_value());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_value_to_name();
          xfer += iprot->readI32(obj->mutable_value_to_name());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_values();
          xfer += iprot->readI32(obj->mutable_values());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_id();
          xfer += iprot->readI32(obj->mutable_id());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_ids();
          xfer += iprot->readI32(obj->mutable_ids());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 19:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_descriptor();
          xfer += iprot->readI32(obj->mutable_descriptor());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 20:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_descriptors();
          xfer += iprot->readI32(obj->mutable_descriptors());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 21:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_key();
          xfer += iprot->readI32(obj->mutable_key());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 22:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_keys();
          xfer += iprot->readI32(obj->mutable_keys());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 23:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_annotation();
          xfer += iprot->readI32(obj->mutable_annotation());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 24:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_annotations();
          xfer += iprot->readI32(obj->mutable_annotations());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 25:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_member();
          xfer += iprot->readI32(obj->mutable_member());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 26:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          obj->set_members();
          xfer += iprot->readI32(obj->mutable_members());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t union_with_special_names_serializedSize(Protocol_ const* prot_, const union_with_special_names* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union_with_special_names");
  switch(obj->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_get());
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->serializedSizeI32(obj->get_getter());
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->serializedSizeI32(obj->get_lists());
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32(obj->get_maps());
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->serializedSizeI32(obj->get_name());
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->serializedSizeI32(obj->get_name_to_value());
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->serializedSizeI32(obj->get_names());
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->serializedSizeI32(obj->get_prefix_tree());
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->serializedSizeI32(obj->get_sets());
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->serializedSizeI32(obj->get_setter());
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->serializedSizeI32(obj->get_str());
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->serializedSizeI32(obj->get_strings());
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->serializedSizeI32(obj->get_type());
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->serializedSizeI32(obj->get_value());
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->serializedSizeI32(obj->get_value_to_name());
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->serializedSizeI32(obj->get_values());
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->serializedSizeI32(obj->get_id());
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->serializedSizeI32(obj->get_ids());
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->serializedSizeI32(obj->get_descriptor());
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->serializedSizeI32(obj->get_descriptors());
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->serializedSizeI32(obj->get_key());
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->serializedSizeI32(obj->get_keys());
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->serializedSizeI32(obj->get_annotation());
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->serializedSizeI32(obj->get_annotations());
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->serializedSizeI32(obj->get_member());
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->serializedSizeI32(obj->get_members());
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union_with_special_names_serializedSizeZC(Protocol_ const* prot_, const union_with_special_names* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("union_with_special_names");
  switch(obj->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(obj->get_get());
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->serializedSizeI32(obj->get_getter());
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->serializedSizeI32(obj->get_lists());
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->serializedSizeI32(obj->get_maps());
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->serializedSizeI32(obj->get_name());
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->serializedSizeI32(obj->get_name_to_value());
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->serializedSizeI32(obj->get_names());
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->serializedSizeI32(obj->get_prefix_tree());
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->serializedSizeI32(obj->get_sets());
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->serializedSizeI32(obj->get_setter());
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->serializedSizeI32(obj->get_str());
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->serializedSizeI32(obj->get_strings());
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->serializedSizeI32(obj->get_type());
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->serializedSizeI32(obj->get_value());
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->serializedSizeI32(obj->get_value_to_name());
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->serializedSizeI32(obj->get_values());
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->serializedSizeI32(obj->get_id());
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->serializedSizeI32(obj->get_ids());
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->serializedSizeI32(obj->get_descriptor());
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->serializedSizeI32(obj->get_descriptors());
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->serializedSizeI32(obj->get_key());
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->serializedSizeI32(obj->get_keys());
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->serializedSizeI32(obj->get_annotation());
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->serializedSizeI32(obj->get_annotations());
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->serializedSizeI32(obj->get_member());
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->serializedSizeI32(obj->get_members());
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t union_with_special_names_write(Protocol_* prot_, const union_with_special_names* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("union_with_special_names");
  switch(obj->getType()) {
    case union_with_special_names::Type::get:
    {
      xfer += prot_->writeFieldBegin("get", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(obj->get_get());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::getter:
    {
      xfer += prot_->writeFieldBegin("getter", apache::thrift::protocol::T_I32, 2);
      xfer += prot_->writeI32(obj->get_getter());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::lists:
    {
      xfer += prot_->writeFieldBegin("lists", apache::thrift::protocol::T_I32, 3);
      xfer += prot_->writeI32(obj->get_lists());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::maps:
    {
      xfer += prot_->writeFieldBegin("maps", apache::thrift::protocol::T_I32, 4);
      xfer += prot_->writeI32(obj->get_maps());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::name:
    {
      xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_I32, 5);
      xfer += prot_->writeI32(obj->get_name());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::name_to_value:
    {
      xfer += prot_->writeFieldBegin("name_to_value", apache::thrift::protocol::T_I32, 6);
      xfer += prot_->writeI32(obj->get_name_to_value());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::names:
    {
      xfer += prot_->writeFieldBegin("names", apache::thrift::protocol::T_I32, 7);
      xfer += prot_->writeI32(obj->get_names());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::prefix_tree:
    {
      xfer += prot_->writeFieldBegin("prefix_tree", apache::thrift::protocol::T_I32, 8);
      xfer += prot_->writeI32(obj->get_prefix_tree());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::sets:
    {
      xfer += prot_->writeFieldBegin("sets", apache::thrift::protocol::T_I32, 9);
      xfer += prot_->writeI32(obj->get_sets());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::setter:
    {
      xfer += prot_->writeFieldBegin("setter", apache::thrift::protocol::T_I32, 10);
      xfer += prot_->writeI32(obj->get_setter());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::str:
    {
      xfer += prot_->writeFieldBegin("str", apache::thrift::protocol::T_I32, 11);
      xfer += prot_->writeI32(obj->get_str());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::strings:
    {
      xfer += prot_->writeFieldBegin("strings", apache::thrift::protocol::T_I32, 12);
      xfer += prot_->writeI32(obj->get_strings());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::type:
    {
      xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I32, 13);
      xfer += prot_->writeI32(obj->get_type());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::value:
    {
      xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I32, 14);
      xfer += prot_->writeI32(obj->get_value());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::value_to_name:
    {
      xfer += prot_->writeFieldBegin("value_to_name", apache::thrift::protocol::T_I32, 15);
      xfer += prot_->writeI32(obj->get_value_to_name());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::values:
    {
      xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_I32, 16);
      xfer += prot_->writeI32(obj->get_values());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::id:
    {
      xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I32, 17);
      xfer += prot_->writeI32(obj->get_id());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::ids:
    {
      xfer += prot_->writeFieldBegin("ids", apache::thrift::protocol::T_I32, 18);
      xfer += prot_->writeI32(obj->get_ids());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::descriptor:
    {
      xfer += prot_->writeFieldBegin("descriptor", apache::thrift::protocol::T_I32, 19);
      xfer += prot_->writeI32(obj->get_descriptor());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::descriptors:
    {
      xfer += prot_->writeFieldBegin("descriptors", apache::thrift::protocol::T_I32, 20);
      xfer += prot_->writeI32(obj->get_descriptors());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::key:
    {
      xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_I32, 21);
      xfer += prot_->writeI32(obj->get_key());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::keys:
    {
      xfer += prot_->writeFieldBegin("keys", apache::thrift::protocol::T_I32, 22);
      xfer += prot_->writeI32(obj->get_keys());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::annotation:
    {
      xfer += prot_->writeFieldBegin("annotation", apache::thrift::protocol::T_I32, 23);
      xfer += prot_->writeI32(obj->get_annotation());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::annotations:
    {
      xfer += prot_->writeFieldBegin("annotations", apache::thrift::protocol::T_I32, 24);
      xfer += prot_->writeI32(obj->get_annotations());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::member:
    {
      xfer += prot_->writeFieldBegin("member", apache::thrift::protocol::T_I32, 25);
      xfer += prot_->writeI32(obj->get_member());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::members:
    {
      xfer += prot_->writeFieldBegin("members", apache::thrift::protocol::T_I32, 26);
      xfer += prot_->writeI32(obj->get_members());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case union_with_special_names::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

template <class Protocol_>
uint32_t struct_with_special_names_read(Protocol_* iprot, struct_with_special_names* obj) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "get") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "getter") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "lists") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "maps") {
        fid = 4;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "name") {
        fid = 5;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "name_to_value") {
        fid = 6;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "names") {
        fid = 7;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "prefix_tree") {
        fid = 8;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "sets") {
        fid = 9;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "setter") {
        fid = 10;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "str") {
        fid = 11;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "strings") {
        fid = 12;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "type") {
        fid = 13;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value") {
        fid = 14;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "value_to_name") {
        fid = 15;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "values") {
        fid = 16;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "id") {
        fid = 17;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "ids") {
        fid = 18;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "descriptor") {
        fid = 19;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "descriptors") {
        fid = 20;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "key") {
        fid = 21;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "keys") {
        fid = 22;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "annotation") {
        fid = 23;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "annotations") {
        fid = 24;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "member") {
        fid = 25;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "members") {
        fid = 26;
        ftype = apache::thrift::protocol::T_I32;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->get);
          obj->__isset.get = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->getter);
          obj->__isset.getter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->lists);
          obj->__isset.lists = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->maps);
          obj->__isset.maps = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->name);
          obj->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->name_to_value);
          obj->__isset.name_to_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->names);
          obj->__isset.names = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->prefix_tree);
          obj->__isset.prefix_tree = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 9:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->sets);
          obj->__isset.sets = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 10:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->setter);
          obj->__isset.setter = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 11:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->str);
          obj->__isset.str = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 12:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->strings);
          obj->__isset.strings = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 13:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->type);
          obj->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 14:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->value);
          obj->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 15:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->value_to_name);
          obj->__isset.value_to_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 16:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->values);
          obj->__isset.values = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 17:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->id);
          obj->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 18:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->ids);
          obj->__isset.ids = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 19:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->descriptor);
          obj->__isset.descriptor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 20:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->descriptors);
          obj->__isset.descriptors = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 21:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->key);
          obj->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 22:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->keys);
          obj->__isset.keys = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 23:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->annotation);
          obj->__isset.annotation = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 24:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->annotations);
          obj->__isset.annotations = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 25:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->member);
          obj->__isset.member = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 26:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(obj->members);
          obj->__isset.members = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t struct_with_special_names_serializedSize(Protocol_ const* prot_, const struct_with_special_names* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_special_names");
  xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->get);
  xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(obj->getter);
  xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(obj->lists);
  xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(obj->maps);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(obj->name);
  xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(obj->name_to_value);
  xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->serializedSizeI32(obj->names);
  xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(obj->prefix_tree);
  xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->serializedSizeI32(obj->sets);
  xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(obj->setter);
  xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(obj->str);
  xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->serializedSizeI32(obj->strings);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(obj->type);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(obj->value);
  xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(obj->value_to_name);
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(obj->values);
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(obj->id);
  xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(obj->ids);
  xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(obj->descriptor);
  xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(obj->descriptors);
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(obj->key);
  xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(obj->keys);
  xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->serializedSizeI32(obj->annotation);
  xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->serializedSizeI32(obj->annotations);
  xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(obj->member);
  xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->serializedSizeI32(obj->members);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_special_names_serializedSizeZC(Protocol_ const* prot_, const struct_with_special_names* obj) {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("struct_with_special_names");
  xfer += prot_->serializedFieldSize("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->serializedSizeI32(obj->get);
  xfer += prot_->serializedFieldSize("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->serializedSizeI32(obj->getter);
  xfer += prot_->serializedFieldSize("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->serializedSizeI32(obj->lists);
  xfer += prot_->serializedFieldSize("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->serializedSizeI32(obj->maps);
  xfer += prot_->serializedFieldSize("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->serializedSizeI32(obj->name);
  xfer += prot_->serializedFieldSize("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->serializedSizeI32(obj->name_to_value);
  xfer += prot_->serializedFieldSize("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->serializedSizeI32(obj->names);
  xfer += prot_->serializedFieldSize("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->serializedSizeI32(obj->prefix_tree);
  xfer += prot_->serializedFieldSize("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->serializedSizeI32(obj->sets);
  xfer += prot_->serializedFieldSize("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->serializedSizeI32(obj->setter);
  xfer += prot_->serializedFieldSize("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->serializedSizeI32(obj->str);
  xfer += prot_->serializedFieldSize("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->serializedSizeI32(obj->strings);
  xfer += prot_->serializedFieldSize("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->serializedSizeI32(obj->type);
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->serializedSizeI32(obj->value);
  xfer += prot_->serializedFieldSize("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->serializedSizeI32(obj->value_to_name);
  xfer += prot_->serializedFieldSize("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->serializedSizeI32(obj->values);
  xfer += prot_->serializedFieldSize("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->serializedSizeI32(obj->id);
  xfer += prot_->serializedFieldSize("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->serializedSizeI32(obj->ids);
  xfer += prot_->serializedFieldSize("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->serializedSizeI32(obj->descriptor);
  xfer += prot_->serializedFieldSize("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->serializedSizeI32(obj->descriptors);
  xfer += prot_->serializedFieldSize("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->serializedSizeI32(obj->key);
  xfer += prot_->serializedFieldSize("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->serializedSizeI32(obj->keys);
  xfer += prot_->serializedFieldSize("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->serializedSizeI32(obj->annotation);
  xfer += prot_->serializedFieldSize("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->serializedSizeI32(obj->annotations);
  xfer += prot_->serializedFieldSize("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->serializedSizeI32(obj->member);
  xfer += prot_->serializedFieldSize("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->serializedSizeI32(obj->members);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t struct_with_special_names_write(Protocol_* prot_, const struct_with_special_names* obj) {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("struct_with_special_names");
  xfer += prot_->writeFieldBegin("get", apache::thrift::protocol::T_I32, 1);
  xfer += prot_->writeI32(obj->get);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("getter", apache::thrift::protocol::T_I32, 2);
  xfer += prot_->writeI32(obj->getter);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("lists", apache::thrift::protocol::T_I32, 3);
  xfer += prot_->writeI32(obj->lists);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("maps", apache::thrift::protocol::T_I32, 4);
  xfer += prot_->writeI32(obj->maps);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name", apache::thrift::protocol::T_I32, 5);
  xfer += prot_->writeI32(obj->name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("name_to_value", apache::thrift::protocol::T_I32, 6);
  xfer += prot_->writeI32(obj->name_to_value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("names", apache::thrift::protocol::T_I32, 7);
  xfer += prot_->writeI32(obj->names);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("prefix_tree", apache::thrift::protocol::T_I32, 8);
  xfer += prot_->writeI32(obj->prefix_tree);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("sets", apache::thrift::protocol::T_I32, 9);
  xfer += prot_->writeI32(obj->sets);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("setter", apache::thrift::protocol::T_I32, 10);
  xfer += prot_->writeI32(obj->setter);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("str", apache::thrift::protocol::T_I32, 11);
  xfer += prot_->writeI32(obj->str);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("strings", apache::thrift::protocol::T_I32, 12);
  xfer += prot_->writeI32(obj->strings);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("type", apache::thrift::protocol::T_I32, 13);
  xfer += prot_->writeI32(obj->type);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I32, 14);
  xfer += prot_->writeI32(obj->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("value_to_name", apache::thrift::protocol::T_I32, 15);
  xfer += prot_->writeI32(obj->value_to_name);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("values", apache::thrift::protocol::T_I32, 16);
  xfer += prot_->writeI32(obj->values);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("id", apache::thrift::protocol::T_I32, 17);
  xfer += prot_->writeI32(obj->id);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("ids", apache::thrift::protocol::T_I32, 18);
  xfer += prot_->writeI32(obj->ids);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("descriptor", apache::thrift::protocol::T_I32, 19);
  xfer += prot_->writeI32(obj->descriptor);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("descriptors", apache::thrift::protocol::T_I32, 20);
  xfer += prot_->writeI32(obj->descriptors);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("key", apache::thrift::protocol::T_I32, 21);
  xfer += prot_->writeI32(obj->key);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("keys", apache::thrift::protocol::T_I32, 22);
  xfer += prot_->writeI32(obj->keys);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("annotation", apache::thrift::protocol::T_I32, 23);
  xfer += prot_->writeI32(obj->annotation);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("annotations", apache::thrift::protocol::T_I32, 24);
  xfer += prot_->writeI32(obj->annotations);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("member", apache::thrift::protocol::T_I32, 25);
  xfer += prot_->writeI32(obj->member);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("members", apache::thrift::protocol::T_I32, 26);
  xfer += prot_->writeI32(obj->members);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

}} // test_cpp2::cpp_reflection
namespace apache { namespace thrift {

}} // apache::thrift
namespace test_cpp2 { namespace cpp_reflection {

}} // test_cpp2::cpp_reflection
