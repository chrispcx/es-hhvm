/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef  _test_cpp1_cpp_reflection_service_with_special_names_H
#define  _test_cpp1_cpp_reflection_service_with_special_names_H

#include <thrift/lib/cpp/TDispatchProcessor.h>
#include <folly/ExceptionWrapper.h>
#include "thrift/compiler/test/fixtures/fatal-compat/gen-cpp/module_types.h"

namespace test_cpp1 { namespace cpp_reflection {

class service_with_special_namesIf {
 public:
  virtual ~service_with_special_namesIf() {}
  virtual int32_t get() = 0;
  virtual int32_t getter() = 0;
  virtual int32_t lists() = 0;
  virtual int32_t maps() = 0;
  virtual int32_t name() = 0;
  virtual int32_t name_to_value() = 0;
  virtual int32_t names() = 0;
  virtual int32_t prefix_tree() = 0;
  virtual int32_t sets() = 0;
  virtual int32_t setter() = 0;
  virtual int32_t str() = 0;
  virtual int32_t strings() = 0;
  virtual int32_t type() = 0;
  virtual int32_t value() = 0;
  virtual int32_t value_to_name() = 0;
  virtual int32_t values() = 0;
  virtual int32_t id() = 0;
  virtual int32_t ids() = 0;
  virtual int32_t descriptor() = 0;
  virtual int32_t descriptors() = 0;
  virtual int32_t key() = 0;
  virtual int32_t keys() = 0;
  virtual int32_t annotation() = 0;
  virtual int32_t annotations() = 0;
  virtual int32_t member() = 0;
  virtual int32_t members() = 0;
};

class service_with_special_namesIfFactory {
 public:
  typedef service_with_special_namesIf Handler;

  virtual ~service_with_special_namesIfFactory() {}

  virtual service_with_special_namesIf* getHandler(::apache::thrift::server::TConnectionContext* ctx) = 0;
  virtual void releaseHandler(service_with_special_namesIf* /*handler*/) = 0;
};

class service_with_special_namesIfSingletonFactory : virtual public service_with_special_namesIfFactory {
 public:
  service_with_special_namesIfSingletonFactory(const std::shared_ptr<service_with_special_namesIf>& iface) : iface_(iface) {}
  virtual ~service_with_special_namesIfSingletonFactory() {}

  virtual service_with_special_namesIf* getHandler(::apache::thrift::server::TConnectionContext*) {
    return iface_.get();
  }
  virtual void releaseHandler(service_with_special_namesIf* /*handler*/) {}

 protected:
  std::shared_ptr<service_with_special_namesIf> iface_;
};

class service_with_special_namesNull : virtual public service_with_special_namesIf {
 public:
  virtual ~service_with_special_namesNull() {}
  int32_t get() {
    int32_t _return = 0;
    return _return;
  }
  int32_t getter() {
    int32_t _return = 0;
    return _return;
  }
  int32_t lists() {
    int32_t _return = 0;
    return _return;
  }
  int32_t maps() {
    int32_t _return = 0;
    return _return;
  }
  int32_t name() {
    int32_t _return = 0;
    return _return;
  }
  int32_t name_to_value() {
    int32_t _return = 0;
    return _return;
  }
  int32_t names() {
    int32_t _return = 0;
    return _return;
  }
  int32_t prefix_tree() {
    int32_t _return = 0;
    return _return;
  }
  int32_t sets() {
    int32_t _return = 0;
    return _return;
  }
  int32_t setter() {
    int32_t _return = 0;
    return _return;
  }
  int32_t str() {
    int32_t _return = 0;
    return _return;
  }
  int32_t strings() {
    int32_t _return = 0;
    return _return;
  }
  int32_t type() {
    int32_t _return = 0;
    return _return;
  }
  int32_t value() {
    int32_t _return = 0;
    return _return;
  }
  int32_t value_to_name() {
    int32_t _return = 0;
    return _return;
  }
  int32_t values() {
    int32_t _return = 0;
    return _return;
  }
  int32_t id() {
    int32_t _return = 0;
    return _return;
  }
  int32_t ids() {
    int32_t _return = 0;
    return _return;
  }
  int32_t descriptor() {
    int32_t _return = 0;
    return _return;
  }
  int32_t descriptors() {
    int32_t _return = 0;
    return _return;
  }
  int32_t key() {
    int32_t _return = 0;
    return _return;
  }
  int32_t keys() {
    int32_t _return = 0;
    return _return;
  }
  int32_t annotation() {
    int32_t _return = 0;
    return _return;
  }
  int32_t annotations() {
    int32_t _return = 0;
    return _return;
  }
  int32_t member() {
    int32_t _return = 0;
    return _return;
  }
  int32_t members() {
    int32_t _return = 0;
    return _return;
  }
};

class service_with_special_names_get_args : public apache::thrift::TStructType<service_with_special_names_get_args> {
 public:

  static const uint64_t _reflection_id = 1373511551720987884U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_get_args() {
  }

  service_with_special_names_get_args(const service_with_special_names_get_args&) = default;
  service_with_special_names_get_args& operator=(const service_with_special_names_get_args& src)= default;
  service_with_special_names_get_args(service_with_special_names_get_args&&) = default;
  service_with_special_names_get_args& operator=(service_with_special_names_get_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_get_args() throw() {}


  bool operator == (const service_with_special_names_get_args &) const;
  bool operator != (const service_with_special_names_get_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_get_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_get_args;
void merge(const service_with_special_names_get_args& from, service_with_special_names_get_args& to);
void merge(service_with_special_names_get_args&& from, service_with_special_names_get_args& to);
class service_with_special_names_get_pargs : public apache::thrift::TStructType<service_with_special_names_get_pargs> {
 public:

  static const uint64_t _reflection_id = 6180717848238773804U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_get_pargs() = default;

  virtual ~service_with_special_names_get_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_get_pargs;
void merge(const service_with_special_names_get_pargs& from, service_with_special_names_get_pargs& to);
void merge(service_with_special_names_get_pargs&& from, service_with_special_names_get_pargs& to);
class service_with_special_names_get_presult : public apache::thrift::TStructType<service_with_special_names_get_presult> {
 public:

  static const uint64_t _reflection_id = 11646051635369598572U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_get_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_get_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_get_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_get_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_get_presult;
void merge(const service_with_special_names_get_presult& from, service_with_special_names_get_presult& to);
void merge(service_with_special_names_get_presult&& from, service_with_special_names_get_presult& to);
class service_with_special_names_getter_args : public apache::thrift::TStructType<service_with_special_names_getter_args> {
 public:

  static const uint64_t _reflection_id = 5841548007298017580U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_getter_args() {
  }

  service_with_special_names_getter_args(const service_with_special_names_getter_args&) = default;
  service_with_special_names_getter_args& operator=(const service_with_special_names_getter_args& src)= default;
  service_with_special_names_getter_args(service_with_special_names_getter_args&&) = default;
  service_with_special_names_getter_args& operator=(service_with_special_names_getter_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_getter_args() throw() {}


  bool operator == (const service_with_special_names_getter_args &) const;
  bool operator != (const service_with_special_names_getter_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_getter_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_getter_args;
void merge(const service_with_special_names_getter_args& from, service_with_special_names_getter_args& to);
void merge(service_with_special_names_getter_args&& from, service_with_special_names_getter_args& to);
class service_with_special_names_getter_pargs : public apache::thrift::TStructType<service_with_special_names_getter_pargs> {
 public:

  static const uint64_t _reflection_id = 1626803846620101004U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_getter_pargs() = default;

  virtual ~service_with_special_names_getter_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_getter_pargs;
void merge(const service_with_special_names_getter_pargs& from, service_with_special_names_getter_pargs& to);
void merge(service_with_special_names_getter_pargs&& from, service_with_special_names_getter_pargs& to);
class service_with_special_names_getter_presult : public apache::thrift::TStructType<service_with_special_names_getter_presult> {
 public:

  static const uint64_t _reflection_id = 8969449638576176396U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_getter_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_getter_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_getter_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_getter_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_getter_presult;
void merge(const service_with_special_names_getter_presult& from, service_with_special_names_getter_presult& to);
void merge(service_with_special_names_getter_presult&& from, service_with_special_names_getter_presult& to);
class service_with_special_names_lists_args : public apache::thrift::TStructType<service_with_special_names_lists_args> {
 public:

  static const uint64_t _reflection_id = 5732728134094404812U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_lists_args() {
  }

  service_with_special_names_lists_args(const service_with_special_names_lists_args&) = default;
  service_with_special_names_lists_args& operator=(const service_with_special_names_lists_args& src)= default;
  service_with_special_names_lists_args(service_with_special_names_lists_args&&) = default;
  service_with_special_names_lists_args& operator=(service_with_special_names_lists_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_lists_args() throw() {}


  bool operator == (const service_with_special_names_lists_args &) const;
  bool operator != (const service_with_special_names_lists_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_lists_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_lists_args;
void merge(const service_with_special_names_lists_args& from, service_with_special_names_lists_args& to);
void merge(service_with_special_names_lists_args&& from, service_with_special_names_lists_args& to);
class service_with_special_names_lists_pargs : public apache::thrift::TStructType<service_with_special_names_lists_pargs> {
 public:

  static const uint64_t _reflection_id = 11005640243407784812U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_lists_pargs() = default;

  virtual ~service_with_special_names_lists_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_lists_pargs;
void merge(const service_with_special_names_lists_pargs& from, service_with_special_names_lists_pargs& to);
void merge(service_with_special_names_lists_pargs&& from, service_with_special_names_lists_pargs& to);
class service_with_special_names_lists_presult : public apache::thrift::TStructType<service_with_special_names_lists_presult> {
 public:

  static const uint64_t _reflection_id = 3698312719729166668U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_lists_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_lists_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_lists_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_lists_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_lists_presult;
void merge(const service_with_special_names_lists_presult& from, service_with_special_names_lists_presult& to);
void merge(service_with_special_names_lists_presult&& from, service_with_special_names_lists_presult& to);
class service_with_special_names_maps_args : public apache::thrift::TStructType<service_with_special_names_maps_args> {
 public:

  static const uint64_t _reflection_id = 3351470906650519212U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_maps_args() {
  }

  service_with_special_names_maps_args(const service_with_special_names_maps_args&) = default;
  service_with_special_names_maps_args& operator=(const service_with_special_names_maps_args& src)= default;
  service_with_special_names_maps_args(service_with_special_names_maps_args&&) = default;
  service_with_special_names_maps_args& operator=(service_with_special_names_maps_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_maps_args() throw() {}


  bool operator == (const service_with_special_names_maps_args &) const;
  bool operator != (const service_with_special_names_maps_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_maps_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_maps_args;
void merge(const service_with_special_names_maps_args& from, service_with_special_names_maps_args& to);
void merge(service_with_special_names_maps_args&& from, service_with_special_names_maps_args& to);
class service_with_special_names_maps_pargs : public apache::thrift::TStructType<service_with_special_names_maps_pargs> {
 public:

  static const uint64_t _reflection_id = 13252849339744761324U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_maps_pargs() = default;

  virtual ~service_with_special_names_maps_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_maps_pargs;
void merge(const service_with_special_names_maps_pargs& from, service_with_special_names_maps_pargs& to);
void merge(service_with_special_names_maps_pargs&& from, service_with_special_names_maps_pargs& to);
class service_with_special_names_maps_presult : public apache::thrift::TStructType<service_with_special_names_maps_presult> {
 public:

  static const uint64_t _reflection_id = 7089921217987282892U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_maps_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_maps_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_maps_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_maps_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_maps_presult;
void merge(const service_with_special_names_maps_presult& from, service_with_special_names_maps_presult& to);
void merge(service_with_special_names_maps_presult&& from, service_with_special_names_maps_presult& to);
class service_with_special_names_name_args : public apache::thrift::TStructType<service_with_special_names_name_args> {
 public:

  static const uint64_t _reflection_id = 11922926156328519820U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_name_args() {
  }

  service_with_special_names_name_args(const service_with_special_names_name_args&) = default;
  service_with_special_names_name_args& operator=(const service_with_special_names_name_args& src)= default;
  service_with_special_names_name_args(service_with_special_names_name_args&&) = default;
  service_with_special_names_name_args& operator=(service_with_special_names_name_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_name_args() throw() {}


  bool operator == (const service_with_special_names_name_args &) const;
  bool operator != (const service_with_special_names_name_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_name_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_name_args;
void merge(const service_with_special_names_name_args& from, service_with_special_names_name_args& to);
void merge(service_with_special_names_name_args&& from, service_with_special_names_name_args& to);
class service_with_special_names_name_pargs : public apache::thrift::TStructType<service_with_special_names_name_pargs> {
 public:

  static const uint64_t _reflection_id = 8032862167142743564U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_name_pargs() = default;

  virtual ~service_with_special_names_name_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_name_pargs;
void merge(const service_with_special_names_name_pargs& from, service_with_special_names_name_pargs& to);
void merge(service_with_special_names_name_pargs&& from, service_with_special_names_name_pargs& to);
class service_with_special_names_name_presult : public apache::thrift::TStructType<service_with_special_names_name_presult> {
 public:

  static const uint64_t _reflection_id = 4476510193210978508U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_name_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_name_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_name_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_name_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_name_presult;
void merge(const service_with_special_names_name_presult& from, service_with_special_names_name_presult& to);
void merge(service_with_special_names_name_presult&& from, service_with_special_names_name_presult& to);
class service_with_special_names_name_to_value_args : public apache::thrift::TStructType<service_with_special_names_name_to_value_args> {
 public:

  static const uint64_t _reflection_id = 6155512989613449804U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_name_to_value_args() {
  }

  service_with_special_names_name_to_value_args(const service_with_special_names_name_to_value_args&) = default;
  service_with_special_names_name_to_value_args& operator=(const service_with_special_names_name_to_value_args& src)= default;
  service_with_special_names_name_to_value_args(service_with_special_names_name_to_value_args&&) = default;
  service_with_special_names_name_to_value_args& operator=(service_with_special_names_name_to_value_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_name_to_value_args() throw() {}


  bool operator == (const service_with_special_names_name_to_value_args &) const;
  bool operator != (const service_with_special_names_name_to_value_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_name_to_value_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_name_to_value_args;
void merge(const service_with_special_names_name_to_value_args& from, service_with_special_names_name_to_value_args& to);
void merge(service_with_special_names_name_to_value_args&& from, service_with_special_names_name_to_value_args& to);
class service_with_special_names_name_to_value_pargs : public apache::thrift::TStructType<service_with_special_names_name_to_value_pargs> {
 public:

  static const uint64_t _reflection_id = 8237545762925274764U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_name_to_value_pargs() = default;

  virtual ~service_with_special_names_name_to_value_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_name_to_value_pargs;
void merge(const service_with_special_names_name_to_value_pargs& from, service_with_special_names_name_to_value_pargs& to);
void merge(service_with_special_names_name_to_value_pargs&& from, service_with_special_names_name_to_value_pargs& to);
class service_with_special_names_name_to_value_presult : public apache::thrift::TStructType<service_with_special_names_name_to_value_presult> {
 public:

  static const uint64_t _reflection_id = 17212294354743603788U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_name_to_value_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_name_to_value_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_name_to_value_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_name_to_value_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_name_to_value_presult;
void merge(const service_with_special_names_name_to_value_presult& from, service_with_special_names_name_to_value_presult& to);
void merge(service_with_special_names_name_to_value_presult&& from, service_with_special_names_name_to_value_presult& to);
class service_with_special_names_names_args : public apache::thrift::TStructType<service_with_special_names_names_args> {
 public:

  static const uint64_t _reflection_id = 9756879492097671468U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_names_args() {
  }

  service_with_special_names_names_args(const service_with_special_names_names_args&) = default;
  service_with_special_names_names_args& operator=(const service_with_special_names_names_args& src)= default;
  service_with_special_names_names_args(service_with_special_names_names_args&&) = default;
  service_with_special_names_names_args& operator=(service_with_special_names_names_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_names_args() throw() {}


  bool operator == (const service_with_special_names_names_args &) const;
  bool operator != (const service_with_special_names_names_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_names_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_names_args;
void merge(const service_with_special_names_names_args& from, service_with_special_names_names_args& to);
void merge(service_with_special_names_names_args&& from, service_with_special_names_names_args& to);
class service_with_special_names_names_pargs : public apache::thrift::TStructType<service_with_special_names_names_pargs> {
 public:

  static const uint64_t _reflection_id = 10586736841908509644U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_names_pargs() = default;

  virtual ~service_with_special_names_names_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_names_pargs;
void merge(const service_with_special_names_names_pargs& from, service_with_special_names_names_pargs& to);
void merge(service_with_special_names_names_pargs&& from, service_with_special_names_names_pargs& to);
class service_with_special_names_names_presult : public apache::thrift::TStructType<service_with_special_names_names_presult> {
 public:

  static const uint64_t _reflection_id = 11207936718153437132U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_names_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_names_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_names_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_names_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_names_presult;
void merge(const service_with_special_names_names_presult& from, service_with_special_names_names_presult& to);
void merge(service_with_special_names_names_presult&& from, service_with_special_names_names_presult& to);
class service_with_special_names_prefix_tree_args : public apache::thrift::TStructType<service_with_special_names_prefix_tree_args> {
 public:

  static const uint64_t _reflection_id = 15677913871102706636U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_prefix_tree_args() {
  }

  service_with_special_names_prefix_tree_args(const service_with_special_names_prefix_tree_args&) = default;
  service_with_special_names_prefix_tree_args& operator=(const service_with_special_names_prefix_tree_args& src)= default;
  service_with_special_names_prefix_tree_args(service_with_special_names_prefix_tree_args&&) = default;
  service_with_special_names_prefix_tree_args& operator=(service_with_special_names_prefix_tree_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_prefix_tree_args() throw() {}


  bool operator == (const service_with_special_names_prefix_tree_args &) const;
  bool operator != (const service_with_special_names_prefix_tree_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_prefix_tree_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_prefix_tree_args;
void merge(const service_with_special_names_prefix_tree_args& from, service_with_special_names_prefix_tree_args& to);
void merge(service_with_special_names_prefix_tree_args&& from, service_with_special_names_prefix_tree_args& to);
class service_with_special_names_prefix_tree_pargs : public apache::thrift::TStructType<service_with_special_names_prefix_tree_pargs> {
 public:

  static const uint64_t _reflection_id = 18331187933004642700U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_prefix_tree_pargs() = default;

  virtual ~service_with_special_names_prefix_tree_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_prefix_tree_pargs;
void merge(const service_with_special_names_prefix_tree_pargs& from, service_with_special_names_prefix_tree_pargs& to);
void merge(service_with_special_names_prefix_tree_pargs&& from, service_with_special_names_prefix_tree_pargs& to);
class service_with_special_names_prefix_tree_presult : public apache::thrift::TStructType<service_with_special_names_prefix_tree_presult> {
 public:

  static const uint64_t _reflection_id = 16771581789976342828U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_prefix_tree_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_prefix_tree_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_prefix_tree_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_prefix_tree_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_prefix_tree_presult;
void merge(const service_with_special_names_prefix_tree_presult& from, service_with_special_names_prefix_tree_presult& to);
void merge(service_with_special_names_prefix_tree_presult&& from, service_with_special_names_prefix_tree_presult& to);
class service_with_special_names_sets_args : public apache::thrift::TStructType<service_with_special_names_sets_args> {
 public:

  static const uint64_t _reflection_id = 14231777332181685580U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_sets_args() {
  }

  service_with_special_names_sets_args(const service_with_special_names_sets_args&) = default;
  service_with_special_names_sets_args& operator=(const service_with_special_names_sets_args& src)= default;
  service_with_special_names_sets_args(service_with_special_names_sets_args&&) = default;
  service_with_special_names_sets_args& operator=(service_with_special_names_sets_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_sets_args() throw() {}


  bool operator == (const service_with_special_names_sets_args &) const;
  bool operator != (const service_with_special_names_sets_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_sets_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_sets_args;
void merge(const service_with_special_names_sets_args& from, service_with_special_names_sets_args& to);
void merge(service_with_special_names_sets_args&& from, service_with_special_names_sets_args& to);
class service_with_special_names_sets_pargs : public apache::thrift::TStructType<service_with_special_names_sets_pargs> {
 public:

  static const uint64_t _reflection_id = 3749180045256457292U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_sets_pargs() = default;

  virtual ~service_with_special_names_sets_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_sets_pargs;
void merge(const service_with_special_names_sets_pargs& from, service_with_special_names_sets_pargs& to);
void merge(service_with_special_names_sets_pargs&& from, service_with_special_names_sets_pargs& to);
class service_with_special_names_sets_presult : public apache::thrift::TStructType<service_with_special_names_sets_presult> {
 public:

  static const uint64_t _reflection_id = 4151785695256646572U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_sets_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_sets_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_sets_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_sets_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_sets_presult;
void merge(const service_with_special_names_sets_presult& from, service_with_special_names_sets_presult& to);
void merge(service_with_special_names_sets_presult&& from, service_with_special_names_sets_presult& to);
class service_with_special_names_setter_args : public apache::thrift::TStructType<service_with_special_names_setter_args> {
 public:

  static const uint64_t _reflection_id = 9870312273607259884U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_setter_args() {
  }

  service_with_special_names_setter_args(const service_with_special_names_setter_args&) = default;
  service_with_special_names_setter_args& operator=(const service_with_special_names_setter_args& src)= default;
  service_with_special_names_setter_args(service_with_special_names_setter_args&&) = default;
  service_with_special_names_setter_args& operator=(service_with_special_names_setter_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_setter_args() throw() {}


  bool operator == (const service_with_special_names_setter_args &) const;
  bool operator != (const service_with_special_names_setter_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_setter_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_setter_args;
void merge(const service_with_special_names_setter_args& from, service_with_special_names_setter_args& to);
void merge(service_with_special_names_setter_args&& from, service_with_special_names_setter_args& to);
class service_with_special_names_setter_pargs : public apache::thrift::TStructType<service_with_special_names_setter_pargs> {
 public:

  static const uint64_t _reflection_id = 13085949427034307116U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_setter_pargs() = default;

  virtual ~service_with_special_names_setter_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_setter_pargs;
void merge(const service_with_special_names_setter_pargs& from, service_with_special_names_setter_pargs& to);
void merge(service_with_special_names_setter_pargs&& from, service_with_special_names_setter_pargs& to);
class service_with_special_names_setter_presult : public apache::thrift::TStructType<service_with_special_names_setter_presult> {
 public:

  static const uint64_t _reflection_id = 3615611587777939756U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_setter_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_setter_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_setter_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_setter_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_setter_presult;
void merge(const service_with_special_names_setter_presult& from, service_with_special_names_setter_presult& to);
void merge(service_with_special_names_setter_presult&& from, service_with_special_names_setter_presult& to);
class service_with_special_names_str_args : public apache::thrift::TStructType<service_with_special_names_str_args> {
 public:

  static const uint64_t _reflection_id = 9523889597948027724U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_str_args() {
  }

  service_with_special_names_str_args(const service_with_special_names_str_args&) = default;
  service_with_special_names_str_args& operator=(const service_with_special_names_str_args& src)= default;
  service_with_special_names_str_args(service_with_special_names_str_args&&) = default;
  service_with_special_names_str_args& operator=(service_with_special_names_str_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_str_args() throw() {}


  bool operator == (const service_with_special_names_str_args &) const;
  bool operator != (const service_with_special_names_str_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_str_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_str_args;
void merge(const service_with_special_names_str_args& from, service_with_special_names_str_args& to);
void merge(service_with_special_names_str_args&& from, service_with_special_names_str_args& to);
class service_with_special_names_str_pargs : public apache::thrift::TStructType<service_with_special_names_str_pargs> {
 public:

  static const uint64_t _reflection_id = 11104524594484825836U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_str_pargs() = default;

  virtual ~service_with_special_names_str_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_str_pargs;
void merge(const service_with_special_names_str_pargs& from, service_with_special_names_str_pargs& to);
void merge(service_with_special_names_str_pargs&& from, service_with_special_names_str_pargs& to);
class service_with_special_names_str_presult : public apache::thrift::TStructType<service_with_special_names_str_presult> {
 public:

  static const uint64_t _reflection_id = 10019129158603438188U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_str_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_str_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_str_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_str_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_str_presult;
void merge(const service_with_special_names_str_presult& from, service_with_special_names_str_presult& to);
void merge(service_with_special_names_str_presult&& from, service_with_special_names_str_presult& to);
class service_with_special_names_strings_args : public apache::thrift::TStructType<service_with_special_names_strings_args> {
 public:

  static const uint64_t _reflection_id = 11558869670105657900U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_strings_args() {
  }

  service_with_special_names_strings_args(const service_with_special_names_strings_args&) = default;
  service_with_special_names_strings_args& operator=(const service_with_special_names_strings_args& src)= default;
  service_with_special_names_strings_args(service_with_special_names_strings_args&&) = default;
  service_with_special_names_strings_args& operator=(service_with_special_names_strings_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_strings_args() throw() {}


  bool operator == (const service_with_special_names_strings_args &) const;
  bool operator != (const service_with_special_names_strings_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_strings_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_strings_args;
void merge(const service_with_special_names_strings_args& from, service_with_special_names_strings_args& to);
void merge(service_with_special_names_strings_args&& from, service_with_special_names_strings_args& to);
class service_with_special_names_strings_pargs : public apache::thrift::TStructType<service_with_special_names_strings_pargs> {
 public:

  static const uint64_t _reflection_id = 9937103767805045164U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_strings_pargs() = default;

  virtual ~service_with_special_names_strings_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_strings_pargs;
void merge(const service_with_special_names_strings_pargs& from, service_with_special_names_strings_pargs& to);
void merge(service_with_special_names_strings_pargs&& from, service_with_special_names_strings_pargs& to);
class service_with_special_names_strings_presult : public apache::thrift::TStructType<service_with_special_names_strings_presult> {
 public:

  static const uint64_t _reflection_id = 6090313409056969900U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_strings_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_strings_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_strings_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_strings_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_strings_presult;
void merge(const service_with_special_names_strings_presult& from, service_with_special_names_strings_presult& to);
void merge(service_with_special_names_strings_presult&& from, service_with_special_names_strings_presult& to);
class service_with_special_names_type_args : public apache::thrift::TStructType<service_with_special_names_type_args> {
 public:

  static const uint64_t _reflection_id = 15109213770833110476U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_type_args() {
  }

  service_with_special_names_type_args(const service_with_special_names_type_args&) = default;
  service_with_special_names_type_args& operator=(const service_with_special_names_type_args& src)= default;
  service_with_special_names_type_args(service_with_special_names_type_args&&) = default;
  service_with_special_names_type_args& operator=(service_with_special_names_type_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_type_args() throw() {}


  bool operator == (const service_with_special_names_type_args &) const;
  bool operator != (const service_with_special_names_type_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_type_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_type_args;
void merge(const service_with_special_names_type_args& from, service_with_special_names_type_args& to);
void merge(service_with_special_names_type_args&& from, service_with_special_names_type_args& to);
class service_with_special_names_type_pargs : public apache::thrift::TStructType<service_with_special_names_type_pargs> {
 public:

  static const uint64_t _reflection_id = 18298586877078455596U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_type_pargs() = default;

  virtual ~service_with_special_names_type_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_type_pargs;
void merge(const service_with_special_names_type_pargs& from, service_with_special_names_type_pargs& to);
void merge(service_with_special_names_type_pargs&& from, service_with_special_names_type_pargs& to);
class service_with_special_names_type_presult : public apache::thrift::TStructType<service_with_special_names_type_presult> {
 public:

  static const uint64_t _reflection_id = 10509333716012291820U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_type_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_type_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_type_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_type_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_type_presult;
void merge(const service_with_special_names_type_presult& from, service_with_special_names_type_presult& to);
void merge(service_with_special_names_type_presult&& from, service_with_special_names_type_presult& to);
class service_with_special_names_value_args : public apache::thrift::TStructType<service_with_special_names_value_args> {
 public:

  static const uint64_t _reflection_id = 3864619655954954348U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_value_args() {
  }

  service_with_special_names_value_args(const service_with_special_names_value_args&) = default;
  service_with_special_names_value_args& operator=(const service_with_special_names_value_args& src)= default;
  service_with_special_names_value_args(service_with_special_names_value_args&&) = default;
  service_with_special_names_value_args& operator=(service_with_special_names_value_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_value_args() throw() {}


  bool operator == (const service_with_special_names_value_args &) const;
  bool operator != (const service_with_special_names_value_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_value_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_value_args;
void merge(const service_with_special_names_value_args& from, service_with_special_names_value_args& to);
void merge(service_with_special_names_value_args&& from, service_with_special_names_value_args& to);
class service_with_special_names_value_pargs : public apache::thrift::TStructType<service_with_special_names_value_pargs> {
 public:

  static const uint64_t _reflection_id = 1945700546667119884U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_value_pargs() = default;

  virtual ~service_with_special_names_value_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_value_pargs;
void merge(const service_with_special_names_value_pargs& from, service_with_special_names_value_pargs& to);
void merge(service_with_special_names_value_pargs&& from, service_with_special_names_value_pargs& to);
class service_with_special_names_value_presult : public apache::thrift::TStructType<service_with_special_names_value_presult> {
 public:

  static const uint64_t _reflection_id = 14418760717554044556U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_value_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_value_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_value_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_value_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_value_presult;
void merge(const service_with_special_names_value_presult& from, service_with_special_names_value_presult& to);
void merge(service_with_special_names_value_presult&& from, service_with_special_names_value_presult& to);
class service_with_special_names_value_to_name_args : public apache::thrift::TStructType<service_with_special_names_value_to_name_args> {
 public:

  static const uint64_t _reflection_id = 17974119141925120876U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_value_to_name_args() {
  }

  service_with_special_names_value_to_name_args(const service_with_special_names_value_to_name_args&) = default;
  service_with_special_names_value_to_name_args& operator=(const service_with_special_names_value_to_name_args& src)= default;
  service_with_special_names_value_to_name_args(service_with_special_names_value_to_name_args&&) = default;
  service_with_special_names_value_to_name_args& operator=(service_with_special_names_value_to_name_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_value_to_name_args() throw() {}


  bool operator == (const service_with_special_names_value_to_name_args &) const;
  bool operator != (const service_with_special_names_value_to_name_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_value_to_name_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_value_to_name_args;
void merge(const service_with_special_names_value_to_name_args& from, service_with_special_names_value_to_name_args& to);
void merge(service_with_special_names_value_to_name_args&& from, service_with_special_names_value_to_name_args& to);
class service_with_special_names_value_to_name_pargs : public apache::thrift::TStructType<service_with_special_names_value_to_name_pargs> {
 public:

  static const uint64_t _reflection_id = 7019790290212150988U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_value_to_name_pargs() = default;

  virtual ~service_with_special_names_value_to_name_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_value_to_name_pargs;
void merge(const service_with_special_names_value_to_name_pargs& from, service_with_special_names_value_to_name_pargs& to);
void merge(service_with_special_names_value_to_name_pargs&& from, service_with_special_names_value_to_name_pargs& to);
class service_with_special_names_value_to_name_presult : public apache::thrift::TStructType<service_with_special_names_value_to_name_presult> {
 public:

  static const uint64_t _reflection_id = 15398044640920953004U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_value_to_name_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_value_to_name_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_value_to_name_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_value_to_name_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_value_to_name_presult;
void merge(const service_with_special_names_value_to_name_presult& from, service_with_special_names_value_to_name_presult& to);
void merge(service_with_special_names_value_to_name_presult&& from, service_with_special_names_value_to_name_presult& to);
class service_with_special_names_values_args : public apache::thrift::TStructType<service_with_special_names_values_args> {
 public:

  static const uint64_t _reflection_id = 3069345450276425100U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_values_args() {
  }

  service_with_special_names_values_args(const service_with_special_names_values_args&) = default;
  service_with_special_names_values_args& operator=(const service_with_special_names_values_args& src)= default;
  service_with_special_names_values_args(service_with_special_names_values_args&&) = default;
  service_with_special_names_values_args& operator=(service_with_special_names_values_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_values_args() throw() {}


  bool operator == (const service_with_special_names_values_args &) const;
  bool operator != (const service_with_special_names_values_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_values_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_values_args;
void merge(const service_with_special_names_values_args& from, service_with_special_names_values_args& to);
void merge(service_with_special_names_values_args&& from, service_with_special_names_values_args& to);
class service_with_special_names_values_pargs : public apache::thrift::TStructType<service_with_special_names_values_pargs> {
 public:

  static const uint64_t _reflection_id = 3546005976427740364U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_values_pargs() = default;

  virtual ~service_with_special_names_values_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_values_pargs;
void merge(const service_with_special_names_values_pargs& from, service_with_special_names_values_pargs& to);
void merge(service_with_special_names_values_pargs&& from, service_with_special_names_values_pargs& to);
class service_with_special_names_values_presult : public apache::thrift::TStructType<service_with_special_names_values_presult> {
 public:

  static const uint64_t _reflection_id = 3563447443625046764U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_values_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_values_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_values_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_values_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_values_presult;
void merge(const service_with_special_names_values_presult& from, service_with_special_names_values_presult& to);
void merge(service_with_special_names_values_presult&& from, service_with_special_names_values_presult& to);
class service_with_special_names_id_args : public apache::thrift::TStructType<service_with_special_names_id_args> {
 public:

  static const uint64_t _reflection_id = 8735572574444870700U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_id_args() {
  }

  service_with_special_names_id_args(const service_with_special_names_id_args&) = default;
  service_with_special_names_id_args& operator=(const service_with_special_names_id_args& src)= default;
  service_with_special_names_id_args(service_with_special_names_id_args&&) = default;
  service_with_special_names_id_args& operator=(service_with_special_names_id_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_id_args() throw() {}


  bool operator == (const service_with_special_names_id_args &) const;
  bool operator != (const service_with_special_names_id_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_id_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_id_args;
void merge(const service_with_special_names_id_args& from, service_with_special_names_id_args& to);
void merge(service_with_special_names_id_args&& from, service_with_special_names_id_args& to);
class service_with_special_names_id_pargs : public apache::thrift::TStructType<service_with_special_names_id_pargs> {
 public:

  static const uint64_t _reflection_id = 7139318446922995980U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_id_pargs() = default;

  virtual ~service_with_special_names_id_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_id_pargs;
void merge(const service_with_special_names_id_pargs& from, service_with_special_names_id_pargs& to);
void merge(service_with_special_names_id_pargs&& from, service_with_special_names_id_pargs& to);
class service_with_special_names_id_presult : public apache::thrift::TStructType<service_with_special_names_id_presult> {
 public:

  static const uint64_t _reflection_id = 10614178590552322796U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_id_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_id_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_id_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_id_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_id_presult;
void merge(const service_with_special_names_id_presult& from, service_with_special_names_id_presult& to);
void merge(service_with_special_names_id_presult&& from, service_with_special_names_id_presult& to);
class service_with_special_names_ids_args : public apache::thrift::TStructType<service_with_special_names_ids_args> {
 public:

  static const uint64_t _reflection_id = 18283754767201791212U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_ids_args() {
  }

  service_with_special_names_ids_args(const service_with_special_names_ids_args&) = default;
  service_with_special_names_ids_args& operator=(const service_with_special_names_ids_args& src)= default;
  service_with_special_names_ids_args(service_with_special_names_ids_args&&) = default;
  service_with_special_names_ids_args& operator=(service_with_special_names_ids_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_ids_args() throw() {}


  bool operator == (const service_with_special_names_ids_args &) const;
  bool operator != (const service_with_special_names_ids_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_ids_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_ids_args;
void merge(const service_with_special_names_ids_args& from, service_with_special_names_ids_args& to);
void merge(service_with_special_names_ids_args&& from, service_with_special_names_ids_args& to);
class service_with_special_names_ids_pargs : public apache::thrift::TStructType<service_with_special_names_ids_pargs> {
 public:

  static const uint64_t _reflection_id = 17621159150274508076U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_ids_pargs() = default;

  virtual ~service_with_special_names_ids_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_ids_pargs;
void merge(const service_with_special_names_ids_pargs& from, service_with_special_names_ids_pargs& to);
void merge(service_with_special_names_ids_pargs&& from, service_with_special_names_ids_pargs& to);
class service_with_special_names_ids_presult : public apache::thrift::TStructType<service_with_special_names_ids_presult> {
 public:

  static const uint64_t _reflection_id = 9652207830689380876U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_ids_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_ids_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_ids_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_ids_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_ids_presult;
void merge(const service_with_special_names_ids_presult& from, service_with_special_names_ids_presult& to);
void merge(service_with_special_names_ids_presult&& from, service_with_special_names_ids_presult& to);
class service_with_special_names_descriptor_args : public apache::thrift::TStructType<service_with_special_names_descriptor_args> {
 public:

  static const uint64_t _reflection_id = 11888178329946336460U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_descriptor_args() {
  }

  service_with_special_names_descriptor_args(const service_with_special_names_descriptor_args&) = default;
  service_with_special_names_descriptor_args& operator=(const service_with_special_names_descriptor_args& src)= default;
  service_with_special_names_descriptor_args(service_with_special_names_descriptor_args&&) = default;
  service_with_special_names_descriptor_args& operator=(service_with_special_names_descriptor_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_descriptor_args() throw() {}


  bool operator == (const service_with_special_names_descriptor_args &) const;
  bool operator != (const service_with_special_names_descriptor_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_descriptor_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_descriptor_args;
void merge(const service_with_special_names_descriptor_args& from, service_with_special_names_descriptor_args& to);
void merge(service_with_special_names_descriptor_args&& from, service_with_special_names_descriptor_args& to);
class service_with_special_names_descriptor_pargs : public apache::thrift::TStructType<service_with_special_names_descriptor_pargs> {
 public:

  static const uint64_t _reflection_id = 10175935319856860844U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_descriptor_pargs() = default;

  virtual ~service_with_special_names_descriptor_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_descriptor_pargs;
void merge(const service_with_special_names_descriptor_pargs& from, service_with_special_names_descriptor_pargs& to);
void merge(service_with_special_names_descriptor_pargs&& from, service_with_special_names_descriptor_pargs& to);
class service_with_special_names_descriptor_presult : public apache::thrift::TStructType<service_with_special_names_descriptor_presult> {
 public:

  static const uint64_t _reflection_id = 17988834178275663756U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_descriptor_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_descriptor_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_descriptor_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_descriptor_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_descriptor_presult;
void merge(const service_with_special_names_descriptor_presult& from, service_with_special_names_descriptor_presult& to);
void merge(service_with_special_names_descriptor_presult&& from, service_with_special_names_descriptor_presult& to);
class service_with_special_names_descriptors_args : public apache::thrift::TStructType<service_with_special_names_descriptors_args> {
 public:

  static const uint64_t _reflection_id = 8146408518317640812U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_descriptors_args() {
  }

  service_with_special_names_descriptors_args(const service_with_special_names_descriptors_args&) = default;
  service_with_special_names_descriptors_args& operator=(const service_with_special_names_descriptors_args& src)= default;
  service_with_special_names_descriptors_args(service_with_special_names_descriptors_args&&) = default;
  service_with_special_names_descriptors_args& operator=(service_with_special_names_descriptors_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_descriptors_args() throw() {}


  bool operator == (const service_with_special_names_descriptors_args &) const;
  bool operator != (const service_with_special_names_descriptors_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_descriptors_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_descriptors_args;
void merge(const service_with_special_names_descriptors_args& from, service_with_special_names_descriptors_args& to);
void merge(service_with_special_names_descriptors_args&& from, service_with_special_names_descriptors_args& to);
class service_with_special_names_descriptors_pargs : public apache::thrift::TStructType<service_with_special_names_descriptors_pargs> {
 public:

  static const uint64_t _reflection_id = 147755538338568012U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_descriptors_pargs() = default;

  virtual ~service_with_special_names_descriptors_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_descriptors_pargs;
void merge(const service_with_special_names_descriptors_pargs& from, service_with_special_names_descriptors_pargs& to);
void merge(service_with_special_names_descriptors_pargs&& from, service_with_special_names_descriptors_pargs& to);
class service_with_special_names_descriptors_presult : public apache::thrift::TStructType<service_with_special_names_descriptors_presult> {
 public:

  static const uint64_t _reflection_id = 9000437692453049900U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_descriptors_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_descriptors_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_descriptors_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_descriptors_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_descriptors_presult;
void merge(const service_with_special_names_descriptors_presult& from, service_with_special_names_descriptors_presult& to);
void merge(service_with_special_names_descriptors_presult&& from, service_with_special_names_descriptors_presult& to);
class service_with_special_names_key_args : public apache::thrift::TStructType<service_with_special_names_key_args> {
 public:

  static const uint64_t _reflection_id = 1605840161292897484U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_key_args() {
  }

  service_with_special_names_key_args(const service_with_special_names_key_args&) = default;
  service_with_special_names_key_args& operator=(const service_with_special_names_key_args& src)= default;
  service_with_special_names_key_args(service_with_special_names_key_args&&) = default;
  service_with_special_names_key_args& operator=(service_with_special_names_key_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_key_args() throw() {}


  bool operator == (const service_with_special_names_key_args &) const;
  bool operator != (const service_with_special_names_key_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_key_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_key_args;
void merge(const service_with_special_names_key_args& from, service_with_special_names_key_args& to);
void merge(service_with_special_names_key_args&& from, service_with_special_names_key_args& to);
class service_with_special_names_key_pargs : public apache::thrift::TStructType<service_with_special_names_key_pargs> {
 public:

  static const uint64_t _reflection_id = 1242976451924902860U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_key_pargs() = default;

  virtual ~service_with_special_names_key_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_key_pargs;
void merge(const service_with_special_names_key_pargs& from, service_with_special_names_key_pargs& to);
void merge(service_with_special_names_key_pargs&& from, service_with_special_names_key_pargs& to);
class service_with_special_names_key_presult : public apache::thrift::TStructType<service_with_special_names_key_presult> {
 public:

  static const uint64_t _reflection_id = 9390535927945279788U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_key_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_key_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_key_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_key_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_key_presult;
void merge(const service_with_special_names_key_presult& from, service_with_special_names_key_presult& to);
void merge(service_with_special_names_key_presult&& from, service_with_special_names_key_presult& to);
class service_with_special_names_keys_args : public apache::thrift::TStructType<service_with_special_names_keys_args> {
 public:

  static const uint64_t _reflection_id = 9648629972725083468U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_keys_args() {
  }

  service_with_special_names_keys_args(const service_with_special_names_keys_args&) = default;
  service_with_special_names_keys_args& operator=(const service_with_special_names_keys_args& src)= default;
  service_with_special_names_keys_args(service_with_special_names_keys_args&&) = default;
  service_with_special_names_keys_args& operator=(service_with_special_names_keys_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_keys_args() throw() {}


  bool operator == (const service_with_special_names_keys_args &) const;
  bool operator != (const service_with_special_names_keys_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_keys_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_keys_args;
void merge(const service_with_special_names_keys_args& from, service_with_special_names_keys_args& to);
void merge(service_with_special_names_keys_args&& from, service_with_special_names_keys_args& to);
class service_with_special_names_keys_pargs : public apache::thrift::TStructType<service_with_special_names_keys_pargs> {
 public:

  static const uint64_t _reflection_id = 16794217974532786508U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_keys_pargs() = default;

  virtual ~service_with_special_names_keys_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_keys_pargs;
void merge(const service_with_special_names_keys_pargs& from, service_with_special_names_keys_pargs& to);
void merge(service_with_special_names_keys_pargs&& from, service_with_special_names_keys_pargs& to);
class service_with_special_names_keys_presult : public apache::thrift::TStructType<service_with_special_names_keys_presult> {
 public:

  static const uint64_t _reflection_id = 11746734769662621452U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_keys_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_keys_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_keys_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_keys_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_keys_presult;
void merge(const service_with_special_names_keys_presult& from, service_with_special_names_keys_presult& to);
void merge(service_with_special_names_keys_presult&& from, service_with_special_names_keys_presult& to);
class service_with_special_names_annotation_args : public apache::thrift::TStructType<service_with_special_names_annotation_args> {
 public:

  static const uint64_t _reflection_id = 15683333469201773708U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_annotation_args() {
  }

  service_with_special_names_annotation_args(const service_with_special_names_annotation_args&) = default;
  service_with_special_names_annotation_args& operator=(const service_with_special_names_annotation_args& src)= default;
  service_with_special_names_annotation_args(service_with_special_names_annotation_args&&) = default;
  service_with_special_names_annotation_args& operator=(service_with_special_names_annotation_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_annotation_args() throw() {}


  bool operator == (const service_with_special_names_annotation_args &) const;
  bool operator != (const service_with_special_names_annotation_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_annotation_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_annotation_args;
void merge(const service_with_special_names_annotation_args& from, service_with_special_names_annotation_args& to);
void merge(service_with_special_names_annotation_args&& from, service_with_special_names_annotation_args& to);
class service_with_special_names_annotation_pargs : public apache::thrift::TStructType<service_with_special_names_annotation_pargs> {
 public:

  static const uint64_t _reflection_id = 17332786171836213740U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_annotation_pargs() = default;

  virtual ~service_with_special_names_annotation_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_annotation_pargs;
void merge(const service_with_special_names_annotation_pargs& from, service_with_special_names_annotation_pargs& to);
void merge(service_with_special_names_annotation_pargs&& from, service_with_special_names_annotation_pargs& to);
class service_with_special_names_annotation_presult : public apache::thrift::TStructType<service_with_special_names_annotation_presult> {
 public:

  static const uint64_t _reflection_id = 4139107230434154412U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_annotation_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_annotation_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_annotation_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_annotation_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_annotation_presult;
void merge(const service_with_special_names_annotation_presult& from, service_with_special_names_annotation_presult& to);
void merge(service_with_special_names_annotation_presult&& from, service_with_special_names_annotation_presult& to);
class service_with_special_names_annotations_args : public apache::thrift::TStructType<service_with_special_names_annotations_args> {
 public:

  static const uint64_t _reflection_id = 17069873164792460620U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_annotations_args() {
  }

  service_with_special_names_annotations_args(const service_with_special_names_annotations_args&) = default;
  service_with_special_names_annotations_args& operator=(const service_with_special_names_annotations_args& src)= default;
  service_with_special_names_annotations_args(service_with_special_names_annotations_args&&) = default;
  service_with_special_names_annotations_args& operator=(service_with_special_names_annotations_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_annotations_args() throw() {}


  bool operator == (const service_with_special_names_annotations_args &) const;
  bool operator != (const service_with_special_names_annotations_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_annotations_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_annotations_args;
void merge(const service_with_special_names_annotations_args& from, service_with_special_names_annotations_args& to);
void merge(service_with_special_names_annotations_args&& from, service_with_special_names_annotations_args& to);
class service_with_special_names_annotations_pargs : public apache::thrift::TStructType<service_with_special_names_annotations_pargs> {
 public:

  static const uint64_t _reflection_id = 18318118632293507020U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_annotations_pargs() = default;

  virtual ~service_with_special_names_annotations_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_annotations_pargs;
void merge(const service_with_special_names_annotations_pargs& from, service_with_special_names_annotations_pargs& to);
void merge(service_with_special_names_annotations_pargs&& from, service_with_special_names_annotations_pargs& to);
class service_with_special_names_annotations_presult : public apache::thrift::TStructType<service_with_special_names_annotations_presult> {
 public:

  static const uint64_t _reflection_id = 4043952334908702028U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_annotations_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_annotations_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_annotations_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_annotations_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_annotations_presult;
void merge(const service_with_special_names_annotations_presult& from, service_with_special_names_annotations_presult& to);
void merge(service_with_special_names_annotations_presult&& from, service_with_special_names_annotations_presult& to);
class service_with_special_names_member_args : public apache::thrift::TStructType<service_with_special_names_member_args> {
 public:

  static const uint64_t _reflection_id = 3769000557722425548U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_member_args() {
  }

  service_with_special_names_member_args(const service_with_special_names_member_args&) = default;
  service_with_special_names_member_args& operator=(const service_with_special_names_member_args& src)= default;
  service_with_special_names_member_args(service_with_special_names_member_args&&) = default;
  service_with_special_names_member_args& operator=(service_with_special_names_member_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_member_args() throw() {}


  bool operator == (const service_with_special_names_member_args &) const;
  bool operator != (const service_with_special_names_member_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_member_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_member_args;
void merge(const service_with_special_names_member_args& from, service_with_special_names_member_args& to);
void merge(service_with_special_names_member_args&& from, service_with_special_names_member_args& to);
class service_with_special_names_member_pargs : public apache::thrift::TStructType<service_with_special_names_member_pargs> {
 public:

  static const uint64_t _reflection_id = 3801129748783201580U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_member_pargs() = default;

  virtual ~service_with_special_names_member_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_member_pargs;
void merge(const service_with_special_names_member_pargs& from, service_with_special_names_member_pargs& to);
void merge(service_with_special_names_member_pargs&& from, service_with_special_names_member_pargs& to);
class service_with_special_names_member_presult : public apache::thrift::TStructType<service_with_special_names_member_presult> {
 public:

  static const uint64_t _reflection_id = 6342879103543108076U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_member_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_member_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_member_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_member_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_member_presult;
void merge(const service_with_special_names_member_presult& from, service_with_special_names_member_presult& to);
void merge(service_with_special_names_member_presult&& from, service_with_special_names_member_presult& to);
class service_with_special_names_members_args : public apache::thrift::TStructType<service_with_special_names_members_args> {
 public:

  static const uint64_t _reflection_id = 15917542671561311212U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_members_args() {
  }

  service_with_special_names_members_args(const service_with_special_names_members_args&) = default;
  service_with_special_names_members_args& operator=(const service_with_special_names_members_args& src)= default;
  service_with_special_names_members_args(service_with_special_names_members_args&&) = default;
  service_with_special_names_members_args& operator=(service_with_special_names_members_args&&) = default;

  void __clear();

  virtual ~service_with_special_names_members_args() throw() {}


  bool operator == (const service_with_special_names_members_args &) const;
  bool operator != (const service_with_special_names_members_args& rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const service_with_special_names_members_args & ) const;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_members_args;
void merge(const service_with_special_names_members_args& from, service_with_special_names_members_args& to);
void merge(service_with_special_names_members_args&& from, service_with_special_names_members_args& to);
class service_with_special_names_members_pargs : public apache::thrift::TStructType<service_with_special_names_members_pargs> {
 public:

  static const uint64_t _reflection_id = 14009036600105297516U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_members_pargs() = default;

  virtual ~service_with_special_names_members_pargs() throw() {}


  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_members_pargs;
void merge(const service_with_special_names_members_pargs& from, service_with_special_names_members_pargs& to);
void merge(service_with_special_names_members_pargs&& from, service_with_special_names_members_pargs& to);
class service_with_special_names_members_presult : public apache::thrift::TStructType<service_with_special_names_members_presult> {
 public:

  static const uint64_t _reflection_id = 2099147124458247276U;
  static void _reflection_register(::apache::thrift::reflection::Schema&);
  service_with_special_names_members_presult() = default;
  template <
    typename T__ThriftWrappedArgument__Ctor,
    typename... Args__ThriftWrappedArgument__Ctor
  >
  explicit service_with_special_names_members_presult(
    ::apache::thrift::detail::argument_wrapper<0, T__ThriftWrappedArgument__Ctor> arg,
    Args__ThriftWrappedArgument__Ctor&&... args
  ):
    service_with_special_names_members_presult(std::forward<Args__ThriftWrappedArgument__Ctor>(args)...)
  {
    success = arg.move();
    __isset.success = true;
  }

  virtual ~service_with_special_names_members_presult() throw() {}

  int32_t* success;

  struct __isset {
    __isset() { __clear(); } 
    void __clear() {
      success = false;
    }
    bool success;
  } __isset;

  void readFromJson(const char* jsonText, size_t len, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  void readFromJson(const char* jsonText, const folly::json::serialization_opts& opts = folly::json::serialization_opts());
  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class service_with_special_names_members_presult;
void merge(const service_with_special_names_members_presult& from, service_with_special_names_members_presult& to);
void merge(service_with_special_names_members_presult&& from, service_with_special_names_members_presult& to);
class service_with_special_namesClient : virtual public service_with_special_namesIf, virtual public apache::thrift::TClientBase {
 public:
  service_with_special_namesClient(std::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  service_with_special_namesClient(std::shared_ptr<apache::thrift::protocol::TProtocol> iprot, std::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    checkSeqid_(true),
    nextSendSequenceId_(1),
    nextRecvSequenceId_(1),
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
    connectionContext_ = std::shared_ptr<TClientBase::ConnContext>(
      new TClientBase::ConnContext(piprot_, poprot_));
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  virtual ~service_with_special_namesClient() {}
  int32_t get();
  virtual void send_get();
  virtual int32_t recv_get();
  virtual folly::exception_wrapper recv_wrapped_get(int32_t& _return);
  int32_t getter();
  virtual void send_getter();
  virtual int32_t recv_getter();
  virtual folly::exception_wrapper recv_wrapped_getter(int32_t& _return);
  int32_t lists();
  virtual void send_lists();
  virtual int32_t recv_lists();
  virtual folly::exception_wrapper recv_wrapped_lists(int32_t& _return);
  int32_t maps();
  virtual void send_maps();
  virtual int32_t recv_maps();
  virtual folly::exception_wrapper recv_wrapped_maps(int32_t& _return);
  int32_t name();
  virtual void send_name();
  virtual int32_t recv_name();
  virtual folly::exception_wrapper recv_wrapped_name(int32_t& _return);
  int32_t name_to_value();
  virtual void send_name_to_value();
  virtual int32_t recv_name_to_value();
  virtual folly::exception_wrapper recv_wrapped_name_to_value(int32_t& _return);
  int32_t names();
  virtual void send_names();
  virtual int32_t recv_names();
  virtual folly::exception_wrapper recv_wrapped_names(int32_t& _return);
  int32_t prefix_tree();
  virtual void send_prefix_tree();
  virtual int32_t recv_prefix_tree();
  virtual folly::exception_wrapper recv_wrapped_prefix_tree(int32_t& _return);
  int32_t sets();
  virtual void send_sets();
  virtual int32_t recv_sets();
  virtual folly::exception_wrapper recv_wrapped_sets(int32_t& _return);
  int32_t setter();
  virtual void send_setter();
  virtual int32_t recv_setter();
  virtual folly::exception_wrapper recv_wrapped_setter(int32_t& _return);
  int32_t str();
  virtual void send_str();
  virtual int32_t recv_str();
  virtual folly::exception_wrapper recv_wrapped_str(int32_t& _return);
  int32_t strings();
  virtual void send_strings();
  virtual int32_t recv_strings();
  virtual folly::exception_wrapper recv_wrapped_strings(int32_t& _return);
  int32_t type();
  virtual void send_type();
  virtual int32_t recv_type();
  virtual folly::exception_wrapper recv_wrapped_type(int32_t& _return);
  int32_t value();
  virtual void send_value();
  virtual int32_t recv_value();
  virtual folly::exception_wrapper recv_wrapped_value(int32_t& _return);
  int32_t value_to_name();
  virtual void send_value_to_name();
  virtual int32_t recv_value_to_name();
  virtual folly::exception_wrapper recv_wrapped_value_to_name(int32_t& _return);
  int32_t values();
  virtual void send_values();
  virtual int32_t recv_values();
  virtual folly::exception_wrapper recv_wrapped_values(int32_t& _return);
  int32_t id();
  virtual void send_id();
  virtual int32_t recv_id();
  virtual folly::exception_wrapper recv_wrapped_id(int32_t& _return);
  int32_t ids();
  virtual void send_ids();
  virtual int32_t recv_ids();
  virtual folly::exception_wrapper recv_wrapped_ids(int32_t& _return);
  int32_t descriptor();
  virtual void send_descriptor();
  virtual int32_t recv_descriptor();
  virtual folly::exception_wrapper recv_wrapped_descriptor(int32_t& _return);
  int32_t descriptors();
  virtual void send_descriptors();
  virtual int32_t recv_descriptors();
  virtual folly::exception_wrapper recv_wrapped_descriptors(int32_t& _return);
  int32_t key();
  virtual void send_key();
  virtual int32_t recv_key();
  virtual folly::exception_wrapper recv_wrapped_key(int32_t& _return);
  int32_t keys();
  virtual void send_keys();
  virtual int32_t recv_keys();
  virtual folly::exception_wrapper recv_wrapped_keys(int32_t& _return);
  int32_t annotation();
  virtual void send_annotation();
  virtual int32_t recv_annotation();
  virtual folly::exception_wrapper recv_wrapped_annotation(int32_t& _return);
  int32_t annotations();
  virtual void send_annotations();
  virtual int32_t recv_annotations();
  virtual folly::exception_wrapper recv_wrapped_annotations(int32_t& _return);
  int32_t member();
  virtual void send_member();
  virtual int32_t recv_member();
  virtual folly::exception_wrapper recv_wrapped_member(int32_t& _return);
  int32_t members();
  virtual void send_members();
  virtual int32_t recv_members();
  virtual folly::exception_wrapper recv_wrapped_members(int32_t& _return);
  apache::thrift::server::TConnectionContext* getConnectionContext() {
    return connectionContext_.get();
  }

  /**
   * Disable checking the seqid field in server responses.
   *
   * This should only be used with broken servers that return incorrect seqid values.
   */
  void _disableSequenceIdChecks() {
    checkSeqid_ = false;
  }

 protected:
  bool checkSeqid_;
  int32_t nextSendSequenceId_;
  int32_t nextRecvSequenceId_;
  int32_t getNextSendSequenceId();
  int32_t getNextRecvSequenceId();
  std::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<apache::thrift::server::TConnectionContext> connectionContext_;
  virtual const char* getServiceName();
};

class service_with_special_namesProcessor : public ::apache::thrift::TDispatchProcessor {
 public:
  virtual const char* getServiceName() {
    return "service_with_special_names";
  }
 protected:
  std::shared_ptr<service_with_special_namesIf> iface_;
  virtual bool dispatchCall(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, apache::thrift::server::TConnectionContext* connectionContext);
 private:
  typedef  void (service_with_special_namesProcessor::*ProcessFunction)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*, apache::thrift::server::TConnectionContext*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_getter(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_lists(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_maps(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_name(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_name_to_value(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_names(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_prefix_tree(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_sets(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_setter(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_str(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_strings(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_type(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_value(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_value_to_name(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_values(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_id(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_ids(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_descriptor(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_descriptors(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_key(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_keys(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_annotation(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_annotations(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_member(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
  void process_members(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, apache::thrift::server::TConnectionContext* connectionContext);
 public:
  service_with_special_namesProcessor(std::shared_ptr<service_with_special_namesIf> iface) :
    iface_(iface) {
    processMap_["get"] = &service_with_special_namesProcessor::process_get;
    processMap_["getter"] = &service_with_special_namesProcessor::process_getter;
    processMap_["lists"] = &service_with_special_namesProcessor::process_lists;
    processMap_["maps"] = &service_with_special_namesProcessor::process_maps;
    processMap_["name"] = &service_with_special_namesProcessor::process_name;
    processMap_["name_to_value"] = &service_with_special_namesProcessor::process_name_to_value;
    processMap_["names"] = &service_with_special_namesProcessor::process_names;
    processMap_["prefix_tree"] = &service_with_special_namesProcessor::process_prefix_tree;
    processMap_["sets"] = &service_with_special_namesProcessor::process_sets;
    processMap_["setter"] = &service_with_special_namesProcessor::process_setter;
    processMap_["str"] = &service_with_special_namesProcessor::process_str;
    processMap_["strings"] = &service_with_special_namesProcessor::process_strings;
    processMap_["type"] = &service_with_special_namesProcessor::process_type;
    processMap_["value"] = &service_with_special_namesProcessor::process_value;
    processMap_["value_to_name"] = &service_with_special_namesProcessor::process_value_to_name;
    processMap_["values"] = &service_with_special_namesProcessor::process_values;
    processMap_["id"] = &service_with_special_namesProcessor::process_id;
    processMap_["ids"] = &service_with_special_namesProcessor::process_ids;
    processMap_["descriptor"] = &service_with_special_namesProcessor::process_descriptor;
    processMap_["descriptors"] = &service_with_special_namesProcessor::process_descriptors;
    processMap_["key"] = &service_with_special_namesProcessor::process_key;
    processMap_["keys"] = &service_with_special_namesProcessor::process_keys;
    processMap_["annotation"] = &service_with_special_namesProcessor::process_annotation;
    processMap_["annotations"] = &service_with_special_namesProcessor::process_annotations;
    processMap_["member"] = &service_with_special_namesProcessor::process_member;
    processMap_["members"] = &service_with_special_namesProcessor::process_members;
  }

  virtual ~service_with_special_namesProcessor() {}

  std::shared_ptr<std::set<std::string> > getProcessFunctions() { 
    std::shared_ptr<std::set<std::string> > rSet(new std::set<std::string>());
    rSet->insert("service_with_special_names.get");
    rSet->insert("service_with_special_names.getter");
    rSet->insert("service_with_special_names.lists");
    rSet->insert("service_with_special_names.maps");
    rSet->insert("service_with_special_names.name");
    rSet->insert("service_with_special_names.name_to_value");
    rSet->insert("service_with_special_names.names");
    rSet->insert("service_with_special_names.prefix_tree");
    rSet->insert("service_with_special_names.sets");
    rSet->insert("service_with_special_names.setter");
    rSet->insert("service_with_special_names.str");
    rSet->insert("service_with_special_names.strings");
    rSet->insert("service_with_special_names.type");
    rSet->insert("service_with_special_names.value");
    rSet->insert("service_with_special_names.value_to_name");
    rSet->insert("service_with_special_names.values");
    rSet->insert("service_with_special_names.id");
    rSet->insert("service_with_special_names.ids");
    rSet->insert("service_with_special_names.descriptor");
    rSet->insert("service_with_special_names.descriptors");
    rSet->insert("service_with_special_names.key");
    rSet->insert("service_with_special_names.keys");
    rSet->insert("service_with_special_names.annotation");
    rSet->insert("service_with_special_names.annotations");
    rSet->insert("service_with_special_names.member");
    rSet->insert("service_with_special_names.members");
    return rSet;
  }
};

class service_with_special_namesProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  service_with_special_namesProcessorFactory(const ::std::shared_ptr< service_with_special_namesIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(::apache::thrift::server::TConnectionContext* ctx);

 protected:
  ::std::shared_ptr< service_with_special_namesIfFactory > handlerFactory_;
};

class service_with_special_namesMultiface : virtual public service_with_special_namesIf {
 public:
  service_with_special_namesMultiface(std::vector<std::shared_ptr<service_with_special_namesIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~service_with_special_namesMultiface() {}
 protected:
  std::vector<std::shared_ptr<service_with_special_namesIf> > ifaces_;
  service_with_special_namesMultiface() {}
  void add(std::shared_ptr<service_with_special_namesIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t get() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->get();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->get();
  }

  int32_t getter() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->getter();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->getter();
  }

  int32_t lists() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->lists();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->lists();
  }

  int32_t maps() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->maps();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->maps();
  }

  int32_t name() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->name();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->name();
  }

  int32_t name_to_value() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->name_to_value();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->name_to_value();
  }

  int32_t names() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->names();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->names();
  }

  int32_t prefix_tree() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->prefix_tree();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->prefix_tree();
  }

  int32_t sets() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->sets();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->sets();
  }

  int32_t setter() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->setter();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->setter();
  }

  int32_t str() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->str();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->str();
  }

  int32_t strings() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->strings();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->strings();
  }

  int32_t type() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->type();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->type();
  }

  int32_t value() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->value();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->value();
  }

  int32_t value_to_name() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->value_to_name();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->value_to_name();
  }

  int32_t values() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->values();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->values();
  }

  int32_t id() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->id();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->id();
  }

  int32_t ids() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->ids();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->ids();
  }

  int32_t descriptor() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->descriptor();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->descriptor();
  }

  int32_t descriptors() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->descriptors();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->descriptors();
  }

  int32_t key() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->key();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->key();
  }

  int32_t keys() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->keys();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->keys();
  }

  int32_t annotation() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->annotation();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->annotation();
  }

  int32_t annotations() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->annotations();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->annotations();
  }

  int32_t member() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->member();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->member();
  }

  int32_t members() {
    uint32_t thrift_multifaces_index_tmp_;
    uint32_t thrift_multifaces_size_tmp_ = ifaces_.size();
    for (thrift_multifaces_index_tmp_ = 0; thrift_multifaces_index_tmp_ < thrift_multifaces_size_tmp_ - 1; ++thrift_multifaces_index_tmp_) {
      ifaces_[thrift_multifaces_index_tmp_]->members();
    }
    return ifaces_[thrift_multifaces_index_tmp_]->members();
  }

};

}} // namespace

#endif
