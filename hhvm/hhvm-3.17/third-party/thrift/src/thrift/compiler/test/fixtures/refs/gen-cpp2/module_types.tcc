/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#pragma once

#include "thrift/compiler/test/fixtures/refs/gen-cpp2/module_types.h"
#include <thrift/lib/cpp/TApplicationException.h>
#include <folly/io/IOBuf.h>
#include <folly/io/IOBufQueue.h>
#include <thrift/lib/cpp/transport/THeader.h>
#include <thrift/lib/cpp2/server/Cpp2ConnContext.h>
#include <thrift/lib/cpp2/GeneratedCodeHelper.h>

#include <thrift/lib/cpp2/protocol/BinaryProtocol.h>
#include <thrift/lib/cpp2/protocol/CompactProtocol.h>
namespace cpp2 {

} // cpp2
namespace std {

} // std
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyUnion::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  xfer += iprot->readFieldBegin(fname, ftype, fid);
  if (ftype == apache::thrift::protocol::T_STOP) {
    this->__clear();
  } else {
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "anInteger") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I32;
      }
      else if (fname == "aString") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRING;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I32) {
          this->set_anInteger();
          xfer += iprot->readI32(this->mutable_anInteger());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRING) {
          this->set_aString();
          xfer += iprot->readString(this->mutable_aString());
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (UNLIKELY(ftype != apache::thrift::protocol::T_STOP)) {
      using apache::thrift::protocol::TProtocolException;
      TProtocolException::throwUnionMissingStop();
    }
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->serializedFieldSize("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_anInteger());
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->serializedFieldSize("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_aString());
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->serializedFieldSize("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->serializedSizeI32(this->get_anInteger());
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->serializedFieldSize("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->serializedSizeString(this->get_aString());
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyUnion");
  switch(this->getType()) {
    case MyUnion::Type::anInteger:
    {
      xfer += prot_->writeFieldBegin("anInteger", apache::thrift::protocol::T_I32, 1);
      xfer += prot_->writeI32(this->get_anInteger());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::aString:
    {
      xfer += prot_->writeFieldBegin("aString", apache::thrift::protocol::T_STRING, 2);
      xfer += prot_->writeString(this->get_aString());
      xfer += prot_->writeFieldEnd();
      break;
    }
    case MyUnion::Type::__EMPTY__:;
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyField::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_value = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_value") {
        fid = 1;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "value") {
        fid = 2;
        ftype = apache::thrift::protocol::T_I64;
      }
      else if (fname == "req_value") {
        fid = 3;
        ftype = apache::thrift::protocol::T_I64;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->opt_value);
          this->__isset.opt_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->req_value);
          isset_req_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_value) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_value' was not found in serialized data! Struct: MyField");
  }
  return xfer;
}

template <class Protocol_>
uint32_t MyField::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->serializedFieldSize("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->serializedSizeI64(this->opt_value);
  }
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->value);
  xfer += prot_->serializedFieldSize("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->req_value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyField::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->serializedFieldSize("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->serializedSizeI64(this->opt_value);
  }
  xfer += prot_->serializedFieldSize("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->serializedSizeI64(this->value);
  xfer += prot_->serializedFieldSize("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->serializedSizeI64(this->req_value);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyField::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyField");
  if (this->__isset.opt_value) {
    xfer += prot_->writeFieldBegin("opt_value", apache::thrift::protocol::T_I64, 1);
    xfer += prot_->writeI64(this->opt_value);
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("value", apache::thrift::protocol::T_I64, 2);
  xfer += prot_->writeI64(this->value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_value", apache::thrift::protocol::T_I64, 3);
  xfer += prot_->writeI64(this->req_value);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t MyStruct::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_ref = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_ref") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "ref") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_ref") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype0(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype0.get());
          this->opt_ref = std::move(_ptype0);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype1(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype1.get());
          this->ref = std::move(_ptype1);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype2(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype2.get());
          this->req_ref = std::move(_ptype2);
          isset_req_ref = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_ref) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_ref' was not found in serialized data! Struct: MyStruct");
  }
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->serializedFieldSize("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->serializedFieldSize("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t MyStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("MyStruct");
  if (this->opt_ref) {
    xfer += prot_->writeFieldBegin("opt_ref", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_ref) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->opt_ref.get());
    }
    else {
      xfer += prot_->writeStructBegin("MyField");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("ref", apache::thrift::protocol::T_STRUCT, 2);
  if (this->ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->ref.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_ref", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_ref) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->req_ref.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <typename T_StructWithUnion_f_struct_setter>
 ::cpp2::MyField& StructWithUnion::set_f(T_StructWithUnion_f_struct_setter&& f_) {
  f = std::forward<T_StructWithUnion_f_struct_setter>(f_);
  __isset.f = true;
  return f;
}

template <class Protocol_>
uint32_t StructWithUnion::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "u") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "aDouble") {
        fid = 2;
        ftype = apache::thrift::protocol::T_DOUBLE;
      }
      else if (fname == "f") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->u)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype3(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::read(iprot, _ptype3.get());
          this->u = std::move(_ptype3);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->aDouble);
          this->__isset.aDouble = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, &this->f);
          this->__isset.f = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithUnion");
  xfer += prot_->serializedFieldSize("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSize(prot_, this->u.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyUnion");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->aDouble);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, &this->f);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithUnion");
  xfer += prot_->serializedFieldSize("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::serializedSizeZC(prot_, this->u.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyUnion");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->serializedSizeDouble(this->aDouble);
  xfer += prot_->serializedFieldSize("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, &this->f);
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithUnion::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithUnion");
  xfer += prot_->writeFieldBegin("u", apache::thrift::protocol::T_STRUCT, 1);
  if (this->u) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyUnion>::write(prot_, this->u.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyUnion");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("aDouble", apache::thrift::protocol::T_DOUBLE, 2);
  xfer += prot_->writeDouble(this->aDouble);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("f", apache::thrift::protocol::T_STRUCT, 3);
  xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, &this->f);
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <typename T_RecursiveStruct_mes_struct_setter>
std::vector< ::cpp2::RecursiveStruct>& RecursiveStruct::set_mes(T_RecursiveStruct_mes_struct_setter&& mes_) {
  mes = std::forward<T_RecursiveStruct_mes_struct_setter>(mes_);
  __isset.mes = true;
  return mes;
}

template <class Protocol_>
uint32_t RecursiveStruct::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "mes") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          this->mes = std::vector< ::cpp2::RecursiveStruct>();
          uint32_t _size4;
          apache::thrift::protocol::TType _etype7;
          xfer += iprot->readListBegin(_etype7, _size4);
          uint32_t _i8;
          if (_size4 == std::numeric_limits<uint32_t>::max()) {
            for (_i8 = 0; iprot->peekList(); _i8++) {
              this->mes.resize(_i8 + 1);
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::read(iprot, &this->mes[_i8]);
            }
          }
          else {
            this->mes.resize(_size4);
            for (_i8 = 0; _i8 < _size4; ++_i8) {
              xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::read(iprot, &this->mes[_i8]);
            }
          }
          xfer += iprot->readListEnd();
          this->__isset.mes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->serializedFieldSize("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->mes.size());
    for (auto _iter9 = this->mes.begin(); _iter9 != this->mes.end(); ++_iter9) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::serializedSize(prot_, &(*_iter9));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->serializedFieldSize("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_STRUCT, this->mes.size());
    for (auto _iter10 = this->mes.begin(); _iter10 != this->mes.end(); ++_iter10) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::serializedSizeZC(prot_, &(*_iter10));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t RecursiveStruct::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("RecursiveStruct");
  if (this->__isset.mes) {
    xfer += prot_->writeFieldBegin("mes", apache::thrift::protocol::T_LIST, 1);
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_STRUCT, this->mes.size());
    for (auto _iter11 = this->mes.begin(); _iter11 != this->mes.end(); ++_iter11) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::RecursiveStruct>::write(prot_, &(*_iter11));
    }
    xfer += prot_->writeListEnd();
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithContainers::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;


  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "list_ref") {
        fid = 1;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_ref") {
        fid = 2;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "map_ref") {
        fid = 3;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "list_ref_unique") {
        fid = 4;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_ref_shared") {
        fid = 5;
        ftype = apache::thrift::protocol::T_SET;
      }
      else if (fname == "map_ref_custom") {
        fid = 6;
        ftype = apache::thrift::protocol::T_MAP;
      }
      else if (fname == "list_ref_shared_const") {
        fid = 7;
        ftype = apache::thrift::protocol::T_LIST;
      }
      else if (fname == "set_custom_ref") {
        fid = 8;
        ftype = apache::thrift::protocol::T_SET;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype16(new element_type());
          auto& _rtype17 = *_ptype16;
          uint32_t _size12;
          apache::thrift::protocol::TType _etype15;
          xfer += iprot->readListBegin(_etype15, _size12);
          uint32_t _i18;
          if (_size12 == std::numeric_limits<uint32_t>::max()) {
            for (_i18 = 0; iprot->peekList(); _i18++) {
              _rtype17.resize(_i18 + 1);
              xfer += iprot->readI32(_rtype17[_i18]);
            }
          }
          else {
            _rtype17.resize(_size12);
            for (_i18 = 0; _i18 < _size12; ++_i18) {
              xfer += iprot->readI32(_rtype17[_i18]);
            }
          }
          this->list_ref = std::move(_ptype16);
          xfer += iprot->readListEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype23(new element_type());
          auto& _rtype24 = *_ptype23;
          uint32_t _size19;
          apache::thrift::protocol::TType _etype22;
          xfer += iprot->readSetBegin(_etype22, _size19);
          uint32_t _i25;
          if (_size19 == std::numeric_limits<uint32_t>::max()) {
            for (_i25 = 0; iprot->peekSet(); _i25++) {
              int32_t _elem26;
              xfer += iprot->readI32(_elem26);
              _rtype24.insert(std::move(_elem26));
            }
          }
          else {
            for (_i25 = 0; _i25 < _size19; ++_i25) {
              int32_t _elem27;
              xfer += iprot->readI32(_elem27);
              _rtype24.insert(std::move(_elem27));
            }
          }
          this->set_ref = std::move(_ptype23);
          xfer += iprot->readSetEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->map_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype32(new element_type());
          auto& _rtype33 = *_ptype32;
          uint32_t _size28;
          apache::thrift::protocol::TType _ktype29;
          apache::thrift::protocol::TType _vtype30;
          xfer += iprot->readMapBegin(_ktype29, _vtype30, _size28);
          uint32_t _i34;
          if (_size28 == std::numeric_limits<uint32_t>::max()) {
            for (_i34 = 0; iprot->peekMap(); _i34++) {
              int32_t _key35;
              xfer += iprot->readI32(_key35);
              int32_t& _val36 = _rtype33[std::move(_key35)];
              xfer += iprot->readI32(_val36);
            }
          }
          else {
            auto const _kreader37 = [&xfer, &iprot](auto& _key39) {
              xfer += iprot->readI32(_key39);
            }
            ;
            auto const _vreader38 = [&xfer, &iprot](auto& _val40) {
              xfer += iprot->readI32(_val40);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(_rtype33, _size28, _kreader37, _vreader38);
          }
          this->map_ref = std::move(_ptype32);
          xfer += iprot->readMapEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 4:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref_unique)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype45(new element_type());
          auto& _rtype46 = *_ptype45;
          uint32_t _size41;
          apache::thrift::protocol::TType _etype44;
          xfer += iprot->readListBegin(_etype44, _size41);
          uint32_t _i47;
          if (_size41 == std::numeric_limits<uint32_t>::max()) {
            for (_i47 = 0; iprot->peekList(); _i47++) {
              _rtype46.resize(_i47 + 1);
              xfer += iprot->readI32(_rtype46[_i47]);
            }
          }
          else {
            _rtype46.resize(_size41);
            for (_i47 = 0; _i47 < _size41; ++_i47) {
              xfer += iprot->readI32(_rtype46[_i47]);
            }
          }
          this->list_ref_unique = std::move(_ptype45);
          xfer += iprot->readListEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 5:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_ref_shared)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype52(new element_type());
          auto& _rtype53 = *_ptype52;
          uint32_t _size48;
          apache::thrift::protocol::TType _etype51;
          xfer += iprot->readSetBegin(_etype51, _size48);
          uint32_t _i54;
          if (_size48 == std::numeric_limits<uint32_t>::max()) {
            for (_i54 = 0; iprot->peekSet(); _i54++) {
              int32_t _elem55;
              xfer += iprot->readI32(_elem55);
              _rtype53.insert(std::move(_elem55));
            }
          }
          else {
            for (_i54 = 0; _i54 < _size48; ++_i54) {
              int32_t _elem56;
              xfer += iprot->readI32(_elem56);
              _rtype53.insert(std::move(_elem56));
            }
          }
          this->set_ref_shared = std::move(_ptype52);
          xfer += iprot->readSetEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 6:
      {
        if (ftype == apache::thrift::protocol::T_MAP) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->map_ref_custom)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype61(new element_type());
          auto& _rtype62 = *_ptype61;
          uint32_t _size57;
          apache::thrift::protocol::TType _ktype58;
          apache::thrift::protocol::TType _vtype59;
          xfer += iprot->readMapBegin(_ktype58, _vtype59, _size57);
          uint32_t _i63;
          if (_size57 == std::numeric_limits<uint32_t>::max()) {
            for (_i63 = 0; iprot->peekMap(); _i63++) {
              int32_t _key64;
              xfer += iprot->readI32(_key64);
              int32_t& _val65 = _rtype62[std::move(_key64)];
              xfer += iprot->readI32(_val65);
            }
          }
          else {
            auto const _kreader66 = [&xfer, &iprot](auto& _key68) {
              xfer += iprot->readI32(_key68);
            }
            ;
            auto const _vreader67 = [&xfer, &iprot](auto& _val69) {
              xfer += iprot->readI32(_val69);
            }
            ;
            ::apache::thrift::deserialize_known_length_map(_rtype62, _size57, _kreader66, _vreader67);
          }
          this->map_ref_custom = std::move(_ptype61);
          xfer += iprot->readMapEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 7:
      {
        if (ftype == apache::thrift::protocol::T_LIST) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->list_ref_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype74(new element_type());
          auto& _rtype75 = *_ptype74;
          uint32_t _size70;
          apache::thrift::protocol::TType _etype73;
          xfer += iprot->readListBegin(_etype73, _size70);
          uint32_t _i76;
          if (_size70 == std::numeric_limits<uint32_t>::max()) {
            for (_i76 = 0; iprot->peekList(); _i76++) {
              _rtype75.resize(_i76 + 1);
              xfer += iprot->readI32(_rtype75[_i76]);
            }
          }
          else {
            _rtype75.resize(_size70);
            for (_i76 = 0; _i76 < _size70; ++_i76) {
              xfer += iprot->readI32(_rtype75[_i76]);
            }
          }
          this->list_ref_shared_const = std::move(_ptype74);
          xfer += iprot->readListEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 8:
      {
        if (ftype == apache::thrift::protocol::T_SET) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->set_custom_ref)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype81(new element_type());
          auto& _rtype82 = *_ptype81;
          uint32_t _size77;
          apache::thrift::protocol::TType _etype80;
          xfer += iprot->readSetBegin(_etype80, _size77);
          uint32_t _i83;
          if (_size77 == std::numeric_limits<uint32_t>::max()) {
            for (_i83 = 0; iprot->peekSet(); _i83++) {
              int32_t _elem84;
              xfer += iprot->readI32(_elem84);
              _rtype82.insert(std::move(_elem84));
            }
          }
          else {
            for (_i83 = 0; _i83 < _size77; ++_i83) {
              int32_t _elem85;
              xfer += iprot->readI32(_elem85);
              _rtype82.insert(std::move(_elem85));
            }
          }
          this->set_custom_ref = std::move(_ptype81);
          xfer += iprot->readSetEnd();
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithContainers");
  xfer += prot_->serializedFieldSize("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype86 = *this->list_ref;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype86.size());
    for (auto _iter87 = _rtype86.begin(); _iter87 != _rtype86.end(); ++_iter87) {
      xfer += prot_->serializedSizeI32((*_iter87));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype88 = *this->set_ref;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype88.size());
    for (auto _iter89 = _rtype88.begin(); _iter89 != _rtype88.end(); ++_iter89) {
      xfer += prot_->serializedSizeI32((*_iter89));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype90 = *this->map_ref;
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype90.size());
    for (auto _iter91 = _rtype90.begin(); _iter91 != _rtype90.end(); ++_iter91) {
      xfer += prot_->serializedSizeI32(_iter91->first);
      xfer += prot_->serializedSizeI32(_iter91->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype92 = *this->list_ref_unique;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype92.size());
    for (auto _iter93 = _rtype92.begin(); _iter93 != _rtype92.end(); ++_iter93) {
      xfer += prot_->serializedSizeI32((*_iter93));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype94 = *this->set_ref_shared;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype94.size());
    for (auto _iter95 = _rtype94.begin(); _iter95 != _rtype94.end(); ++_iter95) {
      xfer += prot_->serializedSizeI32((*_iter95));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref_custom", apache::thrift::protocol::T_MAP, 6);
  if (this->map_ref_custom) {
    const auto& _rtype96 = *this->map_ref_custom;
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype96.size());
    for (auto _iter97 = _rtype96.begin(); _iter97 != _rtype96.end(); ++_iter97) {
      xfer += prot_->serializedSizeI32(_iter97->first);
      xfer += prot_->serializedSizeI32(_iter97->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_shared_const", apache::thrift::protocol::T_LIST, 7);
  if (this->list_ref_shared_const) {
    const auto& _rtype98 = *this->list_ref_shared_const;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype98.size());
    for (auto _iter99 = _rtype98.begin(); _iter99 != _rtype98.end(); ++_iter99) {
      xfer += prot_->serializedSizeI32((*_iter99));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_custom_ref", apache::thrift::protocol::T_SET, 8);
  if (this->set_custom_ref) {
    const auto& _rtype100 = *this->set_custom_ref;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype100.size());
    for (auto _iter101 = _rtype100.begin(); _iter101 != _rtype100.end(); ++_iter101) {
      xfer += prot_->serializedSizeI32((*_iter101));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithContainers");
  xfer += prot_->serializedFieldSize("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype102 = *this->list_ref;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype102.size());
    for (auto _iter103 = _rtype102.begin(); _iter103 != _rtype102.end(); ++_iter103) {
      xfer += prot_->serializedSizeI32((*_iter103));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype104 = *this->set_ref;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype104.size());
    for (auto _iter105 = _rtype104.begin(); _iter105 != _rtype104.end(); ++_iter105) {
      xfer += prot_->serializedSizeI32((*_iter105));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype106 = *this->map_ref;
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype106.size());
    for (auto _iter107 = _rtype106.begin(); _iter107 != _rtype106.end(); ++_iter107) {
      xfer += prot_->serializedSizeI32(_iter107->first);
      xfer += prot_->serializedSizeI32(_iter107->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype108 = *this->list_ref_unique;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype108.size());
    for (auto _iter109 = _rtype108.begin(); _iter109 != _rtype108.end(); ++_iter109) {
      xfer += prot_->serializedSizeI32((*_iter109));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype110 = *this->set_ref_shared;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype110.size());
    for (auto _iter111 = _rtype110.begin(); _iter111 != _rtype110.end(); ++_iter111) {
      xfer += prot_->serializedSizeI32((*_iter111));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedFieldSize("map_ref_custom", apache::thrift::protocol::T_MAP, 6);
  if (this->map_ref_custom) {
    const auto& _rtype112 = *this->map_ref_custom;
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype112.size());
    for (auto _iter113 = _rtype112.begin(); _iter113 != _rtype112.end(); ++_iter113) {
      xfer += prot_->serializedSizeI32(_iter113->first);
      xfer += prot_->serializedSizeI32(_iter113->second);
    }
    xfer += prot_->serializedSizeMapEnd();
  }
  else {
    xfer += prot_->serializedSizeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeMapEnd();
  }
  xfer += prot_->serializedFieldSize("list_ref_shared_const", apache::thrift::protocol::T_LIST, 7);
  if (this->list_ref_shared_const) {
    const auto& _rtype114 = *this->list_ref_shared_const;
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, _rtype114.size());
    for (auto _iter115 = _rtype114.begin(); _iter115 != _rtype114.end(); ++_iter115) {
      xfer += prot_->serializedSizeI32((*_iter115));
    }
    xfer += prot_->serializedSizeListEnd();
  }
  else {
    xfer += prot_->serializedSizeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeListEnd();
  }
  xfer += prot_->serializedFieldSize("set_custom_ref", apache::thrift::protocol::T_SET, 8);
  if (this->set_custom_ref) {
    const auto& _rtype116 = *this->set_custom_ref;
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, _rtype116.size());
    for (auto _iter117 = _rtype116.begin(); _iter117 != _rtype116.end(); ++_iter117) {
      xfer += prot_->serializedSizeI32((*_iter117));
    }
    xfer += prot_->serializedSizeSetEnd();
  }
  else {
    xfer += prot_->serializedSizeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->serializedSizeSetEnd();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithContainers::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithContainers");
  xfer += prot_->writeFieldBegin("list_ref", apache::thrift::protocol::T_LIST, 1);
  if (this->list_ref) {
    const auto& _rtype118 = *this->list_ref;
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, _rtype118.size());
    for (auto _iter119 = _rtype118.begin(); _iter119 != _rtype118.end(); ++_iter119) {
      xfer += prot_->writeI32((*_iter119));
    }
    xfer += prot_->writeListEnd();
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_ref", apache::thrift::protocol::T_SET, 2);
  if (this->set_ref) {
    const auto& _rtype120 = *this->set_ref;
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, _rtype120.size());
    for (auto _iter121 = _rtype120.begin(); _iter121 != _rtype120.end(); ++_iter121) {
      xfer += prot_->writeI32((*_iter121));
    }
    xfer += prot_->writeSetEnd();
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("map_ref", apache::thrift::protocol::T_MAP, 3);
  if (this->map_ref) {
    const auto& _rtype122 = *this->map_ref;
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype122.size());
    for (auto _iter123 = _rtype122.begin(); _iter123 != _rtype122.end(); ++_iter123) {
      xfer += prot_->writeI32(_iter123->first);
      xfer += prot_->writeI32(_iter123->second);
    }
    xfer += prot_->writeMapEnd();
  }
  else {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("list_ref_unique", apache::thrift::protocol::T_LIST, 4);
  if (this->list_ref_unique) {
    const auto& _rtype124 = *this->list_ref_unique;
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, _rtype124.size());
    for (auto _iter125 = _rtype124.begin(); _iter125 != _rtype124.end(); ++_iter125) {
      xfer += prot_->writeI32((*_iter125));
    }
    xfer += prot_->writeListEnd();
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_ref_shared", apache::thrift::protocol::T_SET, 5);
  if (this->set_ref_shared) {
    const auto& _rtype126 = *this->set_ref_shared;
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, _rtype126.size());
    for (auto _iter127 = _rtype126.begin(); _iter127 != _rtype126.end(); ++_iter127) {
      xfer += prot_->writeI32((*_iter127));
    }
    xfer += prot_->writeSetEnd();
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("map_ref_custom", apache::thrift::protocol::T_MAP, 6);
  if (this->map_ref_custom) {
    const auto& _rtype128 = *this->map_ref_custom;
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, _rtype128.size());
    for (auto _iter129 = _rtype128.begin(); _iter129 != _rtype128.end(); ++_iter129) {
      xfer += prot_->writeI32(_iter129->first);
      xfer += prot_->writeI32(_iter129->second);
    }
    xfer += prot_->writeMapEnd();
  }
  else {
    xfer += prot_->writeMapBegin(apache::thrift::protocol::T_I32, apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeMapEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("list_ref_shared_const", apache::thrift::protocol::T_LIST, 7);
  if (this->list_ref_shared_const) {
    const auto& _rtype130 = *this->list_ref_shared_const;
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, _rtype130.size());
    for (auto _iter131 = _rtype130.begin(); _iter131 != _rtype130.end(); ++_iter131) {
      xfer += prot_->writeI32((*_iter131));
    }
    xfer += prot_->writeListEnd();
  }
  else {
    xfer += prot_->writeListBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeListEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("set_custom_ref", apache::thrift::protocol::T_SET, 8);
  if (this->set_custom_ref) {
    const auto& _rtype132 = *this->set_custom_ref;
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, _rtype132.size());
    for (auto _iter133 = _rtype132.begin(); _iter133 != _rtype132.end(); ++_iter133) {
      xfer += prot_->writeI32((*_iter133));
    }
    xfer += prot_->writeSetEnd();
  }
  else {
    xfer += prot_->writeSetBegin(apache::thrift::protocol::T_I32, 0);
    xfer += prot_->writeSetEnd();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

template <class Protocol_>
uint32_t StructWithSharedConst::read(Protocol_* iprot) {
  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::TProtocolException;

  bool isset_req_shared_const = false;

  while (true) {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    if (fid == std::numeric_limits<int16_t>::min()) {
      if (fname == "opt_shared_const") {
        fid = 1;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "shared_const") {
        fid = 2;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
      else if (fname == "req_shared_const") {
        fid = 3;
        ftype = apache::thrift::protocol::T_STRUCT;
      }
    }
    switch (fid) {
      case 1:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->opt_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype134(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype134.get());
          this->opt_shared_const = std::move(_ptype134);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 2:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype135(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype135.get());
          this->shared_const = std::move(_ptype135);
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      case 3:
      {
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          using element_type = typename std::remove_const<typename std::remove_reference<decltype(this->req_shared_const)>::type::element_type>::type;
          std::unique_ptr<element_type> _ptype136(new element_type());
          xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::read(iprot, _ptype136.get());
          this->req_shared_const = std::move(_ptype136);
          isset_req_shared_const = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      }
      default:
      {
        xfer += iprot->skip(ftype);
        break;
      }
    }
    xfer += iprot->readFieldEnd();
  }
  xfer += iprot->readStructEnd();

  if (!isset_req_shared_const) {
    throw TProtocolException(TProtocolException::MISSING_REQUIRED_FIELD, "Required field 'req_shared_const' was not found in serialized data! Struct: StructWithSharedConst");
  }
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::serializedSize(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->serializedFieldSize("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSize(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::serializedSizeZC(Protocol_ const* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->serializedStructSize("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->serializedFieldSize("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->serializedStructSize("MyField");
      xfer += prot_->serializedSizeStop();
    }
  }
  xfer += prot_->serializedFieldSize("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedFieldSize("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::serializedSizeZC(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->serializedStructSize("MyField");
    xfer += prot_->serializedSizeStop();
  }
  xfer += prot_->serializedSizeStop();
  return xfer;
}

template <class Protocol_>
uint32_t StructWithSharedConst::write(Protocol_* prot_) const {
  uint32_t xfer = 0;
  xfer += prot_->writeStructBegin("StructWithSharedConst");
  if (this->opt_shared_const) {
    xfer += prot_->writeFieldBegin("opt_shared_const", apache::thrift::protocol::T_STRUCT, 1);
    if (this->opt_shared_const) {
      xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->opt_shared_const.get());
    }
    else {
      xfer += prot_->writeStructBegin("MyField");
      xfer += prot_->writeStructEnd();
      xfer += prot_->writeFieldStop();
    }
    xfer += prot_->writeFieldEnd();
  }
  xfer += prot_->writeFieldBegin("shared_const", apache::thrift::protocol::T_STRUCT, 2);
  if (this->shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->shared_const.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldBegin("req_shared_const", apache::thrift::protocol::T_STRUCT, 3);
  if (this->req_shared_const) {
    xfer += ::apache::thrift::Cpp2Ops<  ::cpp2::MyField>::write(prot_, this->req_shared_const.get());
  }
  else {
    xfer += prot_->writeStructBegin("MyField");
    xfer += prot_->writeStructEnd();
    xfer += prot_->writeFieldStop();
  }
  xfer += prot_->writeFieldEnd();
  xfer += prot_->writeFieldStop();
  xfer += prot_->writeStructEnd();
  return xfer;
}

} // cpp2
namespace apache { namespace thrift {

}} // apache::thrift
namespace cpp2 {

} // cpp2
