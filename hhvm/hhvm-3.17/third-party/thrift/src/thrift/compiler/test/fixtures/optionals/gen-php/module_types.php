<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
require_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


final class Animal {
  const DOG = 1;
  const CAT = 2;
  const TARANTULA = 3;
  static public $__names = array(
    1 => 'DOG',
    2 => 'CAT',
    3 => 'TARANTULA',
  );
  static public $__values = array(
    'DOG' => 1,
    'CAT' => 2,
    'TARANTULA' => 3,
  );
}

$GLOBALS['E_Animal'] = Animal::$__values;

class Color implements IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'red',
      'type' => TType::DOUBLE,
      ),
    2 => array(
      'var' => 'green',
      'type' => TType::DOUBLE,
      ),
    3 => array(
      'var' => 'blue',
      'type' => TType::DOUBLE,
      ),
    4 => array(
      'var' => 'alpha',
      'type' => TType::DOUBLE,
      ),
    );
  public static $_TFIELDMAP = array(
    'red' => 1,
    'green' => 2,
    'blue' => 3,
    'alpha' => 4,
  );
  const STRUCTURAL_ID = 5495510740722957663;
  public $red = null;
  public $green = null;
  public $blue = null;
  public $alpha = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['red'])) {
        $this->red = $vals['red'];
      }
      if (isset($vals['green'])) {
        $this->green = $vals['green'];
      }
      if (isset($vals['blue'])) {
        $this->blue = $vals['blue'];
      }
      if (isset($vals['alpha'])) {
        $this->alpha = $vals['alpha'];
      }
    } else if ($vals) {
      throw new TProtocolException(
        'Color constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Color';
  }

  public static function __set_state($vals) {
    return new Color($vals);
  }

  public function read(TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->red);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->green);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->blue);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->alpha);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Color');
    if ($this->red !== null) {
      $xfer += $output->writeFieldBegin('red', TType::DOUBLE, 1);
      $xfer += $output->writeDouble($this->red);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->green !== null) {
      $xfer += $output->writeFieldBegin('green', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->green);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->blue !== null) {
      $xfer += $output->writeFieldBegin('blue', TType::DOUBLE, 3);
      $xfer += $output->writeDouble($this->blue);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->alpha !== null) {
      $xfer += $output->writeFieldBegin('alpha', TType::DOUBLE, 4);
      $xfer += $output->writeDouble($this->alpha);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Vehicle implements IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'color',
      'type' => TType::STRUCT,
      'class' => 'Color',
      ),
    2 => array(
      'var' => 'licensePlate',
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'description',
      'type' => TType::STRING,
      ),
    4 => array(
      'var' => 'name',
      'type' => TType::STRING,
      ),
    );
  public static $_TFIELDMAP = array(
    'color' => 1,
    'licensePlate' => 2,
    'description' => 3,
    'name' => 4,
  );
  const STRUCTURAL_ID = 3969275857372978790;
  public $color = null;
  public $licensePlate = null;
  public $description = null;
  public $name = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['color'])) {
        $this->color = $vals['color'];
      }
      if (isset($vals['licensePlate'])) {
        $this->licensePlate = $vals['licensePlate'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    } else if ($vals) {
      throw new TProtocolException(
        'Vehicle constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Vehicle';
  }

  public static function __set_state($vals) {
    return new Vehicle($vals);
  }

  public function read(TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->color = new Color();
            $xfer += $this->color->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->licensePlate);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Vehicle');
    if ($this->color !== null) {
      if (!is_object($this->color)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('color', TType::STRUCT, 1);
      $xfer += $this->color->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->licensePlate) && $this->licensePlate !== null) {
      $xfer += $output->writeFieldBegin('licensePlate', TType::STRING, 2);
      $xfer += $output->writeString($this->licensePlate);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->description) && $this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 3);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->name) && $this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 4);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Person implements IThriftStruct {
  static $_TSPEC = array(
    1 => array(
      'var' => 'id',
      'type' => TType::I64,
      ),
    2 => array(
      'var' => 'name',
      'type' => TType::STRING,
      ),
    3 => array(
      'var' => 'age',
      'type' => TType::I16,
      ),
    4 => array(
      'var' => 'address',
      'type' => TType::STRING,
      ),
    5 => array(
      'var' => 'favoriteColor',
      'type' => TType::STRUCT,
      'class' => 'Color',
      ),
    6 => array(
      'var' => 'friends',
      'type' => TType::SET,
      'etype' => TType::I64,
      'elem' => array(
        'type' => TType::I64,
        ),
        'format' => 'array',
      ),
    7 => array(
      'var' => 'bestFriend',
      'type' => TType::I64,
      ),
    8 => array(
      'var' => 'petNames',
      'type' => TType::MAP,
      'ktype' => TType::I32,
      'vtype' => TType::STRING,
      'key' => array(
        'type' => TType::I32,
        'enum' => 'Animal',
      ),
      'val' => array(
        'type' => TType::STRING,
        ),
        'format' => 'array',
      ),
    9 => array(
      'var' => 'afraidOfAnimal',
      'type' => TType::I32,
      'enum' => 'Animal',
      ),
    10 => array(
      'var' => 'vehicles',
      'type' => TType::LST,
      'etype' => TType::STRUCT,
      'elem' => array(
        'type' => TType::STRUCT,
        'class' => 'Vehicle',
        ),
        'format' => 'array',
      ),
    );
  public static $_TFIELDMAP = array(
    'id' => 1,
    'name' => 2,
    'age' => 3,
    'address' => 4,
    'favoriteColor' => 5,
    'friends' => 6,
    'bestFriend' => 7,
    'petNames' => 8,
    'afraidOfAnimal' => 9,
    'vehicles' => 10,
  );
  const STRUCTURAL_ID = 5615342512964403351;
  public $id = null;
  public $name = null;
  public $age = null;
  public $address = null;
  public $favoriteColor = null;
  public $friends = null;
  public $bestFriend = null;
  public $petNames = null;
  public $afraidOfAnimal = null;
  public $vehicles = null;

  public function __construct($vals=null) {
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['age'])) {
        $this->age = $vals['age'];
      }
      if (isset($vals['address'])) {
        $this->address = $vals['address'];
      }
      if (isset($vals['favoriteColor'])) {
        $this->favoriteColor = $vals['favoriteColor'];
      }
      if (isset($vals['friends'])) {
        $this->friends = $vals['friends'];
      }
      if (isset($vals['bestFriend'])) {
        $this->bestFriend = $vals['bestFriend'];
      }
      if (isset($vals['petNames'])) {
        $this->petNames = $vals['petNames'];
      }
      if (isset($vals['afraidOfAnimal'])) {
        $this->afraidOfAnimal = $vals['afraidOfAnimal'];
      }
      if (isset($vals['vehicles'])) {
        $this->vehicles = $vals['vehicles'];
      }
    } else if ($vals) {
      throw new TProtocolException(
        'Person constructor must be passed array or null'
      );
    }
  }

  public function getName() {
    return 'Person';
  }

  public static function __set_state($vals) {
    return new Person($vals);
  }

  public function read(TProtocol $input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      if (!$fid && $fname !== null) {
        if (isset(self::$_TFIELDMAP[$fname])) {
          $fid = self::$_TFIELDMAP[$fname];
          $ftype = self::$_TSPEC[$fid]['type'];
        }
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->age);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->address);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->favoriteColor = new Color();
            $xfer += $this->favoriteColor->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::SET) {
            $this->friends = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readSetBegin($_etype3, $_size0);
            for ($_i4 = 0; $_size0 === null || $_i4 < $_size0; ++$_i4)
            {
              if ($_size0 === null && !$input->readSetHasNext()) {
                break;
              }
              $elem5 = null;
              $xfer += $input->readI64($elem5);
              $this->friends[$elem5] = true;
            }
            $xfer += $input->readSetEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->bestFriend);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->petNames = array();
            $_size6 = 0;
            $_ktype7 = 0;
            $_vtype8 = 0;
            $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
            for ($_i10 = 0; $_size6 === null || $_i10 < $_size6; ++$_i10)
            {
              if ($_size6 === null && !$input->readMapHasNext()) {
                break;
              }
              $key11 = 0;
              $val12 = '';
              $xfer += $input->readI32($key11);
              $xfer += $input->readString($val12);
              $this->petNames[$key11] = $val12;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->afraidOfAnimal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->vehicles = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_size13 === null || $_i17 < $_size13; ++$_i17)
            {
              if ($_size13 === null && !$input->readListHasNext()) {
                break;
              }
              $elem18 = null;
              $elem18 = new Vehicle();
              $xfer += $elem18->read($input);
              $this->vehicles []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write(TProtocol $output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Person');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I64, 1);
      $xfer += $output->writeI64($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->age) && $this->age !== null) {
      $xfer += $output->writeFieldBegin('age', TType::I16, 3);
      $xfer += $output->writeI16($this->age);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->address) && $this->address !== null) {
      $xfer += $output->writeFieldBegin('address', TType::STRING, 4);
      $xfer += $output->writeString($this->address);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->favoriteColor) && $this->favoriteColor !== null) {
      if (!is_object($this->favoriteColor)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('favoriteColor', TType::STRUCT, 5);
      $xfer += $this->favoriteColor->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->friends) && $this->friends !== null) {
      if (!is_array($this->friends) && !(($this->friends instanceof Iterator || $this->friends instanceof IteratorAggregate) && $this->friends instanceof Countable)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('friends', TType::SET, 6);
      {
        $output->writeSetBegin(TType::I64, count($this->friends));
        {
          foreach ($this->friends as $iter0 => $true)
          {
            $xfer += $output->writeI64($iter0);
          }
        }
        $output->writeSetEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->bestFriend) && $this->bestFriend !== null) {
      $xfer += $output->writeFieldBegin('bestFriend', TType::I64, 7);
      $xfer += $output->writeI64($this->bestFriend);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->petNames) && $this->petNames !== null) {
      if (!is_array($this->petNames) && !(($this->petNames instanceof Iterator || $this->petNames instanceof IteratorAggregate) && $this->petNames instanceof Countable)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('petNames', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->petNames));
        {
          foreach ($this->petNames as $kiter1 => $viter2)
          {
            $xfer += $output->writeI32($kiter1);
            $xfer += $output->writeString($viter2);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->afraidOfAnimal) && $this->afraidOfAnimal !== null) {
      $xfer += $output->writeFieldBegin('afraidOfAnimal', TType::I32, 9);
      $xfer += $output->writeI32($this->afraidOfAnimal);
      $xfer += $output->writeFieldEnd();
    }
    if (isset($this->vehicles) && $this->vehicles !== null) {
      if (!is_array($this->vehicles) && !(($this->vehicles instanceof Iterator || $this->vehicles instanceof IteratorAggregate) && $this->vehicles instanceof Countable)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vehicles', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRUCT, count($this->vehicles));
        {
          foreach ($this->vehicles as $iter3)
          {
            $xfer += $iter3->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
