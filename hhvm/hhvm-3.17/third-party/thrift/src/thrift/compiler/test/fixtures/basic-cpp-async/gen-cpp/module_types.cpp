/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "thrift/compiler/test/fixtures/basic-cpp-async/gen-cpp/module_types.h"

#include <algorithm>
#include <string.h>



const typename apache::thrift::detail::TEnumMapFactory<MyEnum, int>::ValuesToNamesMapType _MyEnum_VALUES_TO_NAMES = apache::thrift::detail::TEnumMapFactory<MyEnum, int>::makeValuesToNamesMap();

const typename apache::thrift::detail::TEnumMapFactory<MyEnum, int>::NamesToValuesMapType _MyEnum_NAMES_TO_VALUES = apache::thrift::detail::TEnumMapFactory<MyEnum, int>::makeNamesToValuesMap();


namespace apache { namespace thrift {
template<>
folly::Range<const std::pair< ::MyEnum, folly::StringPiece>*> TEnumTraitsBase< ::MyEnum>::enumerators() {
  static constexpr const std::pair< ::MyEnum, folly::StringPiece> storage[2] = {
    { ::MyEnum::MyValue1, "MyValue1"},
    { ::MyEnum::MyValue2, "MyValue2"},
  };
  return folly::range(storage);
}

template<>
const char* TEnumTraitsBase< ::MyEnum>::findName( ::MyEnum value) {
return findName( ::_MyEnum_VALUES_TO_NAMES, value);
}

template<>
bool TEnumTraitsBase< ::MyEnum>::findValue(const char* name,  ::MyEnum* out) {
return findValue( ::_MyEnum_NAMES_TO_VALUES, name, out);
}
}} // apache::thrift


const uint64_t MyStruct::_reflection_id;
void MyStruct::_reflection_register(::apache::thrift::reflection::Schema& schema) {
   ::module_reflection_::reflectionInitializer_7958971832214294220(schema);
}

bool MyStruct::operator == (const MyStruct & rhs) const {
  if (!(this->MyIntField == rhs.MyIntField))
    return false;
  if (!(this->MyStringField == rhs.MyStringField))
    return false;
  return true;
}

void MyStruct::__clear() {
  MyIntField = 0;
  MyStringField = "";
  __isset.__clear();
}
void swap(MyStruct &a, MyStruct &b) {
  using ::std::swap;
  (void)a;
  (void)b;
  swap(a.MyIntField, b.MyIntField);
  swap(a.MyStringField, b.MyStringField);
  swap(a.__isset, b.__isset);
}

void merge(const MyStruct& from, MyStruct& to) {
  using apache::thrift::merge;
  merge(from.MyIntField, to.MyIntField);
  to.__isset.MyIntField = to.__isset.MyIntField || from.__isset.MyIntField;
  merge(from.MyStringField, to.MyStringField);
  to.__isset.MyStringField = to.__isset.MyStringField || from.__isset.MyStringField;
}

void merge(MyStruct&& from, MyStruct& to) {
  using apache::thrift::merge;
  merge(std::move(from.MyIntField), to.MyIntField);
  to.__isset.MyIntField = to.__isset.MyIntField || from.__isset.MyIntField;
  merge(std::move(from.MyStringField), to.MyStringField);
  to.__isset.MyStringField = to.__isset.MyStringField || from.__isset.MyStringField;
}


