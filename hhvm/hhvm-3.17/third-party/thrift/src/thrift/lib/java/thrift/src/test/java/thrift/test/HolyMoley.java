/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class HolyMoley implements TBase, java.io.Serializable, Cloneable, Comparable<HolyMoley> {
  private static final TStruct STRUCT_DESC = new TStruct("HolyMoley");
  private static final TField BIG_FIELD_DESC = new TField("big", TType.LIST, (short)1);
  private static final TField CONTAIN_FIELD_DESC = new TField("contain", TType.SET, (short)2);
  private static final TField BONKS_FIELD_DESC = new TField("bonks", TType.MAP, (short)3);
  private static final TField BONKERS_FIELD_DESC = new TField("bonkers", TType.MAP, (short)4);

  public List<OneOfEach> big;
  public Set<List<String>> contain;
  public Map<String,List<Bonk>> bonks;
  public Map<String,List<Bonk>> bonkers;
  public static final int BIG = 1;
  public static final int CONTAIN = 2;
  public static final int BONKS = 3;
  public static final int BONKERS = 4;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(BIG, new FieldMetaData("big", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, OneOfEach.class))));
    tmpMetaDataMap.put(CONTAIN, new FieldMetaData("contain", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.STRING)))));
    tmpMetaDataMap.put(BONKS, new FieldMetaData("bonks", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, Bonk.class)))));
    tmpMetaDataMap.put(BONKERS, new FieldMetaData("bonkers", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new ListMetaData(TType.LIST, 
                new StructMetaData(TType.STRUCT, Bonk.class)))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(HolyMoley.class, metaDataMap);
  }

  public HolyMoley() {
  }

  public HolyMoley(
    List<OneOfEach> big,
    Set<List<String>> contain,
    Map<String,List<Bonk>> bonks,
    Map<String,List<Bonk>> bonkers)
  {
    this();
    this.big = big;
    this.contain = contain;
    this.bonks = bonks;
    this.bonkers = bonkers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public HolyMoley(HolyMoley other) {
    if (other.isSetBig()) {
      this.big = TBaseHelper.deepCopy(other.big);
    }
    if (other.isSetContain()) {
      this.contain = TBaseHelper.deepCopy(other.contain);
    }
    if (other.isSetBonks()) {
      this.bonks = TBaseHelper.deepCopy(other.bonks);
    }
    if (other.isSetBonkers()) {
      this.bonkers = TBaseHelper.deepCopy(other.bonkers);
    }
  }

  public HolyMoley deepCopy() {
    return new HolyMoley(this);
  }

  @Deprecated
  public HolyMoley clone() {
    return new HolyMoley(this);
  }

  public List<OneOfEach>  getBig() {
    return this.big;
  }

  public HolyMoley setBig(List<OneOfEach> big) {
    this.big = big;
    return this;
  }

  public void unsetBig() {
    this.big = null;
  }

  // Returns true if field big is set (has been assigned a value) and false otherwise
  public boolean isSetBig() {
    return this.big != null;
  }

  public void setBigIsSet(boolean value) {
    if (!value) {
      this.big = null;
    }
  }

  public Set<List<String>>  getContain() {
    return this.contain;
  }

  public HolyMoley setContain(Set<List<String>> contain) {
    this.contain = contain;
    return this;
  }

  public void unsetContain() {
    this.contain = null;
  }

  // Returns true if field contain is set (has been assigned a value) and false otherwise
  public boolean isSetContain() {
    return this.contain != null;
  }

  public void setContainIsSet(boolean value) {
    if (!value) {
      this.contain = null;
    }
  }

  public Map<String,List<Bonk>>  getBonks() {
    return this.bonks;
  }

  public HolyMoley setBonks(Map<String,List<Bonk>> bonks) {
    this.bonks = bonks;
    return this;
  }

  public void unsetBonks() {
    this.bonks = null;
  }

  // Returns true if field bonks is set (has been assigned a value) and false otherwise
  public boolean isSetBonks() {
    return this.bonks != null;
  }

  public void setBonksIsSet(boolean value) {
    if (!value) {
      this.bonks = null;
    }
  }

  public Map<String,List<Bonk>>  getBonkers() {
    return this.bonkers;
  }

  public HolyMoley setBonkers(Map<String,List<Bonk>> bonkers) {
    this.bonkers = bonkers;
    return this;
  }

  public void unsetBonkers() {
    this.bonkers = null;
  }

  // Returns true if field bonkers is set (has been assigned a value) and false otherwise
  public boolean isSetBonkers() {
    return this.bonkers != null;
  }

  public void setBonkersIsSet(boolean value) {
    if (!value) {
      this.bonkers = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case BIG:
      if (value == null) {
        unsetBig();
      } else {
        setBig((List<OneOfEach>)value);
      }
      break;

    case CONTAIN:
      if (value == null) {
        unsetContain();
      } else {
        setContain((Set<List<String>>)value);
      }
      break;

    case BONKS:
      if (value == null) {
        unsetBonks();
      } else {
        setBonks((Map<String,List<Bonk>>)value);
      }
      break;

    case BONKERS:
      if (value == null) {
        unsetBonkers();
      } else {
        setBonkers((Map<String,List<Bonk>>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case BIG:
      return getBig();

    case CONTAIN:
      return getContain();

    case BONKS:
      return getBonks();

    case BONKERS:
      return getBonkers();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case BIG:
      return isSetBig();
    case CONTAIN:
      return isSetContain();
    case BONKS:
      return isSetBonks();
    case BONKERS:
      return isSetBonkers();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof HolyMoley)
      return this.equals((HolyMoley)that);
    return false;
  }

  public boolean equals(HolyMoley that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_big = true && this.isSetBig();
    boolean that_present_big = true && that.isSetBig();
    if (this_present_big || that_present_big) {
      if (!(this_present_big && that_present_big))
        return false;
      if (!TBaseHelper.equalsNobinary(this.big, that.big))
        return false;
    }

    boolean this_present_contain = true && this.isSetContain();
    boolean that_present_contain = true && that.isSetContain();
    if (this_present_contain || that_present_contain) {
      if (!(this_present_contain && that_present_contain))
        return false;
      if (!TBaseHelper.equalsNobinary(this.contain, that.contain))
        return false;
    }

    boolean this_present_bonks = true && this.isSetBonks();
    boolean that_present_bonks = true && that.isSetBonks();
    if (this_present_bonks || that_present_bonks) {
      if (!(this_present_bonks && that_present_bonks))
        return false;
      if (!TBaseHelper.equalsNobinary(this.bonks, that.bonks))
        return false;
    }

    boolean this_present_bonkers = true && this.isSetBonkers();
    boolean that_present_bonkers = true && that.isSetBonkers();
    if (this_present_bonkers || that_present_bonkers) {
      if (!(this_present_bonkers && that_present_bonkers))
        return false;
      if (!TBaseHelper.equalsNobinary(this.bonkers, that.bonkers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(HolyMoley other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBig()).compareTo(other.isSetBig());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(big, other.big);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetContain()).compareTo(other.isSetContain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(contain, other.contain);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBonks()).compareTo(other.isSetBonks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(bonks, other.bonks);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBonkers()).compareTo(other.isSetBonkers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(bonkers, other.bonkers);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case BIG:
          if (field.type == TType.LIST) {
            {
              TList _list142 = iprot.readListBegin();
              this.big = new ArrayList<OneOfEach>(Math.max(0, _list142.size));
              for (int _i143 = 0; 
                   (_list142.size < 0) ? iprot.peekList() : (_i143 < _list142.size); 
                   ++_i143)
              {
                OneOfEach _elem144;
                _elem144 = new OneOfEach();
                _elem144.read(iprot);
                this.big.add(_elem144);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTAIN:
          if (field.type == TType.SET) {
            {
              TSet _set145 = iprot.readSetBegin();
              this.contain = new HashSet<List<String>>(Math.max(0, 2*_set145.size));
              for (int _i146 = 0; 
                   (_set145.size < 0) ? iprot.peekSet() : (_i146 < _set145.size); 
                   ++_i146)
              {
                List<String> _elem147;
                {
                  TList _list148 = iprot.readListBegin();
                  _elem147 = new ArrayList<String>(Math.max(0, _list148.size));
                  for (int _i149 = 0; 
                       (_list148.size < 0) ? iprot.peekList() : (_i149 < _list148.size); 
                       ++_i149)
                  {
                    String _elem150;
                    _elem150 = iprot.readString();
                    _elem147.add(_elem150);
                  }
                  iprot.readListEnd();
                }
                this.contain.add(_elem147);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BONKS:
          if (field.type == TType.MAP) {
            {
              TMap _map151 = iprot.readMapBegin();
              this.bonks = new HashMap<String,List<Bonk>>(Math.max(0, 2*_map151.size));
              for (int _i152 = 0; 
                   (_map151.size < 0) ? iprot.peekMap() : (_i152 < _map151.size); 
                   ++_i152)
              {
                String _key153;
                List<Bonk> _val154;
                _key153 = iprot.readString();
                {
                  TList _list155 = iprot.readListBegin();
                  _val154 = new ArrayList<Bonk>(Math.max(0, _list155.size));
                  for (int _i156 = 0; 
                       (_list155.size < 0) ? iprot.peekList() : (_i156 < _list155.size); 
                       ++_i156)
                  {
                    Bonk _elem157;
                    _elem157 = new Bonk();
                    _elem157.read(iprot);
                    _val154.add(_elem157);
                  }
                  iprot.readListEnd();
                }
                this.bonks.put(_key153, _val154);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BONKERS:
          if (field.type == TType.MAP) {
            {
              TMap _map158 = iprot.readMapBegin();
              this.bonkers = new HashMap<String,List<Bonk>>(Math.max(0, 2*_map158.size));
              for (int _i159 = 0; 
                   (_map158.size < 0) ? iprot.peekMap() : (_i159 < _map158.size); 
                   ++_i159)
              {
                String _key160;
                List<Bonk> _val161;
                _key160 = iprot.readString();
                {
                  TList _list162 = iprot.readListBegin();
                  _val161 = new ArrayList<Bonk>(Math.max(0, _list162.size));
                  for (int _i163 = 0; 
                       (_list162.size < 0) ? iprot.peekList() : (_i163 < _list162.size); 
                       ++_i163)
                  {
                    Bonk _elem164;
                    _elem164 = new Bonk();
                    _elem164.read(iprot);
                    _val161.add(_elem164);
                  }
                  iprot.readListEnd();
                }
                this.bonkers.put(_key160, _val161);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.big != null) {
      oprot.writeFieldBegin(BIG_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.big.size()));
        for (OneOfEach _iter165 : this.big)        {
          _iter165.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.contain != null) {
      oprot.writeFieldBegin(CONTAIN_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.LIST, this.contain.size()));
        for (List<String> _iter166 : this.contain)        {
          {
            oprot.writeListBegin(new TList(TType.STRING, _iter166.size()));
            for (String _iter167 : _iter166)            {
              oprot.writeString(_iter167);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.bonks != null) {
      oprot.writeFieldBegin(BONKS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.bonks.size()));
        for (Map.Entry<String, List<Bonk>> _iter168 : this.bonks.entrySet())        {
          oprot.writeString(_iter168.getKey());
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter168.getValue().size()));
            for (Bonk _iter169 : _iter168.getValue())            {
              _iter169.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.bonkers != null) {
      oprot.writeFieldBegin(BONKERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.bonkers.size()));
        for (Map.Entry<String, List<Bonk>> _iter170 : this.bonkers.entrySet())        {
          oprot.writeString(_iter170.getKey());
          {
            oprot.writeListBegin(new TList(TType.STRUCT, _iter170.getValue().size()));
            for (Bonk _iter171 : _iter170.getValue())            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("HolyMoley");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("big");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBig() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBig(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("contain");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getContain() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getContain(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("bonks");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBonks() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBonks(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("bonkers");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBonkers() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBonkers(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

