/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class OneOfEach implements TBase, java.io.Serializable, Cloneable, Comparable<OneOfEach> {
  private static final TStruct STRUCT_DESC = new TStruct("OneOfEach");
  private static final TField IM_TRUE_FIELD_DESC = new TField("im_true", TType.BOOL, (short)1);
  private static final TField IM_FALSE_FIELD_DESC = new TField("im_false", TType.BOOL, (short)2);
  private static final TField A_BITE_FIELD_DESC = new TField("a_bite", TType.BYTE, (short)3);
  private static final TField INTEGER16_FIELD_DESC = new TField("integer16", TType.I16, (short)4);
  private static final TField INTEGER32_FIELD_DESC = new TField("integer32", TType.I32, (short)5);
  private static final TField INTEGER64_FIELD_DESC = new TField("integer64", TType.I64, (short)6);
  private static final TField DOUBLE_PRECISION_FIELD_DESC = new TField("double_precision", TType.DOUBLE, (short)7);
  private static final TField SOME_CHARACTERS_FIELD_DESC = new TField("some_characters", TType.STRING, (short)8);
  private static final TField ZOMG_UNICODE_FIELD_DESC = new TField("zomg_unicode", TType.STRING, (short)9);
  private static final TField WHAT_WHO_FIELD_DESC = new TField("what_who", TType.BOOL, (short)10);
  private static final TField BASE64_FIELD_DESC = new TField("base64", TType.STRING, (short)11);
  private static final TField BYTE_LIST_FIELD_DESC = new TField("byte_list", TType.LIST, (short)12);
  private static final TField I16_LIST_FIELD_DESC = new TField("i16_list", TType.LIST, (short)13);
  private static final TField I64_LIST_FIELD_DESC = new TField("i64_list", TType.LIST, (short)14);
  private static final TField STRING_STRING_MAP_FIELD_DESC = new TField("string_string_map", TType.MAP, (short)15);
  private static final TField STRING_STRING_HASH_MAP_FIELD_DESC = new TField("string_string_hash_map", TType.MAP, (short)16);
  private static final TField FLOAT_PRECISION_FIELD_DESC = new TField("float_precision", TType.FLOAT, (short)17);
  private static final TField RANK_MAP_FIELD_DESC = new TField("rank_map", TType.MAP, (short)18);
  private static final TField TWO_INTS_UNINIT_FIELD_DESC = new TField("two_ints_uninit", TType.STRUCT, (short)19);
  private static final TField TWO_INTS_INIT_FIELD_DESC = new TField("two_ints_init", TType.STRUCT, (short)20);
  private static final TField LIST_TWO_INTS_UNINIT_FIELD_DESC = new TField("list_two_ints_uninit", TType.LIST, (short)21);
  private static final TField LIST_TWO_INTS_INIT_DEFAULT_FIELD_DESC = new TField("list_two_ints_init_default", TType.LIST, (short)22);
  private static final TField LIST_TWO_INTS_INIT_EXPLICIT_FIELD_DESC = new TField("list_two_ints_init_explicit", TType.LIST, (short)23);
  private static final TField STRING_SET_FIELD_DESC = new TField("string_set", TType.SET, (short)24);
  private static final TField STRING_HASH_SET_FIELD_DESC = new TField("string_hash_set", TType.SET, (short)25);

  public boolean im_true;
  public boolean im_false;
  public byte a_bite;
  public short integer16;
  public int integer32;
  public long integer64;
  public double double_precision;
  public String some_characters;
  public String zomg_unicode;
  public boolean what_who;
  public byte[] base64;
  public List<Byte> byte_list;
  public List<Short> i16_list;
  public List<Long> i64_list;
  public Map<String,String> string_string_map;
  public Map<String,String> string_string_hash_map;
  public float float_precision;
  public Map<Long,Float> rank_map;
  public TwoInts two_ints_uninit;
  public TwoInts two_ints_init;
  public List<TwoInts> list_two_ints_uninit;
  public List<TwoInts> list_two_ints_init_default;
  public List<TwoInts> list_two_ints_init_explicit;
  public Set<String> string_set;
  public Set<String> string_hash_set;
  public static final int IM_TRUE = 1;
  public static final int IM_FALSE = 2;
  public static final int A_BITE = 3;
  public static final int INTEGER16 = 4;
  public static final int INTEGER32 = 5;
  public static final int INTEGER64 = 6;
  public static final int DOUBLE_PRECISION = 7;
  public static final int SOME_CHARACTERS = 8;
  public static final int ZOMG_UNICODE = 9;
  public static final int WHAT_WHO = 10;
  public static final int BASE64 = 11;
  public static final int BYTE_LIST = 12;
  public static final int I16_LIST = 13;
  public static final int I64_LIST = 14;
  public static final int STRING_STRING_MAP = 15;
  public static final int STRING_STRING_HASH_MAP = 16;
  public static final int FLOAT_PRECISION = 17;
  public static final int RANK_MAP = 18;
  public static final int TWO_INTS_UNINIT = 19;
  public static final int TWO_INTS_INIT = 20;
  public static final int LIST_TWO_INTS_UNINIT = 21;
  public static final int LIST_TWO_INTS_INIT_DEFAULT = 22;
  public static final int LIST_TWO_INTS_INIT_EXPLICIT = 23;
  public static final int STRING_SET = 24;
  public static final int STRING_HASH_SET = 25;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __IM_TRUE_ISSET_ID = 0;
  private static final int __IM_FALSE_ISSET_ID = 1;
  private static final int __A_BITE_ISSET_ID = 2;
  private static final int __INTEGER16_ISSET_ID = 3;
  private static final int __INTEGER32_ISSET_ID = 4;
  private static final int __INTEGER64_ISSET_ID = 5;
  private static final int __DOUBLE_PRECISION_ISSET_ID = 6;
  private static final int __WHAT_WHO_ISSET_ID = 7;
  private static final int __FLOAT_PRECISION_ISSET_ID = 8;
  private BitSet __isset_bit_vector = new BitSet(9);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(IM_TRUE, new FieldMetaData("im_true", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(IM_FALSE, new FieldMetaData("im_false", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(A_BITE, new FieldMetaData("a_bite", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(INTEGER16, new FieldMetaData("integer16", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(INTEGER32, new FieldMetaData("integer32", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(INTEGER64, new FieldMetaData("integer64", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(DOUBLE_PRECISION, new FieldMetaData("double_precision", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(SOME_CHARACTERS, new FieldMetaData("some_characters", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(ZOMG_UNICODE, new FieldMetaData("zomg_unicode", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(WHAT_WHO, new FieldMetaData("what_who", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(BASE64, new FieldMetaData("base64", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(BYTE_LIST, new FieldMetaData("byte_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I16_LIST, new FieldMetaData("i16_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(I64_LIST, new FieldMetaData("i64_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(STRING_STRING_MAP, new FieldMetaData("string_string_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(STRING_STRING_HASH_MAP, new FieldMetaData("string_string_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(FLOAT_PRECISION, new FieldMetaData("float_precision", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.FLOAT)));
    tmpMetaDataMap.put(RANK_MAP, new FieldMetaData("rank_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I64), 
            new FieldValueMetaData(TType.FLOAT))));
    tmpMetaDataMap.put(TWO_INTS_UNINIT, new FieldMetaData("two_ints_uninit", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, TwoInts.class)));
    tmpMetaDataMap.put(TWO_INTS_INIT, new FieldMetaData("two_ints_init", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, TwoInts.class)));
    tmpMetaDataMap.put(LIST_TWO_INTS_UNINIT, new FieldMetaData("list_two_ints_uninit", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TwoInts.class))));
    tmpMetaDataMap.put(LIST_TWO_INTS_INIT_DEFAULT, new FieldMetaData("list_two_ints_init_default", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TwoInts.class))));
    tmpMetaDataMap.put(LIST_TWO_INTS_INIT_EXPLICIT, new FieldMetaData("list_two_ints_init_explicit", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, TwoInts.class))));
    tmpMetaDataMap.put(STRING_SET, new FieldMetaData("string_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(STRING_HASH_SET, new FieldMetaData("string_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(OneOfEach.class, metaDataMap);
  }

  public OneOfEach() {
    this.a_bite = (byte)200;

    this.integer16 = (short)33000;

    this.integer64 = 10000000000L;

    this.byte_list = new ArrayList<Byte>();
    this.byte_list.add((byte)1);
    this.byte_list.add((byte)2);
    this.byte_list.add((byte)3);

    this.i16_list = new ArrayList<Short>();
    this.i16_list.add((short)1);
    this.i16_list.add((short)2);
    this.i16_list.add((short)3);

    this.i64_list = new ArrayList<Long>();
    this.i64_list.add(1L);
    this.i64_list.add(2L);
    this.i64_list.add(3L);

    this.two_ints_init = new TwoInts();
    this.two_ints_init.setA(3);
    this.two_ints_init.setB(4);

    this.list_two_ints_init_default = new ArrayList<TwoInts>();
    TwoInts tmp73 = new TwoInts();

    this.list_two_ints_init_default.add(tmp73);
    TwoInts tmp74 = new TwoInts();

    this.list_two_ints_init_default.add(tmp74);

    this.list_two_ints_init_explicit = new ArrayList<TwoInts>();
    TwoInts tmp75 = new TwoInts();
    tmp75.setA(1);
    tmp75.setB(2);

    this.list_two_ints_init_explicit.add(tmp75);
    TwoInts tmp76 = new TwoInts();
    tmp76.setA(3);
    tmp76.setB(4);

    this.list_two_ints_init_explicit.add(tmp76);

  }

  public OneOfEach(
    boolean im_true,
    boolean im_false,
    byte a_bite,
    short integer16,
    int integer32,
    long integer64,
    double double_precision,
    String some_characters,
    String zomg_unicode,
    boolean what_who,
    byte[] base64,
    List<Byte> byte_list,
    List<Short> i16_list,
    List<Long> i64_list,
    Map<String,String> string_string_map,
    Map<String,String> string_string_hash_map,
    float float_precision,
    Map<Long,Float> rank_map,
    TwoInts two_ints_uninit,
    TwoInts two_ints_init,
    List<TwoInts> list_two_ints_uninit,
    List<TwoInts> list_two_ints_init_default,
    List<TwoInts> list_two_ints_init_explicit,
    Set<String> string_set,
    Set<String> string_hash_set)
  {
    this();
    this.im_true = im_true;
    setIm_trueIsSet(true);
    this.im_false = im_false;
    setIm_falseIsSet(true);
    this.a_bite = a_bite;
    setA_biteIsSet(true);
    this.integer16 = integer16;
    setInteger16IsSet(true);
    this.integer32 = integer32;
    setInteger32IsSet(true);
    this.integer64 = integer64;
    setInteger64IsSet(true);
    this.double_precision = double_precision;
    setDouble_precisionIsSet(true);
    this.some_characters = some_characters;
    this.zomg_unicode = zomg_unicode;
    this.what_who = what_who;
    setWhat_whoIsSet(true);
    this.base64 = base64;
    this.byte_list = byte_list;
    this.i16_list = i16_list;
    this.i64_list = i64_list;
    this.string_string_map = string_string_map;
    this.string_string_hash_map = string_string_hash_map;
    this.float_precision = float_precision;
    setFloat_precisionIsSet(true);
    this.rank_map = rank_map;
    this.two_ints_uninit = two_ints_uninit;
    this.two_ints_init = two_ints_init;
    this.list_two_ints_uninit = list_two_ints_uninit;
    this.list_two_ints_init_default = list_two_ints_init_default;
    this.list_two_ints_init_explicit = list_two_ints_init_explicit;
    this.string_set = string_set;
    this.string_hash_set = string_hash_set;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OneOfEach(OneOfEach other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.im_true = TBaseHelper.deepCopy(other.im_true);
    this.im_false = TBaseHelper.deepCopy(other.im_false);
    this.a_bite = TBaseHelper.deepCopy(other.a_bite);
    this.integer16 = TBaseHelper.deepCopy(other.integer16);
    this.integer32 = TBaseHelper.deepCopy(other.integer32);
    this.integer64 = TBaseHelper.deepCopy(other.integer64);
    this.double_precision = TBaseHelper.deepCopy(other.double_precision);
    if (other.isSetSome_characters()) {
      this.some_characters = TBaseHelper.deepCopy(other.some_characters);
    }
    if (other.isSetZomg_unicode()) {
      this.zomg_unicode = TBaseHelper.deepCopy(other.zomg_unicode);
    }
    this.what_who = TBaseHelper.deepCopy(other.what_who);
    if (other.isSetBase64()) {
      this.base64 = TBaseHelper.deepCopy(other.base64);
    }
    if (other.isSetByte_list()) {
      this.byte_list = TBaseHelper.deepCopy(other.byte_list);
    }
    if (other.isSetI16_list()) {
      this.i16_list = TBaseHelper.deepCopy(other.i16_list);
    }
    if (other.isSetI64_list()) {
      this.i64_list = TBaseHelper.deepCopy(other.i64_list);
    }
    if (other.isSetString_string_map()) {
      this.string_string_map = TBaseHelper.deepCopy(other.string_string_map);
    }
    if (other.isSetString_string_hash_map()) {
      this.string_string_hash_map = TBaseHelper.deepCopy(other.string_string_hash_map);
    }
    this.float_precision = TBaseHelper.deepCopy(other.float_precision);
    if (other.isSetRank_map()) {
      this.rank_map = TBaseHelper.deepCopy(other.rank_map);
    }
    if (other.isSetTwo_ints_uninit()) {
      this.two_ints_uninit = TBaseHelper.deepCopy(other.two_ints_uninit);
    }
    if (other.isSetTwo_ints_init()) {
      this.two_ints_init = TBaseHelper.deepCopy(other.two_ints_init);
    }
    if (other.isSetList_two_ints_uninit()) {
      this.list_two_ints_uninit = TBaseHelper.deepCopy(other.list_two_ints_uninit);
    }
    if (other.isSetList_two_ints_init_default()) {
      this.list_two_ints_init_default = TBaseHelper.deepCopy(other.list_two_ints_init_default);
    }
    if (other.isSetList_two_ints_init_explicit()) {
      this.list_two_ints_init_explicit = TBaseHelper.deepCopy(other.list_two_ints_init_explicit);
    }
    if (other.isSetString_set()) {
      this.string_set = TBaseHelper.deepCopy(other.string_set);
    }
    if (other.isSetString_hash_set()) {
      this.string_hash_set = TBaseHelper.deepCopy(other.string_hash_set);
    }
  }

  public OneOfEach deepCopy() {
    return new OneOfEach(this);
  }

  @Deprecated
  public OneOfEach clone() {
    return new OneOfEach(this);
  }

  public boolean  isIm_true() {
    return this.im_true;
  }

  public OneOfEach setIm_true(boolean im_true) {
    this.im_true = im_true;
    setIm_trueIsSet(true);
    return this;
  }

  public void unsetIm_true() {
    __isset_bit_vector.clear(__IM_TRUE_ISSET_ID);
  }

  // Returns true if field im_true is set (has been assigned a value) and false otherwise
  public boolean isSetIm_true() {
    return __isset_bit_vector.get(__IM_TRUE_ISSET_ID);
  }

  public void setIm_trueIsSet(boolean value) {
    __isset_bit_vector.set(__IM_TRUE_ISSET_ID, value);
  }

  public boolean  isIm_false() {
    return this.im_false;
  }

  public OneOfEach setIm_false(boolean im_false) {
    this.im_false = im_false;
    setIm_falseIsSet(true);
    return this;
  }

  public void unsetIm_false() {
    __isset_bit_vector.clear(__IM_FALSE_ISSET_ID);
  }

  // Returns true if field im_false is set (has been assigned a value) and false otherwise
  public boolean isSetIm_false() {
    return __isset_bit_vector.get(__IM_FALSE_ISSET_ID);
  }

  public void setIm_falseIsSet(boolean value) {
    __isset_bit_vector.set(__IM_FALSE_ISSET_ID, value);
  }

  public byte  getA_bite() {
    return this.a_bite;
  }

  public OneOfEach setA_bite(byte a_bite) {
    this.a_bite = a_bite;
    setA_biteIsSet(true);
    return this;
  }

  public void unsetA_bite() {
    __isset_bit_vector.clear(__A_BITE_ISSET_ID);
  }

  // Returns true if field a_bite is set (has been assigned a value) and false otherwise
  public boolean isSetA_bite() {
    return __isset_bit_vector.get(__A_BITE_ISSET_ID);
  }

  public void setA_biteIsSet(boolean value) {
    __isset_bit_vector.set(__A_BITE_ISSET_ID, value);
  }

  public short  getInteger16() {
    return this.integer16;
  }

  public OneOfEach setInteger16(short integer16) {
    this.integer16 = integer16;
    setInteger16IsSet(true);
    return this;
  }

  public void unsetInteger16() {
    __isset_bit_vector.clear(__INTEGER16_ISSET_ID);
  }

  // Returns true if field integer16 is set (has been assigned a value) and false otherwise
  public boolean isSetInteger16() {
    return __isset_bit_vector.get(__INTEGER16_ISSET_ID);
  }

  public void setInteger16IsSet(boolean value) {
    __isset_bit_vector.set(__INTEGER16_ISSET_ID, value);
  }

  public int  getInteger32() {
    return this.integer32;
  }

  public OneOfEach setInteger32(int integer32) {
    this.integer32 = integer32;
    setInteger32IsSet(true);
    return this;
  }

  public void unsetInteger32() {
    __isset_bit_vector.clear(__INTEGER32_ISSET_ID);
  }

  // Returns true if field integer32 is set (has been assigned a value) and false otherwise
  public boolean isSetInteger32() {
    return __isset_bit_vector.get(__INTEGER32_ISSET_ID);
  }

  public void setInteger32IsSet(boolean value) {
    __isset_bit_vector.set(__INTEGER32_ISSET_ID, value);
  }

  public long  getInteger64() {
    return this.integer64;
  }

  public OneOfEach setInteger64(long integer64) {
    this.integer64 = integer64;
    setInteger64IsSet(true);
    return this;
  }

  public void unsetInteger64() {
    __isset_bit_vector.clear(__INTEGER64_ISSET_ID);
  }

  // Returns true if field integer64 is set (has been assigned a value) and false otherwise
  public boolean isSetInteger64() {
    return __isset_bit_vector.get(__INTEGER64_ISSET_ID);
  }

  public void setInteger64IsSet(boolean value) {
    __isset_bit_vector.set(__INTEGER64_ISSET_ID, value);
  }

  public double  getDouble_precision() {
    return this.double_precision;
  }

  public OneOfEach setDouble_precision(double double_precision) {
    this.double_precision = double_precision;
    setDouble_precisionIsSet(true);
    return this;
  }

  public void unsetDouble_precision() {
    __isset_bit_vector.clear(__DOUBLE_PRECISION_ISSET_ID);
  }

  // Returns true if field double_precision is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_precision() {
    return __isset_bit_vector.get(__DOUBLE_PRECISION_ISSET_ID);
  }

  public void setDouble_precisionIsSet(boolean value) {
    __isset_bit_vector.set(__DOUBLE_PRECISION_ISSET_ID, value);
  }

  public String  getSome_characters() {
    return this.some_characters;
  }

  public OneOfEach setSome_characters(String some_characters) {
    this.some_characters = some_characters;
    return this;
  }

  public void unsetSome_characters() {
    this.some_characters = null;
  }

  // Returns true if field some_characters is set (has been assigned a value) and false otherwise
  public boolean isSetSome_characters() {
    return this.some_characters != null;
  }

  public void setSome_charactersIsSet(boolean value) {
    if (!value) {
      this.some_characters = null;
    }
  }

  public String  getZomg_unicode() {
    return this.zomg_unicode;
  }

  public OneOfEach setZomg_unicode(String zomg_unicode) {
    this.zomg_unicode = zomg_unicode;
    return this;
  }

  public void unsetZomg_unicode() {
    this.zomg_unicode = null;
  }

  // Returns true if field zomg_unicode is set (has been assigned a value) and false otherwise
  public boolean isSetZomg_unicode() {
    return this.zomg_unicode != null;
  }

  public void setZomg_unicodeIsSet(boolean value) {
    if (!value) {
      this.zomg_unicode = null;
    }
  }

  public boolean  isWhat_who() {
    return this.what_who;
  }

  public OneOfEach setWhat_who(boolean what_who) {
    this.what_who = what_who;
    setWhat_whoIsSet(true);
    return this;
  }

  public void unsetWhat_who() {
    __isset_bit_vector.clear(__WHAT_WHO_ISSET_ID);
  }

  // Returns true if field what_who is set (has been assigned a value) and false otherwise
  public boolean isSetWhat_who() {
    return __isset_bit_vector.get(__WHAT_WHO_ISSET_ID);
  }

  public void setWhat_whoIsSet(boolean value) {
    __isset_bit_vector.set(__WHAT_WHO_ISSET_ID, value);
  }

  public byte[]  getBase64() {
    return this.base64;
  }

  public OneOfEach setBase64(byte[] base64) {
    this.base64 = base64;
    return this;
  }

  public void unsetBase64() {
    this.base64 = null;
  }

  // Returns true if field base64 is set (has been assigned a value) and false otherwise
  public boolean isSetBase64() {
    return this.base64 != null;
  }

  public void setBase64IsSet(boolean value) {
    if (!value) {
      this.base64 = null;
    }
  }

  public List<Byte>  getByte_list() {
    return this.byte_list;
  }

  public OneOfEach setByte_list(List<Byte> byte_list) {
    this.byte_list = byte_list;
    return this;
  }

  public void unsetByte_list() {
    this.byte_list = null;
  }

  // Returns true if field byte_list is set (has been assigned a value) and false otherwise
  public boolean isSetByte_list() {
    return this.byte_list != null;
  }

  public void setByte_listIsSet(boolean value) {
    if (!value) {
      this.byte_list = null;
    }
  }

  public List<Short>  getI16_list() {
    return this.i16_list;
  }

  public OneOfEach setI16_list(List<Short> i16_list) {
    this.i16_list = i16_list;
    return this;
  }

  public void unsetI16_list() {
    this.i16_list = null;
  }

  // Returns true if field i16_list is set (has been assigned a value) and false otherwise
  public boolean isSetI16_list() {
    return this.i16_list != null;
  }

  public void setI16_listIsSet(boolean value) {
    if (!value) {
      this.i16_list = null;
    }
  }

  public List<Long>  getI64_list() {
    return this.i64_list;
  }

  public OneOfEach setI64_list(List<Long> i64_list) {
    this.i64_list = i64_list;
    return this;
  }

  public void unsetI64_list() {
    this.i64_list = null;
  }

  // Returns true if field i64_list is set (has been assigned a value) and false otherwise
  public boolean isSetI64_list() {
    return this.i64_list != null;
  }

  public void setI64_listIsSet(boolean value) {
    if (!value) {
      this.i64_list = null;
    }
  }

  public Map<String,String>  getString_string_map() {
    return this.string_string_map;
  }

  public OneOfEach setString_string_map(Map<String,String> string_string_map) {
    this.string_string_map = string_string_map;
    return this;
  }

  public void unsetString_string_map() {
    this.string_string_map = null;
  }

  // Returns true if field string_string_map is set (has been assigned a value) and false otherwise
  public boolean isSetString_string_map() {
    return this.string_string_map != null;
  }

  public void setString_string_mapIsSet(boolean value) {
    if (!value) {
      this.string_string_map = null;
    }
  }

  public Map<String,String>  getString_string_hash_map() {
    return this.string_string_hash_map;
  }

  public OneOfEach setString_string_hash_map(Map<String,String> string_string_hash_map) {
    this.string_string_hash_map = string_string_hash_map;
    return this;
  }

  public void unsetString_string_hash_map() {
    this.string_string_hash_map = null;
  }

  // Returns true if field string_string_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetString_string_hash_map() {
    return this.string_string_hash_map != null;
  }

  public void setString_string_hash_mapIsSet(boolean value) {
    if (!value) {
      this.string_string_hash_map = null;
    }
  }

  public float  getFloat_precision() {
    return this.float_precision;
  }

  public OneOfEach setFloat_precision(float float_precision) {
    this.float_precision = float_precision;
    setFloat_precisionIsSet(true);
    return this;
  }

  public void unsetFloat_precision() {
    __isset_bit_vector.clear(__FLOAT_PRECISION_ISSET_ID);
  }

  // Returns true if field float_precision is set (has been assigned a value) and false otherwise
  public boolean isSetFloat_precision() {
    return __isset_bit_vector.get(__FLOAT_PRECISION_ISSET_ID);
  }

  public void setFloat_precisionIsSet(boolean value) {
    __isset_bit_vector.set(__FLOAT_PRECISION_ISSET_ID, value);
  }

  public Map<Long,Float>  getRank_map() {
    return this.rank_map;
  }

  public OneOfEach setRank_map(Map<Long,Float> rank_map) {
    this.rank_map = rank_map;
    return this;
  }

  public void unsetRank_map() {
    this.rank_map = null;
  }

  // Returns true if field rank_map is set (has been assigned a value) and false otherwise
  public boolean isSetRank_map() {
    return this.rank_map != null;
  }

  public void setRank_mapIsSet(boolean value) {
    if (!value) {
      this.rank_map = null;
    }
  }

  public TwoInts  getTwo_ints_uninit() {
    return this.two_ints_uninit;
  }

  public OneOfEach setTwo_ints_uninit(TwoInts two_ints_uninit) {
    this.two_ints_uninit = two_ints_uninit;
    return this;
  }

  public void unsetTwo_ints_uninit() {
    this.two_ints_uninit = null;
  }

  // Returns true if field two_ints_uninit is set (has been assigned a value) and false otherwise
  public boolean isSetTwo_ints_uninit() {
    return this.two_ints_uninit != null;
  }

  public void setTwo_ints_uninitIsSet(boolean value) {
    if (!value) {
      this.two_ints_uninit = null;
    }
  }

  public TwoInts  getTwo_ints_init() {
    return this.two_ints_init;
  }

  public OneOfEach setTwo_ints_init(TwoInts two_ints_init) {
    this.two_ints_init = two_ints_init;
    return this;
  }

  public void unsetTwo_ints_init() {
    this.two_ints_init = null;
  }

  // Returns true if field two_ints_init is set (has been assigned a value) and false otherwise
  public boolean isSetTwo_ints_init() {
    return this.two_ints_init != null;
  }

  public void setTwo_ints_initIsSet(boolean value) {
    if (!value) {
      this.two_ints_init = null;
    }
  }

  public List<TwoInts>  getList_two_ints_uninit() {
    return this.list_two_ints_uninit;
  }

  public OneOfEach setList_two_ints_uninit(List<TwoInts> list_two_ints_uninit) {
    this.list_two_ints_uninit = list_two_ints_uninit;
    return this;
  }

  public void unsetList_two_ints_uninit() {
    this.list_two_ints_uninit = null;
  }

  // Returns true if field list_two_ints_uninit is set (has been assigned a value) and false otherwise
  public boolean isSetList_two_ints_uninit() {
    return this.list_two_ints_uninit != null;
  }

  public void setList_two_ints_uninitIsSet(boolean value) {
    if (!value) {
      this.list_two_ints_uninit = null;
    }
  }

  public List<TwoInts>  getList_two_ints_init_default() {
    return this.list_two_ints_init_default;
  }

  public OneOfEach setList_two_ints_init_default(List<TwoInts> list_two_ints_init_default) {
    this.list_two_ints_init_default = list_two_ints_init_default;
    return this;
  }

  public void unsetList_two_ints_init_default() {
    this.list_two_ints_init_default = null;
  }

  // Returns true if field list_two_ints_init_default is set (has been assigned a value) and false otherwise
  public boolean isSetList_two_ints_init_default() {
    return this.list_two_ints_init_default != null;
  }

  public void setList_two_ints_init_defaultIsSet(boolean value) {
    if (!value) {
      this.list_two_ints_init_default = null;
    }
  }

  public List<TwoInts>  getList_two_ints_init_explicit() {
    return this.list_two_ints_init_explicit;
  }

  public OneOfEach setList_two_ints_init_explicit(List<TwoInts> list_two_ints_init_explicit) {
    this.list_two_ints_init_explicit = list_two_ints_init_explicit;
    return this;
  }

  public void unsetList_two_ints_init_explicit() {
    this.list_two_ints_init_explicit = null;
  }

  // Returns true if field list_two_ints_init_explicit is set (has been assigned a value) and false otherwise
  public boolean isSetList_two_ints_init_explicit() {
    return this.list_two_ints_init_explicit != null;
  }

  public void setList_two_ints_init_explicitIsSet(boolean value) {
    if (!value) {
      this.list_two_ints_init_explicit = null;
    }
  }

  public Set<String>  getString_set() {
    return this.string_set;
  }

  public OneOfEach setString_set(Set<String> string_set) {
    this.string_set = string_set;
    return this;
  }

  public void unsetString_set() {
    this.string_set = null;
  }

  // Returns true if field string_set is set (has been assigned a value) and false otherwise
  public boolean isSetString_set() {
    return this.string_set != null;
  }

  public void setString_setIsSet(boolean value) {
    if (!value) {
      this.string_set = null;
    }
  }

  public Set<String>  getString_hash_set() {
    return this.string_hash_set;
  }

  public OneOfEach setString_hash_set(Set<String> string_hash_set) {
    this.string_hash_set = string_hash_set;
    return this;
  }

  public void unsetString_hash_set() {
    this.string_hash_set = null;
  }

  // Returns true if field string_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetString_hash_set() {
    return this.string_hash_set != null;
  }

  public void setString_hash_setIsSet(boolean value) {
    if (!value) {
      this.string_hash_set = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case IM_TRUE:
      if (value == null) {
        unsetIm_true();
      } else {
        setIm_true((Boolean)value);
      }
      break;

    case IM_FALSE:
      if (value == null) {
        unsetIm_false();
      } else {
        setIm_false((Boolean)value);
      }
      break;

    case A_BITE:
      if (value == null) {
        unsetA_bite();
      } else {
        setA_bite((Byte)value);
      }
      break;

    case INTEGER16:
      if (value == null) {
        unsetInteger16();
      } else {
        setInteger16((Short)value);
      }
      break;

    case INTEGER32:
      if (value == null) {
        unsetInteger32();
      } else {
        setInteger32((Integer)value);
      }
      break;

    case INTEGER64:
      if (value == null) {
        unsetInteger64();
      } else {
        setInteger64((Long)value);
      }
      break;

    case DOUBLE_PRECISION:
      if (value == null) {
        unsetDouble_precision();
      } else {
        setDouble_precision((Double)value);
      }
      break;

    case SOME_CHARACTERS:
      if (value == null) {
        unsetSome_characters();
      } else {
        setSome_characters((String)value);
      }
      break;

    case ZOMG_UNICODE:
      if (value == null) {
        unsetZomg_unicode();
      } else {
        setZomg_unicode((String)value);
      }
      break;

    case WHAT_WHO:
      if (value == null) {
        unsetWhat_who();
      } else {
        setWhat_who((Boolean)value);
      }
      break;

    case BASE64:
      if (value == null) {
        unsetBase64();
      } else {
        setBase64((byte[])value);
      }
      break;

    case BYTE_LIST:
      if (value == null) {
        unsetByte_list();
      } else {
        setByte_list((List<Byte>)value);
      }
      break;

    case I16_LIST:
      if (value == null) {
        unsetI16_list();
      } else {
        setI16_list((List<Short>)value);
      }
      break;

    case I64_LIST:
      if (value == null) {
        unsetI64_list();
      } else {
        setI64_list((List<Long>)value);
      }
      break;

    case STRING_STRING_MAP:
      if (value == null) {
        unsetString_string_map();
      } else {
        setString_string_map((Map<String,String>)value);
      }
      break;

    case STRING_STRING_HASH_MAP:
      if (value == null) {
        unsetString_string_hash_map();
      } else {
        setString_string_hash_map((Map<String,String>)value);
      }
      break;

    case FLOAT_PRECISION:
      if (value == null) {
        unsetFloat_precision();
      } else {
        setFloat_precision((Float)value);
      }
      break;

    case RANK_MAP:
      if (value == null) {
        unsetRank_map();
      } else {
        setRank_map((Map<Long,Float>)value);
      }
      break;

    case TWO_INTS_UNINIT:
      if (value == null) {
        unsetTwo_ints_uninit();
      } else {
        setTwo_ints_uninit((TwoInts)value);
      }
      break;

    case TWO_INTS_INIT:
      if (value == null) {
        unsetTwo_ints_init();
      } else {
        setTwo_ints_init((TwoInts)value);
      }
      break;

    case LIST_TWO_INTS_UNINIT:
      if (value == null) {
        unsetList_two_ints_uninit();
      } else {
        setList_two_ints_uninit((List<TwoInts>)value);
      }
      break;

    case LIST_TWO_INTS_INIT_DEFAULT:
      if (value == null) {
        unsetList_two_ints_init_default();
      } else {
        setList_two_ints_init_default((List<TwoInts>)value);
      }
      break;

    case LIST_TWO_INTS_INIT_EXPLICIT:
      if (value == null) {
        unsetList_two_ints_init_explicit();
      } else {
        setList_two_ints_init_explicit((List<TwoInts>)value);
      }
      break;

    case STRING_SET:
      if (value == null) {
        unsetString_set();
      } else {
        setString_set((Set<String>)value);
      }
      break;

    case STRING_HASH_SET:
      if (value == null) {
        unsetString_hash_set();
      } else {
        setString_hash_set((Set<String>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case IM_TRUE:
      return new Boolean(isIm_true());

    case IM_FALSE:
      return new Boolean(isIm_false());

    case A_BITE:
      return new Byte(getA_bite());

    case INTEGER16:
      return new Short(getInteger16());

    case INTEGER32:
      return new Integer(getInteger32());

    case INTEGER64:
      return new Long(getInteger64());

    case DOUBLE_PRECISION:
      return new Double(getDouble_precision());

    case SOME_CHARACTERS:
      return getSome_characters();

    case ZOMG_UNICODE:
      return getZomg_unicode();

    case WHAT_WHO:
      return new Boolean(isWhat_who());

    case BASE64:
      return getBase64();

    case BYTE_LIST:
      return getByte_list();

    case I16_LIST:
      return getI16_list();

    case I64_LIST:
      return getI64_list();

    case STRING_STRING_MAP:
      return getString_string_map();

    case STRING_STRING_HASH_MAP:
      return getString_string_hash_map();

    case FLOAT_PRECISION:
      return new Float(getFloat_precision());

    case RANK_MAP:
      return getRank_map();

    case TWO_INTS_UNINIT:
      return getTwo_ints_uninit();

    case TWO_INTS_INIT:
      return getTwo_ints_init();

    case LIST_TWO_INTS_UNINIT:
      return getList_two_ints_uninit();

    case LIST_TWO_INTS_INIT_DEFAULT:
      return getList_two_ints_init_default();

    case LIST_TWO_INTS_INIT_EXPLICIT:
      return getList_two_ints_init_explicit();

    case STRING_SET:
      return getString_set();

    case STRING_HASH_SET:
      return getString_hash_set();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case IM_TRUE:
      return isSetIm_true();
    case IM_FALSE:
      return isSetIm_false();
    case A_BITE:
      return isSetA_bite();
    case INTEGER16:
      return isSetInteger16();
    case INTEGER32:
      return isSetInteger32();
    case INTEGER64:
      return isSetInteger64();
    case DOUBLE_PRECISION:
      return isSetDouble_precision();
    case SOME_CHARACTERS:
      return isSetSome_characters();
    case ZOMG_UNICODE:
      return isSetZomg_unicode();
    case WHAT_WHO:
      return isSetWhat_who();
    case BASE64:
      return isSetBase64();
    case BYTE_LIST:
      return isSetByte_list();
    case I16_LIST:
      return isSetI16_list();
    case I64_LIST:
      return isSetI64_list();
    case STRING_STRING_MAP:
      return isSetString_string_map();
    case STRING_STRING_HASH_MAP:
      return isSetString_string_hash_map();
    case FLOAT_PRECISION:
      return isSetFloat_precision();
    case RANK_MAP:
      return isSetRank_map();
    case TWO_INTS_UNINIT:
      return isSetTwo_ints_uninit();
    case TWO_INTS_INIT:
      return isSetTwo_ints_init();
    case LIST_TWO_INTS_UNINIT:
      return isSetList_two_ints_uninit();
    case LIST_TWO_INTS_INIT_DEFAULT:
      return isSetList_two_ints_init_default();
    case LIST_TWO_INTS_INIT_EXPLICIT:
      return isSetList_two_ints_init_explicit();
    case STRING_SET:
      return isSetString_set();
    case STRING_HASH_SET:
      return isSetString_hash_set();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OneOfEach)
      return this.equals((OneOfEach)that);
    return false;
  }

  public boolean equals(OneOfEach that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_im_true = true;
    boolean that_present_im_true = true;
    if (this_present_im_true || that_present_im_true) {
      if (!(this_present_im_true && that_present_im_true))
        return false;
      if (!TBaseHelper.equalsNobinary(this.im_true, that.im_true))
        return false;
    }

    boolean this_present_im_false = true;
    boolean that_present_im_false = true;
    if (this_present_im_false || that_present_im_false) {
      if (!(this_present_im_false && that_present_im_false))
        return false;
      if (!TBaseHelper.equalsNobinary(this.im_false, that.im_false))
        return false;
    }

    boolean this_present_a_bite = true;
    boolean that_present_a_bite = true;
    if (this_present_a_bite || that_present_a_bite) {
      if (!(this_present_a_bite && that_present_a_bite))
        return false;
      if (!TBaseHelper.equalsNobinary(this.a_bite, that.a_bite))
        return false;
    }

    boolean this_present_integer16 = true;
    boolean that_present_integer16 = true;
    if (this_present_integer16 || that_present_integer16) {
      if (!(this_present_integer16 && that_present_integer16))
        return false;
      if (!TBaseHelper.equalsNobinary(this.integer16, that.integer16))
        return false;
    }

    boolean this_present_integer32 = true;
    boolean that_present_integer32 = true;
    if (this_present_integer32 || that_present_integer32) {
      if (!(this_present_integer32 && that_present_integer32))
        return false;
      if (!TBaseHelper.equalsNobinary(this.integer32, that.integer32))
        return false;
    }

    boolean this_present_integer64 = true;
    boolean that_present_integer64 = true;
    if (this_present_integer64 || that_present_integer64) {
      if (!(this_present_integer64 && that_present_integer64))
        return false;
      if (!TBaseHelper.equalsNobinary(this.integer64, that.integer64))
        return false;
    }

    boolean this_present_double_precision = true;
    boolean that_present_double_precision = true;
    if (this_present_double_precision || that_present_double_precision) {
      if (!(this_present_double_precision && that_present_double_precision))
        return false;
      if (!TBaseHelper.equalsNobinary(this.double_precision, that.double_precision))
        return false;
    }

    boolean this_present_some_characters = true && this.isSetSome_characters();
    boolean that_present_some_characters = true && that.isSetSome_characters();
    if (this_present_some_characters || that_present_some_characters) {
      if (!(this_present_some_characters && that_present_some_characters))
        return false;
      if (!TBaseHelper.equalsNobinary(this.some_characters, that.some_characters))
        return false;
    }

    boolean this_present_zomg_unicode = true && this.isSetZomg_unicode();
    boolean that_present_zomg_unicode = true && that.isSetZomg_unicode();
    if (this_present_zomg_unicode || that_present_zomg_unicode) {
      if (!(this_present_zomg_unicode && that_present_zomg_unicode))
        return false;
      if (!TBaseHelper.equalsNobinary(this.zomg_unicode, that.zomg_unicode))
        return false;
    }

    boolean this_present_what_who = true;
    boolean that_present_what_who = true;
    if (this_present_what_who || that_present_what_who) {
      if (!(this_present_what_who && that_present_what_who))
        return false;
      if (!TBaseHelper.equalsNobinary(this.what_who, that.what_who))
        return false;
    }

    boolean this_present_base64 = true && this.isSetBase64();
    boolean that_present_base64 = true && that.isSetBase64();
    if (this_present_base64 || that_present_base64) {
      if (!(this_present_base64 && that_present_base64))
        return false;
      if (!TBaseHelper.equalsSlow(this.base64, that.base64))
        return false;
    }

    boolean this_present_byte_list = true && this.isSetByte_list();
    boolean that_present_byte_list = true && that.isSetByte_list();
    if (this_present_byte_list || that_present_byte_list) {
      if (!(this_present_byte_list && that_present_byte_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_list, that.byte_list))
        return false;
    }

    boolean this_present_i16_list = true && this.isSetI16_list();
    boolean that_present_i16_list = true && that.isSetI16_list();
    if (this_present_i16_list || that_present_i16_list) {
      if (!(this_present_i16_list && that_present_i16_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i16_list, that.i16_list))
        return false;
    }

    boolean this_present_i64_list = true && this.isSetI64_list();
    boolean that_present_i64_list = true && that.isSetI64_list();
    if (this_present_i64_list || that_present_i64_list) {
      if (!(this_present_i64_list && that_present_i64_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i64_list, that.i64_list))
        return false;
    }

    boolean this_present_string_string_map = true && this.isSetString_string_map();
    boolean that_present_string_string_map = true && that.isSetString_string_map();
    if (this_present_string_string_map || that_present_string_string_map) {
      if (!(this_present_string_string_map && that_present_string_string_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_string_map, that.string_string_map))
        return false;
    }

    boolean this_present_string_string_hash_map = true && this.isSetString_string_hash_map();
    boolean that_present_string_string_hash_map = true && that.isSetString_string_hash_map();
    if (this_present_string_string_hash_map || that_present_string_string_hash_map) {
      if (!(this_present_string_string_hash_map && that_present_string_string_hash_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_string_hash_map, that.string_string_hash_map))
        return false;
    }

    boolean this_present_float_precision = true;
    boolean that_present_float_precision = true;
    if (this_present_float_precision || that_present_float_precision) {
      if (!(this_present_float_precision && that_present_float_precision))
        return false;
      if (!TBaseHelper.equalsNobinary(this.float_precision, that.float_precision))
        return false;
    }

    boolean this_present_rank_map = true && this.isSetRank_map();
    boolean that_present_rank_map = true && that.isSetRank_map();
    if (this_present_rank_map || that_present_rank_map) {
      if (!(this_present_rank_map && that_present_rank_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.rank_map, that.rank_map))
        return false;
    }

    boolean this_present_two_ints_uninit = true && this.isSetTwo_ints_uninit();
    boolean that_present_two_ints_uninit = true && that.isSetTwo_ints_uninit();
    if (this_present_two_ints_uninit || that_present_two_ints_uninit) {
      if (!(this_present_two_ints_uninit && that_present_two_ints_uninit))
        return false;
      if (!TBaseHelper.equalsNobinary(this.two_ints_uninit, that.two_ints_uninit))
        return false;
    }

    boolean this_present_two_ints_init = true && this.isSetTwo_ints_init();
    boolean that_present_two_ints_init = true && that.isSetTwo_ints_init();
    if (this_present_two_ints_init || that_present_two_ints_init) {
      if (!(this_present_two_ints_init && that_present_two_ints_init))
        return false;
      if (!TBaseHelper.equalsNobinary(this.two_ints_init, that.two_ints_init))
        return false;
    }

    boolean this_present_list_two_ints_uninit = true && this.isSetList_two_ints_uninit();
    boolean that_present_list_two_ints_uninit = true && that.isSetList_two_ints_uninit();
    if (this_present_list_two_ints_uninit || that_present_list_two_ints_uninit) {
      if (!(this_present_list_two_ints_uninit && that_present_list_two_ints_uninit))
        return false;
      if (!TBaseHelper.equalsNobinary(this.list_two_ints_uninit, that.list_two_ints_uninit))
        return false;
    }

    boolean this_present_list_two_ints_init_default = true && this.isSetList_two_ints_init_default();
    boolean that_present_list_two_ints_init_default = true && that.isSetList_two_ints_init_default();
    if (this_present_list_two_ints_init_default || that_present_list_two_ints_init_default) {
      if (!(this_present_list_two_ints_init_default && that_present_list_two_ints_init_default))
        return false;
      if (!TBaseHelper.equalsNobinary(this.list_two_ints_init_default, that.list_two_ints_init_default))
        return false;
    }

    boolean this_present_list_two_ints_init_explicit = true && this.isSetList_two_ints_init_explicit();
    boolean that_present_list_two_ints_init_explicit = true && that.isSetList_two_ints_init_explicit();
    if (this_present_list_two_ints_init_explicit || that_present_list_two_ints_init_explicit) {
      if (!(this_present_list_two_ints_init_explicit && that_present_list_two_ints_init_explicit))
        return false;
      if (!TBaseHelper.equalsNobinary(this.list_two_ints_init_explicit, that.list_two_ints_init_explicit))
        return false;
    }

    boolean this_present_string_set = true && this.isSetString_set();
    boolean that_present_string_set = true && that.isSetString_set();
    if (this_present_string_set || that_present_string_set) {
      if (!(this_present_string_set && that_present_string_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_set, that.string_set))
        return false;
    }

    boolean this_present_string_hash_set = true && this.isSetString_hash_set();
    boolean that_present_string_hash_set = true && that.isSetString_hash_set();
    if (this_present_string_hash_set || that_present_string_hash_set) {
      if (!(this_present_string_hash_set && that_present_string_hash_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_hash_set, that.string_hash_set))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(OneOfEach other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIm_true()).compareTo(other.isSetIm_true());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(im_true, other.im_true);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIm_false()).compareTo(other.isSetIm_false());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(im_false, other.im_false);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetA_bite()).compareTo(other.isSetA_bite());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a_bite, other.a_bite);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetInteger16()).compareTo(other.isSetInteger16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(integer16, other.integer16);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetInteger32()).compareTo(other.isSetInteger32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(integer32, other.integer32);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetInteger64()).compareTo(other.isSetInteger64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(integer64, other.integer64);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDouble_precision()).compareTo(other.isSetDouble_precision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(double_precision, other.double_precision);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSome_characters()).compareTo(other.isSetSome_characters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(some_characters, other.some_characters);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetZomg_unicode()).compareTo(other.isSetZomg_unicode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(zomg_unicode, other.zomg_unicode);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetWhat_who()).compareTo(other.isSetWhat_who());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(what_who, other.what_who);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBase64()).compareTo(other.isSetBase64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(base64, other.base64);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_list()).compareTo(other.isSetByte_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_list, other.byte_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI16_list()).compareTo(other.isSetI16_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i16_list, other.i16_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI64_list()).compareTo(other.isSetI64_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i64_list, other.i64_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_string_map()).compareTo(other.isSetString_string_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_string_map, other.string_string_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_string_hash_map()).compareTo(other.isSetString_string_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_string_hash_map, other.string_string_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFloat_precision()).compareTo(other.isSetFloat_precision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(float_precision, other.float_precision);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetRank_map()).compareTo(other.isSetRank_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(rank_map, other.rank_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTwo_ints_uninit()).compareTo(other.isSetTwo_ints_uninit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(two_ints_uninit, other.two_ints_uninit);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTwo_ints_init()).compareTo(other.isSetTwo_ints_init());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(two_ints_init, other.two_ints_init);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetList_two_ints_uninit()).compareTo(other.isSetList_two_ints_uninit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(list_two_ints_uninit, other.list_two_ints_uninit);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetList_two_ints_init_default()).compareTo(other.isSetList_two_ints_init_default());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(list_two_ints_init_default, other.list_two_ints_init_default);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetList_two_ints_init_explicit()).compareTo(other.isSetList_two_ints_init_explicit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(list_two_ints_init_explicit, other.list_two_ints_init_explicit);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_set()).compareTo(other.isSetString_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_set, other.string_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_hash_set()).compareTo(other.isSetString_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_hash_set, other.string_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case IM_TRUE:
          if (field.type == TType.BOOL) {
            this.im_true = iprot.readBool();
            setIm_trueIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IM_FALSE:
          if (field.type == TType.BOOL) {
            this.im_false = iprot.readBool();
            setIm_falseIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A_BITE:
          if (field.type == TType.BYTE) {
            this.a_bite = iprot.readByte();
            setA_biteIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INTEGER16:
          if (field.type == TType.I16) {
            this.integer16 = iprot.readI16();
            setInteger16IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INTEGER32:
          if (field.type == TType.I32) {
            this.integer32 = iprot.readI32();
            setInteger32IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INTEGER64:
          if (field.type == TType.I64) {
            this.integer64 = iprot.readI64();
            setInteger64IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOUBLE_PRECISION:
          if (field.type == TType.DOUBLE) {
            this.double_precision = iprot.readDouble();
            setDouble_precisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SOME_CHARACTERS:
          if (field.type == TType.STRING) {
            this.some_characters = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ZOMG_UNICODE:
          if (field.type == TType.STRING) {
            this.zomg_unicode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case WHAT_WHO:
          if (field.type == TType.BOOL) {
            this.what_who = iprot.readBool();
            setWhat_whoIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BASE64:
          if (field.type == TType.STRING) {
            this.base64 = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list77 = iprot.readListBegin();
              this.byte_list = new ArrayList<Byte>(Math.max(0, _list77.size));
              for (int _i78 = 0; 
                   (_list77.size < 0) ? iprot.peekList() : (_i78 < _list77.size); 
                   ++_i78)
              {
                byte _elem79;
                _elem79 = iprot.readByte();
                this.byte_list.add(_elem79);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I16_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list80 = iprot.readListBegin();
              this.i16_list = new ArrayList<Short>(Math.max(0, _list80.size));
              for (int _i81 = 0; 
                   (_list80.size < 0) ? iprot.peekList() : (_i81 < _list80.size); 
                   ++_i81)
              {
                short _elem82;
                _elem82 = iprot.readI16();
                this.i16_list.add(_elem82);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I64_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list83 = iprot.readListBegin();
              this.i64_list = new ArrayList<Long>(Math.max(0, _list83.size));
              for (int _i84 = 0; 
                   (_list83.size < 0) ? iprot.peekList() : (_i84 < _list83.size); 
                   ++_i84)
              {
                long _elem85;
                _elem85 = iprot.readI64();
                this.i64_list.add(_elem85);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_STRING_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map86 = iprot.readMapBegin();
              this.string_string_map = new HashMap<String,String>(Math.max(0, 2*_map86.size));
              for (int _i87 = 0; 
                   (_map86.size < 0) ? iprot.peekMap() : (_i87 < _map86.size); 
                   ++_i87)
              {
                String _key88;
                String _val89;
                _key88 = iprot.readString();
                _val89 = iprot.readString();
                this.string_string_map.put(_key88, _val89);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_STRING_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map90 = iprot.readMapBegin();
              this.string_string_hash_map = new HashMap<String,String>(Math.max(0, 2*_map90.size));
              for (int _i91 = 0; 
                   (_map90.size < 0) ? iprot.peekMap() : (_i91 < _map90.size); 
                   ++_i91)
              {
                String _key92;
                String _val93;
                _key92 = iprot.readString();
                _val93 = iprot.readString();
                this.string_string_hash_map.put(_key92, _val93);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FLOAT_PRECISION:
          if (field.type == TType.FLOAT) {
            this.float_precision = iprot.readFloat();
            setFloat_precisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RANK_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map94 = iprot.readMapBegin();
              this.rank_map = new HashMap<Long,Float>(Math.max(0, 2*_map94.size));
              for (int _i95 = 0; 
                   (_map94.size < 0) ? iprot.peekMap() : (_i95 < _map94.size); 
                   ++_i95)
              {
                long _key96;
                float _val97;
                _key96 = iprot.readI64();
                _val97 = iprot.readFloat();
                this.rank_map.put(_key96, _val97);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TWO_INTS_UNINIT:
          if (field.type == TType.STRUCT) {
            this.two_ints_uninit = new TwoInts();
            this.two_ints_uninit.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TWO_INTS_INIT:
          if (field.type == TType.STRUCT) {
            this.two_ints_init = new TwoInts();
            this.two_ints_init.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIST_TWO_INTS_UNINIT:
          if (field.type == TType.LIST) {
            {
              TList _list98 = iprot.readListBegin();
              this.list_two_ints_uninit = new ArrayList<TwoInts>(Math.max(0, _list98.size));
              for (int _i99 = 0; 
                   (_list98.size < 0) ? iprot.peekList() : (_i99 < _list98.size); 
                   ++_i99)
              {
                TwoInts _elem100;
                _elem100 = new TwoInts();
                _elem100.read(iprot);
                this.list_two_ints_uninit.add(_elem100);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIST_TWO_INTS_INIT_DEFAULT:
          if (field.type == TType.LIST) {
            {
              TList _list101 = iprot.readListBegin();
              this.list_two_ints_init_default = new ArrayList<TwoInts>(Math.max(0, _list101.size));
              for (int _i102 = 0; 
                   (_list101.size < 0) ? iprot.peekList() : (_i102 < _list101.size); 
                   ++_i102)
              {
                TwoInts _elem103;
                _elem103 = new TwoInts();
                _elem103.read(iprot);
                this.list_two_ints_init_default.add(_elem103);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIST_TWO_INTS_INIT_EXPLICIT:
          if (field.type == TType.LIST) {
            {
              TList _list104 = iprot.readListBegin();
              this.list_two_ints_init_explicit = new ArrayList<TwoInts>(Math.max(0, _list104.size));
              for (int _i105 = 0; 
                   (_list104.size < 0) ? iprot.peekList() : (_i105 < _list104.size); 
                   ++_i105)
              {
                TwoInts _elem106;
                _elem106 = new TwoInts();
                _elem106.read(iprot);
                this.list_two_ints_init_explicit.add(_elem106);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_SET:
          if (field.type == TType.SET) {
            {
              TSet _set107 = iprot.readSetBegin();
              this.string_set = new HashSet<String>(Math.max(0, 2*_set107.size));
              for (int _i108 = 0; 
                   (_set107.size < 0) ? iprot.peekSet() : (_i108 < _set107.size); 
                   ++_i108)
              {
                String _elem109;
                _elem109 = iprot.readString();
                this.string_set.add(_elem109);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set110 = iprot.readSetBegin();
              this.string_hash_set = new HashSet<String>(Math.max(0, 2*_set110.size));
              for (int _i111 = 0; 
                   (_set110.size < 0) ? iprot.peekSet() : (_i111 < _set110.size); 
                   ++_i111)
              {
                String _elem112;
                _elem112 = iprot.readString();
                this.string_hash_set.add(_elem112);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(IM_TRUE_FIELD_DESC);
    oprot.writeBool(this.im_true);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IM_FALSE_FIELD_DESC);
    oprot.writeBool(this.im_false);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(A_BITE_FIELD_DESC);
    oprot.writeByte(this.a_bite);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INTEGER16_FIELD_DESC);
    oprot.writeI16(this.integer16);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INTEGER32_FIELD_DESC);
    oprot.writeI32(this.integer32);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(INTEGER64_FIELD_DESC);
    oprot.writeI64(this.integer64);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DOUBLE_PRECISION_FIELD_DESC);
    oprot.writeDouble(this.double_precision);
    oprot.writeFieldEnd();
    if (this.some_characters != null) {
      oprot.writeFieldBegin(SOME_CHARACTERS_FIELD_DESC);
      oprot.writeString(this.some_characters);
      oprot.writeFieldEnd();
    }
    if (this.zomg_unicode != null) {
      oprot.writeFieldBegin(ZOMG_UNICODE_FIELD_DESC);
      oprot.writeString(this.zomg_unicode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(WHAT_WHO_FIELD_DESC);
    oprot.writeBool(this.what_who);
    oprot.writeFieldEnd();
    if (this.base64 != null) {
      oprot.writeFieldBegin(BASE64_FIELD_DESC);
      oprot.writeBinary(this.base64);
      oprot.writeFieldEnd();
    }
    if (this.byte_list != null) {
      oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.BYTE, this.byte_list.size()));
        for (byte _iter113 : this.byte_list)        {
          oprot.writeByte(_iter113);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i16_list != null) {
      oprot.writeFieldBegin(I16_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I16, this.i16_list.size()));
        for (short _iter114 : this.i16_list)        {
          oprot.writeI16(_iter114);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i64_list != null) {
      oprot.writeFieldBegin(I64_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.i64_list.size()));
        for (long _iter115 : this.i64_list)        {
          oprot.writeI64(_iter115);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_string_map != null) {
      oprot.writeFieldBegin(STRING_STRING_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.string_string_map.size()));
        for (Map.Entry<String, String> _iter116 : this.string_string_map.entrySet())        {
          oprot.writeString(_iter116.getKey());
          oprot.writeString(_iter116.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_string_hash_map != null) {
      oprot.writeFieldBegin(STRING_STRING_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.string_string_hash_map.size()));
        for (Map.Entry<String, String> _iter117 : this.string_string_hash_map.entrySet())        {
          oprot.writeString(_iter117.getKey());
          oprot.writeString(_iter117.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FLOAT_PRECISION_FIELD_DESC);
    oprot.writeFloat(this.float_precision);
    oprot.writeFieldEnd();
    if (this.rank_map != null) {
      oprot.writeFieldBegin(RANK_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I64, TType.FLOAT, this.rank_map.size()));
        for (Map.Entry<Long, Float> _iter118 : this.rank_map.entrySet())        {
          oprot.writeI64(_iter118.getKey());
          oprot.writeFloat(_iter118.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.two_ints_uninit != null) {
      oprot.writeFieldBegin(TWO_INTS_UNINIT_FIELD_DESC);
      this.two_ints_uninit.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.two_ints_init != null) {
      oprot.writeFieldBegin(TWO_INTS_INIT_FIELD_DESC);
      this.two_ints_init.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.list_two_ints_uninit != null) {
      oprot.writeFieldBegin(LIST_TWO_INTS_UNINIT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.list_two_ints_uninit.size()));
        for (TwoInts _iter119 : this.list_two_ints_uninit)        {
          _iter119.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_two_ints_init_default != null) {
      oprot.writeFieldBegin(LIST_TWO_INTS_INIT_DEFAULT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.list_two_ints_init_default.size()));
        for (TwoInts _iter120 : this.list_two_ints_init_default)        {
          _iter120.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_two_ints_init_explicit != null) {
      oprot.writeFieldBegin(LIST_TWO_INTS_INIT_EXPLICIT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.list_two_ints_init_explicit.size()));
        for (TwoInts _iter121 : this.list_two_ints_init_explicit)        {
          _iter121.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_set != null) {
      oprot.writeFieldBegin(STRING_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.string_set.size()));
        for (String _iter122 : this.string_set)        {
          oprot.writeString(_iter122);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_hash_set != null) {
      oprot.writeFieldBegin(STRING_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.string_hash_set.size()));
        for (String _iter123 : this.string_hash_set)        {
          oprot.writeString(_iter123);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("OneOfEach");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("im_true");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isIm_true(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("im_false");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isIm_false(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("a_bite");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getA_bite(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("integer16");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getInteger16(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("integer32");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getInteger32(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("integer64");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getInteger64(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("double_precision");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getDouble_precision(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("some_characters");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getSome_characters() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getSome_characters(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("zomg_unicode");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getZomg_unicode() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getZomg_unicode(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("what_who");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isWhat_who(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("base64");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBase64() == null) {
      sb.append("null");
    } else {
        int __base64_size = Math.min(this. getBase64().length, 128);
        for (int i = 0; i < __base64_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getBase64()[i]).length() > 1 ? Integer.toHexString(this. getBase64()[i]).substring(Integer.toHexString(this. getBase64()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getBase64()[i]).toUpperCase());
        }
        if (this. getBase64().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i16_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI16_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI16_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i64_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI64_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI64_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_string_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_string_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_string_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_string_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_string_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_string_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("float_precision");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getFloat_precision(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("rank_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getRank_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getRank_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("two_ints_uninit");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTwo_ints_uninit() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTwo_ints_uninit(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("two_ints_init");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getTwo_ints_init() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getTwo_ints_init(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_two_ints_uninit");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getList_two_ints_uninit() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getList_two_ints_uninit(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_two_ints_init_default");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getList_two_ints_init_default() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getList_two_ints_init_default(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_two_ints_init_explicit");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getList_two_ints_init_explicit() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getList_two_ints_init_explicit(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

