/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class ReverseOrderService {

  public interface Iface {

    public void myMethod(String first, short second, int third, long fourth) throws TException;

  }

  public interface AsyncIface {

    public void myMethod(String first, short second, int third, long fourth, AsyncMethodCallback resultHandler) throws TException;

  }

  public static class Client extends EventHandlerBase implements Iface, TClientIf {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    @Override
    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    @Override
    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void myMethod(String first, short second, int third, long fourth) throws TException
    {
      ContextStack ctx = getContextStack("ReverseOrderService.myMethod", null);
      this.setContextStack(ctx);
      send_myMethod(first, second, third, fourth);
      recv_myMethod();
    }

    public void send_myMethod(String first, short second, int third, long fourth) throws TException
    {
      ContextStack ctx = this.getContextStack();
      super.preWrite(ctx, "ReverseOrderService.myMethod", null);
      oprot_.writeMessageBegin(new TMessage("myMethod", TMessageType.CALL, seqid_));
      myMethod_args args = new myMethod_args();
      args.first = first;
      args.second = second;
      args.third = third;
      args.fourth = fourth;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
      super.postWrite(ctx, "ReverseOrderService.myMethod", args);
      return;
    }

    public void recv_myMethod() throws TException
    {
      ContextStack ctx = super.getContextStack();
      long bytes;
      TMessageType mtype;
      super.preRead(ctx, "ReverseOrderService.myMethod");
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      myMethod_result result = new myMethod_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      super.postRead(ctx, "ReverseOrderService.myMethod", result);

      return;
    }

  }
  public static class AsyncClient extends TAsyncClient implements AsyncIface {
    public static class Factory implements TAsyncClientFactory<AsyncClient> {
      private TAsyncClientManager clientManager;
      private TProtocolFactory protocolFactory;
      public Factory(TAsyncClientManager clientManager, TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(TProtocolFactory protocolFactory, TAsyncClientManager clientManager, TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void myMethod(String first, short second, int third, long fourth, AsyncMethodCallback resultHandler593) throws TException {
      checkReady();
      myMethod_call method_call = new myMethod_call(first, second, third, fourth, resultHandler593, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class myMethod_call extends TAsyncMethodCall {
      private String first;
      private short second;
      private int third;
      private long fourth;
      public myMethod_call(String first, short second, int third, long fourth, AsyncMethodCallback resultHandler594, TAsyncClient client590, TProtocolFactory protocolFactory591, TNonblockingTransport transport592) throws TException {
        super(client590, protocolFactory591, transport592, resultHandler594, false);
        this.first = first;
        this.second = second;
        this.third = third;
        this.fourth = fourth;
      }

      public void write_args(TProtocol prot) throws TException {
        prot.writeMessageBegin(new TMessage("myMethod", TMessageType.CALL, 0));
        myMethod_args args = new myMethod_args();
        args.setFirst(first);
        args.setSecond(second);
        args.setThird(third);
        args.setFourth(fourth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        TMemoryInputTransport memoryTransport = new TMemoryInputTransport(getFrameBuffer().array());
        TProtocol prot = super.client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_myMethod();
      }
    }

  }

  public static class Processor implements TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(Iface iface)
    {
      iface_ = iface;
      event_handler_ = new TProcessorEventHandler(); // Empty handler
      processMap_.put("myMethod", new myMethod());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException;
    }

    public void setEventHandler(TProcessorEventHandler handler) {
      this.event_handler_ = handler;
    }

    private Iface iface_;
    protected TProcessorEventHandler event_handler_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot, server_ctx);
      return true;
    }

    private class myMethod implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot, TConnectionContext server_ctx) throws TException
      {
        Object handler_ctx = event_handler_.getContext("ReverseOrderService.myMethod", server_ctx);
        myMethod_args args = new myMethod_args();
        event_handler_.preRead(handler_ctx, "ReverseOrderService.myMethod");
        args.read(iprot);
        iprot.readMessageEnd();
        event_handler_.postRead(handler_ctx, "ReverseOrderService.myMethod", args);
        myMethod_result result = new myMethod_result();
        iface_.myMethod(args.first, args.second, args.third, args.fourth);
        event_handler_.preWrite(handler_ctx, "ReverseOrderService.myMethod", result);
        oprot.writeMessageBegin(new TMessage("myMethod", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        event_handler_.postWrite(handler_ctx, "ReverseOrderService.myMethod", result);
      }

    }

  }

  public static class myMethod_args implements TBase, java.io.Serializable, Cloneable, Comparable<myMethod_args>   {
    private static final TStruct STRUCT_DESC = new TStruct("myMethod_args");
    private static final TField FIRST_FIELD_DESC = new TField("first", TType.STRING, (short)4);
    private static final TField SECOND_FIELD_DESC = new TField("second", TType.I16, (short)3);
    private static final TField THIRD_FIELD_DESC = new TField("third", TType.I32, (short)2);
    private static final TField FOURTH_FIELD_DESC = new TField("fourth", TType.I64, (short)1);

    public String first;
    public short second;
    public int third;
    public long fourth;
    public static final int FIRST = 4;
    public static final int SECOND = 3;
    public static final int THIRD = 2;
    public static final int FOURTH = 1;
    public static boolean DEFAULT_PRETTY_PRINT = true;

    // isset id assignments
    private static final int __SECOND_ISSET_ID = 0;
    private static final int __THIRD_ISSET_ID = 1;
    private static final int __FOURTH_ISSET_ID = 2;
    private BitSet __isset_bit_vector = new BitSet(3);

    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      tmpMetaDataMap.put(FIRST, new FieldMetaData("first", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRING)));
      tmpMetaDataMap.put(SECOND, new FieldMetaData("second", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I16)));
      tmpMetaDataMap.put(THIRD, new FieldMetaData("third", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
      tmpMetaDataMap.put(FOURTH, new FieldMetaData("fourth", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(myMethod_args.class, metaDataMap);
    }

    public myMethod_args() {
    }

    public myMethod_args(
      String first,
      short second,
      int third,
      long fourth)
    {
      this();
      this.first = first;
      this.second = second;
      setSecondIsSet(true);
      this.third = third;
      setThirdIsSet(true);
      this.fourth = fourth;
      setFourthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public myMethod_args(myMethod_args other) {
      __isset_bit_vector.clear();
      __isset_bit_vector.or(other.__isset_bit_vector);
      if (other.isSetFirst()) {
        this.first = TBaseHelper.deepCopy(other.first);
      }
      this.second = TBaseHelper.deepCopy(other.second);
      this.third = TBaseHelper.deepCopy(other.third);
      this.fourth = TBaseHelper.deepCopy(other.fourth);
    }

    public myMethod_args deepCopy() {
      return new myMethod_args(this);
    }

    @Deprecated
    public myMethod_args clone() {
      return new myMethod_args(this);
    }

    public String  getFirst() {
      return this.first;
    }

    public myMethod_args setFirst(String first) {
      this.first = first;
      return this;
    }

    public void unsetFirst() {
      this.first = null;
    }

    // Returns true if field first is set (has been assigned a value) and false otherwise
    public boolean isSetFirst() {
      return this.first != null;
    }

    public void setFirstIsSet(boolean value) {
      if (!value) {
        this.first = null;
      }
    }

    public short  getSecond() {
      return this.second;
    }

    public myMethod_args setSecond(short second) {
      this.second = second;
      setSecondIsSet(true);
      return this;
    }

    public void unsetSecond() {
      __isset_bit_vector.clear(__SECOND_ISSET_ID);
    }

    // Returns true if field second is set (has been assigned a value) and false otherwise
    public boolean isSetSecond() {
      return __isset_bit_vector.get(__SECOND_ISSET_ID);
    }

    public void setSecondIsSet(boolean value) {
      __isset_bit_vector.set(__SECOND_ISSET_ID, value);
    }

    public int  getThird() {
      return this.third;
    }

    public myMethod_args setThird(int third) {
      this.third = third;
      setThirdIsSet(true);
      return this;
    }

    public void unsetThird() {
      __isset_bit_vector.clear(__THIRD_ISSET_ID);
    }

    // Returns true if field third is set (has been assigned a value) and false otherwise
    public boolean isSetThird() {
      return __isset_bit_vector.get(__THIRD_ISSET_ID);
    }

    public void setThirdIsSet(boolean value) {
      __isset_bit_vector.set(__THIRD_ISSET_ID, value);
    }

    public long  getFourth() {
      return this.fourth;
    }

    public myMethod_args setFourth(long fourth) {
      this.fourth = fourth;
      setFourthIsSet(true);
      return this;
    }

    public void unsetFourth() {
      __isset_bit_vector.clear(__FOURTH_ISSET_ID);
    }

    // Returns true if field fourth is set (has been assigned a value) and false otherwise
    public boolean isSetFourth() {
      return __isset_bit_vector.get(__FOURTH_ISSET_ID);
    }

    public void setFourthIsSet(boolean value) {
      __isset_bit_vector.set(__FOURTH_ISSET_ID, value);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case FIRST:
        if (value == null) {
          unsetFirst();
        } else {
          setFirst((String)value);
        }
        break;

      case SECOND:
        if (value == null) {
          unsetSecond();
        } else {
          setSecond((Short)value);
        }
        break;

      case THIRD:
        if (value == null) {
          unsetThird();
        } else {
          setThird((Integer)value);
        }
        break;

      case FOURTH:
        if (value == null) {
          unsetFourth();
        } else {
          setFourth((Long)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case FIRST:
        return getFirst();

      case SECOND:
        return new Short(getSecond());

      case THIRD:
        return new Integer(getThird());

      case FOURTH:
        return new Long(getFourth());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case FIRST:
        return isSetFirst();
      case SECOND:
        return isSetSecond();
      case THIRD:
        return isSetThird();
      case FOURTH:
        return isSetFourth();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof myMethod_args)
        return this.equals((myMethod_args)that);
      return false;
    }

    public boolean equals(myMethod_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_first = true && this.isSetFirst();
      boolean that_present_first = true && that.isSetFirst();
      if (this_present_first || that_present_first) {
        if (!(this_present_first && that_present_first))
          return false;
        if (!TBaseHelper.equalsNobinary(this.first, that.first))
          return false;
      }

      boolean this_present_second = true;
      boolean that_present_second = true;
      if (this_present_second || that_present_second) {
        if (!(this_present_second && that_present_second))
          return false;
        if (!TBaseHelper.equalsNobinary(this.second, that.second))
          return false;
      }

      boolean this_present_third = true;
      boolean that_present_third = true;
      if (this_present_third || that_present_third) {
        if (!(this_present_third && that_present_third))
          return false;
        if (!TBaseHelper.equalsNobinary(this.third, that.third))
          return false;
      }

      boolean this_present_fourth = true;
      boolean that_present_fourth = true;
      if (this_present_fourth || that_present_fourth) {
        if (!(this_present_fourth && that_present_fourth))
          return false;
        if (!TBaseHelper.equalsNobinary(this.fourth, that.fourth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(myMethod_args other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFirst()).compareTo(other.isSetFirst());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(first, other.first);
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetSecond()).compareTo(other.isSetSecond());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(second, other.second);
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetThird()).compareTo(other.isSetThird());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(third, other.third);
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = Boolean.valueOf(isSetFourth()).compareTo(other.isSetFourth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      lastComparison = TBaseHelper.compareTo(fourth, other.fourth);
      if (lastComparison != 0) {
        return lastComparison;
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case FIRST:
            if (field.type == TType.STRING) {
              this.first = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SECOND:
            if (field.type == TType.I16) {
              this.second = iprot.readI16();
              setSecondIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case THIRD:
            if (field.type == TType.I32) {
              this.third = iprot.readI32();
              setThirdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case FOURTH:
            if (field.type == TType.I64) {
              this.fourth = iprot.readI64();
              setFourthIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(FOURTH_FIELD_DESC);
      oprot.writeI64(this.fourth);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(THIRD_FIELD_DESC);
      oprot.writeI32(this.third);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SECOND_FIELD_DESC);
      oprot.writeI16(this.second);
      oprot.writeFieldEnd();
      if (this.first != null) {
        oprot.writeFieldBegin(FIRST_FIELD_DESC);
        oprot.writeString(this.first);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("myMethod_args");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(indentStr);
      sb.append("first");
      sb.append(space);
      sb.append(":").append(space);
      if (this. getFirst() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this. getFirst(), indent + 1, prettyPrint));
      }
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("second");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getSecond(), indent + 1, prettyPrint));
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("third");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getThird(), indent + 1, prettyPrint));
      first = false;
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("fourth");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this. getFourth(), indent + 1, prettyPrint));
      first = false;
      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class myMethod_result implements TBase, java.io.Serializable, Cloneable, Comparable<myMethod_result>   {
    private static final TStruct STRUCT_DESC = new TStruct("myMethod_result");

    public static boolean DEFAULT_PRETTY_PRINT = true;
    public static final Map<Integer, FieldMetaData> metaDataMap;
    static {
      Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
      metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
    }

    static {
      FieldMetaData.addStructMetaDataMap(myMethod_result.class, metaDataMap);
    }

    public myMethod_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public myMethod_result(myMethod_result other) {
    }

    public myMethod_result deepCopy() {
      return new myMethod_result(this);
    }

    @Deprecated
    public myMethod_result clone() {
      return new myMethod_result(this);
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof myMethod_result)
        return this.equals((myMethod_result)that);
      return false;
    }

    public boolean equals(myMethod_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(myMethod_result other) {
      if (other == null) {
        // See java.lang.Comparable docs
        throw new NullPointerException();
      }

      if (other == this) {
        return 0;
      }
      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin(metaDataMap);
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      return toString(DEFAULT_PRETTY_PRINT);
    }

    @Override
    public String toString(boolean prettyPrint) {
      return toString(1, prettyPrint);
    }

    @Override
    public String toString(int indent, boolean prettyPrint) {
      String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
      String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
      StringBuilder sb = new StringBuilder("myMethod_result");
      sb.append(space);
      sb.append("(");
      sb.append(newLine);
      boolean first = true;

      sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
