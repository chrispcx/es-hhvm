/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class CompactProtoTestStruct implements TBase, java.io.Serializable, Cloneable, Comparable<CompactProtoTestStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("CompactProtoTestStruct");
  private static final TField A_BYTE_FIELD_DESC = new TField("a_byte", TType.BYTE, (short)1);
  private static final TField A_I16_FIELD_DESC = new TField("a_i16", TType.I16, (short)2);
  private static final TField A_I32_FIELD_DESC = new TField("a_i32", TType.I32, (short)3);
  private static final TField A_I64_FIELD_DESC = new TField("a_i64", TType.I64, (short)4);
  private static final TField A_DOUBLE_FIELD_DESC = new TField("a_double", TType.DOUBLE, (short)5);
  private static final TField A_STRING_FIELD_DESC = new TField("a_string", TType.STRING, (short)6);
  private static final TField A_BINARY_FIELD_DESC = new TField("a_binary", TType.STRING, (short)7);
  private static final TField TRUE_FIELD_FIELD_DESC = new TField("true_field", TType.BOOL, (short)8);
  private static final TField FALSE_FIELD_FIELD_DESC = new TField("false_field", TType.BOOL, (short)9);
  private static final TField EMPTY_STRUCT_FIELD_FIELD_DESC = new TField("empty_struct_field", TType.STRUCT, (short)10);
  private static final TField BYTE_LIST_FIELD_DESC = new TField("byte_list", TType.LIST, (short)11);
  private static final TField I16_LIST_FIELD_DESC = new TField("i16_list", TType.LIST, (short)12);
  private static final TField I32_LIST_FIELD_DESC = new TField("i32_list", TType.LIST, (short)13);
  private static final TField I64_LIST_FIELD_DESC = new TField("i64_list", TType.LIST, (short)14);
  private static final TField DOUBLE_LIST_FIELD_DESC = new TField("double_list", TType.LIST, (short)15);
  private static final TField STRING_LIST_FIELD_DESC = new TField("string_list", TType.LIST, (short)16);
  private static final TField BINARY_LIST_FIELD_DESC = new TField("binary_list", TType.LIST, (short)17);
  private static final TField BOOLEAN_LIST_FIELD_DESC = new TField("boolean_list", TType.LIST, (short)18);
  private static final TField STRUCT_LIST_FIELD_DESC = new TField("struct_list", TType.LIST, (short)19);
  private static final TField BYTE_SET_FIELD_DESC = new TField("byte_set", TType.SET, (short)20);
  private static final TField I16_SET_FIELD_DESC = new TField("i16_set", TType.SET, (short)21);
  private static final TField I32_SET_FIELD_DESC = new TField("i32_set", TType.SET, (short)22);
  private static final TField I64_SET_FIELD_DESC = new TField("i64_set", TType.SET, (short)23);
  private static final TField DOUBLE_SET_FIELD_DESC = new TField("double_set", TType.SET, (short)24);
  private static final TField STRING_SET_FIELD_DESC = new TField("string_set", TType.SET, (short)25);
  private static final TField BINARY_SET_FIELD_DESC = new TField("binary_set", TType.SET, (short)26);
  private static final TField BOOLEAN_SET_FIELD_DESC = new TField("boolean_set", TType.SET, (short)27);
  private static final TField STRUCT_SET_FIELD_DESC = new TField("struct_set", TType.SET, (short)28);
  private static final TField BYTE_HASH_SET_FIELD_DESC = new TField("byte_hash_set", TType.SET, (short)60);
  private static final TField I16_HASH_SET_FIELD_DESC = new TField("i16_hash_set", TType.SET, (short)61);
  private static final TField I32_HASH_SET_FIELD_DESC = new TField("i32_hash_set", TType.SET, (short)62);
  private static final TField I64_HASH_SET_FIELD_DESC = new TField("i64_hash_set", TType.SET, (short)63);
  private static final TField DOUBLE_HASH_SET_FIELD_DESC = new TField("double_hash_set", TType.SET, (short)64);
  private static final TField STRING_HASH_SET_FIELD_DESC = new TField("string_hash_set", TType.SET, (short)65);
  private static final TField BINARY_HASH_SET_FIELD_DESC = new TField("binary_hash_set", TType.SET, (short)66);
  private static final TField BOOLEAN_HASH_SET_FIELD_DESC = new TField("boolean_hash_set", TType.SET, (short)67);
  private static final TField BYTE_BYTE_MAP_FIELD_DESC = new TField("byte_byte_map", TType.MAP, (short)29);
  private static final TField I16_BYTE_MAP_FIELD_DESC = new TField("i16_byte_map", TType.MAP, (short)30);
  private static final TField I32_BYTE_MAP_FIELD_DESC = new TField("i32_byte_map", TType.MAP, (short)31);
  private static final TField I64_BYTE_MAP_FIELD_DESC = new TField("i64_byte_map", TType.MAP, (short)32);
  private static final TField DOUBLE_BYTE_MAP_FIELD_DESC = new TField("double_byte_map", TType.MAP, (short)33);
  private static final TField STRING_BYTE_MAP_FIELD_DESC = new TField("string_byte_map", TType.MAP, (short)34);
  private static final TField BINARY_BYTE_MAP_FIELD_DESC = new TField("binary_byte_map", TType.MAP, (short)35);
  private static final TField BOOLEAN_BYTE_MAP_FIELD_DESC = new TField("boolean_byte_map", TType.MAP, (short)36);
  private static final TField BYTE_BYTE_HASH_MAP_FIELD_DESC = new TField("byte_byte_hash_map", TType.MAP, (short)50);
  private static final TField I16_BYTE_HASH_MAP_FIELD_DESC = new TField("i16_byte_hash_map", TType.MAP, (short)51);
  private static final TField I32_BYTE_HASH_MAP_FIELD_DESC = new TField("i32_byte_hash_map", TType.MAP, (short)52);
  private static final TField I64_BYTE_HASH_MAP_FIELD_DESC = new TField("i64_byte_hash_map", TType.MAP, (short)53);
  private static final TField DOUBLE_BYTE_HASH_MAP_FIELD_DESC = new TField("double_byte_hash_map", TType.MAP, (short)54);
  private static final TField STRING_BYTE_HASH_MAP_FIELD_DESC = new TField("string_byte_hash_map", TType.MAP, (short)55);
  private static final TField BINARY_BYTE_HASH_MAP_FIELD_DESC = new TField("binary_byte_hash_map", TType.MAP, (short)56);
  private static final TField BOOLEAN_BYTE_HASH_MAP_FIELD_DESC = new TField("boolean_byte_hash_map", TType.MAP, (short)57);
  private static final TField BYTE_I16_MAP_FIELD_DESC = new TField("byte_i16_map", TType.MAP, (short)37);
  private static final TField BYTE_I32_MAP_FIELD_DESC = new TField("byte_i32_map", TType.MAP, (short)38);
  private static final TField BYTE_I64_MAP_FIELD_DESC = new TField("byte_i64_map", TType.MAP, (short)39);
  private static final TField BYTE_DOUBLE_MAP_FIELD_DESC = new TField("byte_double_map", TType.MAP, (short)40);
  private static final TField BYTE_STRING_MAP_FIELD_DESC = new TField("byte_string_map", TType.MAP, (short)41);
  private static final TField BYTE_BINARY_MAP_FIELD_DESC = new TField("byte_binary_map", TType.MAP, (short)42);
  private static final TField BYTE_BOOLEAN_MAP_FIELD_DESC = new TField("byte_boolean_map", TType.MAP, (short)43);
  private static final TField LIST_BYTE_MAP_FIELD_DESC = new TField("list_byte_map", TType.MAP, (short)44);
  private static final TField SET_BYTE_MAP_FIELD_DESC = new TField("set_byte_map", TType.MAP, (short)45);
  private static final TField MAP_BYTE_MAP_FIELD_DESC = new TField("map_byte_map", TType.MAP, (short)46);
  private static final TField BYTE_MAP_MAP_FIELD_DESC = new TField("byte_map_map", TType.MAP, (short)47);
  private static final TField BYTE_SET_MAP_FIELD_DESC = new TField("byte_set_map", TType.MAP, (short)48);
  private static final TField BYTE_LIST_MAP_FIELD_DESC = new TField("byte_list_map", TType.MAP, (short)49);
  private static final TField FLOAT_LIST_FIELD_DESC = new TField("float_list", TType.LIST, (short)58);
  private static final TField I16_FLOAT_MAP_FIELD_DESC = new TField("i16_float_map", TType.MAP, (short)59);

  public byte a_byte;
  public short a_i16;
  public int a_i32;
  public long a_i64;
  public double a_double;
  public String a_string;
  public byte[] a_binary;
  public boolean true_field;
  public boolean false_field;
  public Empty empty_struct_field;
  public List<Byte> byte_list;
  public List<Short> i16_list;
  public List<Integer> i32_list;
  public List<Long> i64_list;
  public List<Double> double_list;
  public List<String> string_list;
  public List<byte[]> binary_list;
  public List<Boolean> boolean_list;
  public List<Empty> struct_list;
  public Set<Byte> byte_set;
  public Set<Short> i16_set;
  public Set<Integer> i32_set;
  public Set<Long> i64_set;
  public Set<Double> double_set;
  public Set<String> string_set;
  public Set<byte[]> binary_set;
  public Set<Boolean> boolean_set;
  public Set<Empty> struct_set;
  public Set<Byte> byte_hash_set;
  public Set<Short> i16_hash_set;
  public Set<Integer> i32_hash_set;
  public Set<Long> i64_hash_set;
  public Set<Double> double_hash_set;
  public Set<String> string_hash_set;
  public Set<byte[]> binary_hash_set;
  public Set<Boolean> boolean_hash_set;
  public Map<Byte,Byte> byte_byte_map;
  public Map<Short,Byte> i16_byte_map;
  public Map<Integer,Byte> i32_byte_map;
  public Map<Long,Byte> i64_byte_map;
  public Map<Double,Byte> double_byte_map;
  public Map<String,Byte> string_byte_map;
  public Map<byte[],Byte> binary_byte_map;
  public Map<Boolean,Byte> boolean_byte_map;
  public Map<Byte,Byte> byte_byte_hash_map;
  public Map<Short,Byte> i16_byte_hash_map;
  public Map<Integer,Byte> i32_byte_hash_map;
  public Map<Long,Byte> i64_byte_hash_map;
  public Map<Double,Byte> double_byte_hash_map;
  public Map<String,Byte> string_byte_hash_map;
  public Map<byte[],Byte> binary_byte_hash_map;
  public Map<Boolean,Byte> boolean_byte_hash_map;
  public Map<Byte,Short> byte_i16_map;
  public Map<Byte,Integer> byte_i32_map;
  public Map<Byte,Long> byte_i64_map;
  public Map<Byte,Double> byte_double_map;
  public Map<Byte,String> byte_string_map;
  public Map<Byte,byte[]> byte_binary_map;
  public Map<Byte,Boolean> byte_boolean_map;
  public Map<List<Byte>,Byte> list_byte_map;
  public Map<Set<Byte>,Byte> set_byte_map;
  public Map<Map<Byte,Byte>,Byte> map_byte_map;
  public Map<Byte,Map<Byte,Byte>> byte_map_map;
  public Map<Byte,Set<Byte>> byte_set_map;
  public Map<Byte,List<Byte>> byte_list_map;
  public List<Float> float_list;
  public Map<Short,Float> i16_float_map;
  public static final int A_BYTE = 1;
  public static final int A_I16 = 2;
  public static final int A_I32 = 3;
  public static final int A_I64 = 4;
  public static final int A_DOUBLE = 5;
  public static final int A_STRING = 6;
  public static final int A_BINARY = 7;
  public static final int TRUE_FIELD = 8;
  public static final int FALSE_FIELD = 9;
  public static final int EMPTY_STRUCT_FIELD = 10;
  public static final int BYTE_LIST = 11;
  public static final int I16_LIST = 12;
  public static final int I32_LIST = 13;
  public static final int I64_LIST = 14;
  public static final int DOUBLE_LIST = 15;
  public static final int STRING_LIST = 16;
  public static final int BINARY_LIST = 17;
  public static final int BOOLEAN_LIST = 18;
  public static final int STRUCT_LIST = 19;
  public static final int BYTE_SET = 20;
  public static final int I16_SET = 21;
  public static final int I32_SET = 22;
  public static final int I64_SET = 23;
  public static final int DOUBLE_SET = 24;
  public static final int STRING_SET = 25;
  public static final int BINARY_SET = 26;
  public static final int BOOLEAN_SET = 27;
  public static final int STRUCT_SET = 28;
  public static final int BYTE_HASH_SET = 60;
  public static final int I16_HASH_SET = 61;
  public static final int I32_HASH_SET = 62;
  public static final int I64_HASH_SET = 63;
  public static final int DOUBLE_HASH_SET = 64;
  public static final int STRING_HASH_SET = 65;
  public static final int BINARY_HASH_SET = 66;
  public static final int BOOLEAN_HASH_SET = 67;
  public static final int BYTE_BYTE_MAP = 29;
  public static final int I16_BYTE_MAP = 30;
  public static final int I32_BYTE_MAP = 31;
  public static final int I64_BYTE_MAP = 32;
  public static final int DOUBLE_BYTE_MAP = 33;
  public static final int STRING_BYTE_MAP = 34;
  public static final int BINARY_BYTE_MAP = 35;
  public static final int BOOLEAN_BYTE_MAP = 36;
  public static final int BYTE_BYTE_HASH_MAP = 50;
  public static final int I16_BYTE_HASH_MAP = 51;
  public static final int I32_BYTE_HASH_MAP = 52;
  public static final int I64_BYTE_HASH_MAP = 53;
  public static final int DOUBLE_BYTE_HASH_MAP = 54;
  public static final int STRING_BYTE_HASH_MAP = 55;
  public static final int BINARY_BYTE_HASH_MAP = 56;
  public static final int BOOLEAN_BYTE_HASH_MAP = 57;
  public static final int BYTE_I16_MAP = 37;
  public static final int BYTE_I32_MAP = 38;
  public static final int BYTE_I64_MAP = 39;
  public static final int BYTE_DOUBLE_MAP = 40;
  public static final int BYTE_STRING_MAP = 41;
  public static final int BYTE_BINARY_MAP = 42;
  public static final int BYTE_BOOLEAN_MAP = 43;
  public static final int LIST_BYTE_MAP = 44;
  public static final int SET_BYTE_MAP = 45;
  public static final int MAP_BYTE_MAP = 46;
  public static final int BYTE_MAP_MAP = 47;
  public static final int BYTE_SET_MAP = 48;
  public static final int BYTE_LIST_MAP = 49;
  public static final int FLOAT_LIST = 58;
  public static final int I16_FLOAT_MAP = 59;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __A_BYTE_ISSET_ID = 0;
  private static final int __A_I16_ISSET_ID = 1;
  private static final int __A_I32_ISSET_ID = 2;
  private static final int __A_I64_ISSET_ID = 3;
  private static final int __A_DOUBLE_ISSET_ID = 4;
  private static final int __TRUE_FIELD_ISSET_ID = 5;
  private static final int __FALSE_FIELD_ISSET_ID = 6;
  private BitSet __isset_bit_vector = new BitSet(7);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(A_BYTE, new FieldMetaData("a_byte", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BYTE)));
    tmpMetaDataMap.put(A_I16, new FieldMetaData("a_i16", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    tmpMetaDataMap.put(A_I32, new FieldMetaData("a_i32", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(A_I64, new FieldMetaData("a_i64", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    tmpMetaDataMap.put(A_DOUBLE, new FieldMetaData("a_double", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.DOUBLE)));
    tmpMetaDataMap.put(A_STRING, new FieldMetaData("a_string", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(A_BINARY, new FieldMetaData("a_binary", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(TRUE_FIELD, new FieldMetaData("true_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(FALSE_FIELD, new FieldMetaData("false_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(EMPTY_STRUCT_FIELD, new FieldMetaData("empty_struct_field", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, Empty.class)));
    tmpMetaDataMap.put(BYTE_LIST, new FieldMetaData("byte_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I16_LIST, new FieldMetaData("i16_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(I32_LIST, new FieldMetaData("i32_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(I64_LIST, new FieldMetaData("i64_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(DOUBLE_LIST, new FieldMetaData("double_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.DOUBLE))));
    tmpMetaDataMap.put(STRING_LIST, new FieldMetaData("string_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BINARY_LIST, new FieldMetaData("binary_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BOOLEAN_LIST, new FieldMetaData("boolean_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.BOOL))));
    tmpMetaDataMap.put(STRUCT_LIST, new FieldMetaData("struct_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, Empty.class))));
    tmpMetaDataMap.put(BYTE_SET, new FieldMetaData("byte_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I16_SET, new FieldMetaData("i16_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(I32_SET, new FieldMetaData("i32_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(I64_SET, new FieldMetaData("i64_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(DOUBLE_SET, new FieldMetaData("double_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.DOUBLE))));
    tmpMetaDataMap.put(STRING_SET, new FieldMetaData("string_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BINARY_SET, new FieldMetaData("binary_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BOOLEAN_SET, new FieldMetaData("boolean_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.BOOL))));
    tmpMetaDataMap.put(STRUCT_SET, new FieldMetaData("struct_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new StructMetaData(TType.STRUCT, Empty.class))));
    tmpMetaDataMap.put(BYTE_HASH_SET, new FieldMetaData("byte_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I16_HASH_SET, new FieldMetaData("i16_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(I32_HASH_SET, new FieldMetaData("i32_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(I64_HASH_SET, new FieldMetaData("i64_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(DOUBLE_HASH_SET, new FieldMetaData("double_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.DOUBLE))));
    tmpMetaDataMap.put(STRING_HASH_SET, new FieldMetaData("string_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BINARY_HASH_SET, new FieldMetaData("binary_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BOOLEAN_HASH_SET, new FieldMetaData("boolean_hash_set", TFieldRequirementType.DEFAULT, 
        new SetMetaData(TType.SET, 
            new FieldValueMetaData(TType.BOOL))));
    tmpMetaDataMap.put(BYTE_BYTE_MAP, new FieldMetaData("byte_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I16_BYTE_MAP, new FieldMetaData("i16_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I16), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I32_BYTE_MAP, new FieldMetaData("i32_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I64_BYTE_MAP, new FieldMetaData("i64_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I64), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(DOUBLE_BYTE_MAP, new FieldMetaData("double_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.DOUBLE), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(STRING_BYTE_MAP, new FieldMetaData("string_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(BINARY_BYTE_MAP, new FieldMetaData("binary_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(BOOLEAN_BYTE_MAP, new FieldMetaData("boolean_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BOOL), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(BYTE_BYTE_HASH_MAP, new FieldMetaData("byte_byte_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I16_BYTE_HASH_MAP, new FieldMetaData("i16_byte_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I16), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I32_BYTE_HASH_MAP, new FieldMetaData("i32_byte_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I32), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(I64_BYTE_HASH_MAP, new FieldMetaData("i64_byte_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I64), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(DOUBLE_BYTE_HASH_MAP, new FieldMetaData("double_byte_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.DOUBLE), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(STRING_BYTE_HASH_MAP, new FieldMetaData("string_byte_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(BINARY_BYTE_HASH_MAP, new FieldMetaData("binary_byte_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(BOOLEAN_BYTE_HASH_MAP, new FieldMetaData("boolean_byte_hash_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BOOL), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(BYTE_I16_MAP, new FieldMetaData("byte_i16_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.I16))));
    tmpMetaDataMap.put(BYTE_I32_MAP, new FieldMetaData("byte_i32_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(BYTE_I64_MAP, new FieldMetaData("byte_i64_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.I64))));
    tmpMetaDataMap.put(BYTE_DOUBLE_MAP, new FieldMetaData("byte_double_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.DOUBLE))));
    tmpMetaDataMap.put(BYTE_STRING_MAP, new FieldMetaData("byte_string_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BYTE_BINARY_MAP, new FieldMetaData("byte_binary_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.STRING))));
    tmpMetaDataMap.put(BYTE_BOOLEAN_MAP, new FieldMetaData("byte_boolean_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new FieldValueMetaData(TType.BOOL))));
    tmpMetaDataMap.put(LIST_BYTE_MAP, new FieldMetaData("list_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.BYTE)), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(SET_BYTE_MAP, new FieldMetaData("set_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.BYTE)), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(MAP_BYTE_MAP, new FieldMetaData("map_byte_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.BYTE), 
                new FieldValueMetaData(TType.BYTE)), 
            new FieldValueMetaData(TType.BYTE))));
    tmpMetaDataMap.put(BYTE_MAP_MAP, new FieldMetaData("byte_map_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new MapMetaData(TType.MAP, 
                new FieldValueMetaData(TType.BYTE), 
                new FieldValueMetaData(TType.BYTE)))));
    tmpMetaDataMap.put(BYTE_SET_MAP, new FieldMetaData("byte_set_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new SetMetaData(TType.SET, 
                new FieldValueMetaData(TType.BYTE)))));
    tmpMetaDataMap.put(BYTE_LIST_MAP, new FieldMetaData("byte_list_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.BYTE), 
            new ListMetaData(TType.LIST, 
                new FieldValueMetaData(TType.BYTE)))));
    tmpMetaDataMap.put(FLOAT_LIST, new FieldMetaData("float_list", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.FLOAT))));
    tmpMetaDataMap.put(I16_FLOAT_MAP, new FieldMetaData("i16_float_map", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.I16), 
            new FieldValueMetaData(TType.FLOAT))));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(CompactProtoTestStruct.class, metaDataMap);
  }

  public CompactProtoTestStruct() {
  }

  public CompactProtoTestStruct(
    byte a_byte,
    short a_i16,
    int a_i32,
    long a_i64,
    double a_double,
    String a_string,
    byte[] a_binary,
    boolean true_field,
    boolean false_field,
    Empty empty_struct_field,
    List<Byte> byte_list,
    List<Short> i16_list,
    List<Integer> i32_list,
    List<Long> i64_list,
    List<Double> double_list,
    List<String> string_list,
    List<byte[]> binary_list,
    List<Boolean> boolean_list,
    List<Empty> struct_list,
    Set<Byte> byte_set,
    Set<Short> i16_set,
    Set<Integer> i32_set,
    Set<Long> i64_set,
    Set<Double> double_set,
    Set<String> string_set,
    Set<byte[]> binary_set,
    Set<Boolean> boolean_set,
    Set<Empty> struct_set,
    Set<Byte> byte_hash_set,
    Set<Short> i16_hash_set,
    Set<Integer> i32_hash_set,
    Set<Long> i64_hash_set,
    Set<Double> double_hash_set,
    Set<String> string_hash_set,
    Set<byte[]> binary_hash_set,
    Set<Boolean> boolean_hash_set,
    Map<Byte,Byte> byte_byte_map,
    Map<Short,Byte> i16_byte_map,
    Map<Integer,Byte> i32_byte_map,
    Map<Long,Byte> i64_byte_map,
    Map<Double,Byte> double_byte_map,
    Map<String,Byte> string_byte_map,
    Map<byte[],Byte> binary_byte_map,
    Map<Boolean,Byte> boolean_byte_map,
    Map<Byte,Byte> byte_byte_hash_map,
    Map<Short,Byte> i16_byte_hash_map,
    Map<Integer,Byte> i32_byte_hash_map,
    Map<Long,Byte> i64_byte_hash_map,
    Map<Double,Byte> double_byte_hash_map,
    Map<String,Byte> string_byte_hash_map,
    Map<byte[],Byte> binary_byte_hash_map,
    Map<Boolean,Byte> boolean_byte_hash_map,
    Map<Byte,Short> byte_i16_map,
    Map<Byte,Integer> byte_i32_map,
    Map<Byte,Long> byte_i64_map,
    Map<Byte,Double> byte_double_map,
    Map<Byte,String> byte_string_map,
    Map<Byte,byte[]> byte_binary_map,
    Map<Byte,Boolean> byte_boolean_map,
    Map<List<Byte>,Byte> list_byte_map,
    Map<Set<Byte>,Byte> set_byte_map,
    Map<Map<Byte,Byte>,Byte> map_byte_map,
    Map<Byte,Map<Byte,Byte>> byte_map_map,
    Map<Byte,Set<Byte>> byte_set_map,
    Map<Byte,List<Byte>> byte_list_map,
    List<Float> float_list,
    Map<Short,Float> i16_float_map)
  {
    this();
    this.a_byte = a_byte;
    setA_byteIsSet(true);
    this.a_i16 = a_i16;
    setA_i16IsSet(true);
    this.a_i32 = a_i32;
    setA_i32IsSet(true);
    this.a_i64 = a_i64;
    setA_i64IsSet(true);
    this.a_double = a_double;
    setA_doubleIsSet(true);
    this.a_string = a_string;
    this.a_binary = a_binary;
    this.true_field = true_field;
    setTrue_fieldIsSet(true);
    this.false_field = false_field;
    setFalse_fieldIsSet(true);
    this.empty_struct_field = empty_struct_field;
    this.byte_list = byte_list;
    this.i16_list = i16_list;
    this.i32_list = i32_list;
    this.i64_list = i64_list;
    this.double_list = double_list;
    this.string_list = string_list;
    this.binary_list = binary_list;
    this.boolean_list = boolean_list;
    this.struct_list = struct_list;
    this.byte_set = byte_set;
    this.i16_set = i16_set;
    this.i32_set = i32_set;
    this.i64_set = i64_set;
    this.double_set = double_set;
    this.string_set = string_set;
    this.binary_set = binary_set;
    this.boolean_set = boolean_set;
    this.struct_set = struct_set;
    this.byte_hash_set = byte_hash_set;
    this.i16_hash_set = i16_hash_set;
    this.i32_hash_set = i32_hash_set;
    this.i64_hash_set = i64_hash_set;
    this.double_hash_set = double_hash_set;
    this.string_hash_set = string_hash_set;
    this.binary_hash_set = binary_hash_set;
    this.boolean_hash_set = boolean_hash_set;
    this.byte_byte_map = byte_byte_map;
    this.i16_byte_map = i16_byte_map;
    this.i32_byte_map = i32_byte_map;
    this.i64_byte_map = i64_byte_map;
    this.double_byte_map = double_byte_map;
    this.string_byte_map = string_byte_map;
    this.binary_byte_map = binary_byte_map;
    this.boolean_byte_map = boolean_byte_map;
    this.byte_byte_hash_map = byte_byte_hash_map;
    this.i16_byte_hash_map = i16_byte_hash_map;
    this.i32_byte_hash_map = i32_byte_hash_map;
    this.i64_byte_hash_map = i64_byte_hash_map;
    this.double_byte_hash_map = double_byte_hash_map;
    this.string_byte_hash_map = string_byte_hash_map;
    this.binary_byte_hash_map = binary_byte_hash_map;
    this.boolean_byte_hash_map = boolean_byte_hash_map;
    this.byte_i16_map = byte_i16_map;
    this.byte_i32_map = byte_i32_map;
    this.byte_i64_map = byte_i64_map;
    this.byte_double_map = byte_double_map;
    this.byte_string_map = byte_string_map;
    this.byte_binary_map = byte_binary_map;
    this.byte_boolean_map = byte_boolean_map;
    this.list_byte_map = list_byte_map;
    this.set_byte_map = set_byte_map;
    this.map_byte_map = map_byte_map;
    this.byte_map_map = byte_map_map;
    this.byte_set_map = byte_set_map;
    this.byte_list_map = byte_list_map;
    this.float_list = float_list;
    this.i16_float_map = i16_float_map;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CompactProtoTestStruct(CompactProtoTestStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.a_byte = TBaseHelper.deepCopy(other.a_byte);
    this.a_i16 = TBaseHelper.deepCopy(other.a_i16);
    this.a_i32 = TBaseHelper.deepCopy(other.a_i32);
    this.a_i64 = TBaseHelper.deepCopy(other.a_i64);
    this.a_double = TBaseHelper.deepCopy(other.a_double);
    if (other.isSetA_string()) {
      this.a_string = TBaseHelper.deepCopy(other.a_string);
    }
    if (other.isSetA_binary()) {
      this.a_binary = TBaseHelper.deepCopy(other.a_binary);
    }
    this.true_field = TBaseHelper.deepCopy(other.true_field);
    this.false_field = TBaseHelper.deepCopy(other.false_field);
    if (other.isSetEmpty_struct_field()) {
      this.empty_struct_field = TBaseHelper.deepCopy(other.empty_struct_field);
    }
    if (other.isSetByte_list()) {
      this.byte_list = TBaseHelper.deepCopy(other.byte_list);
    }
    if (other.isSetI16_list()) {
      this.i16_list = TBaseHelper.deepCopy(other.i16_list);
    }
    if (other.isSetI32_list()) {
      this.i32_list = TBaseHelper.deepCopy(other.i32_list);
    }
    if (other.isSetI64_list()) {
      this.i64_list = TBaseHelper.deepCopy(other.i64_list);
    }
    if (other.isSetDouble_list()) {
      this.double_list = TBaseHelper.deepCopy(other.double_list);
    }
    if (other.isSetString_list()) {
      this.string_list = TBaseHelper.deepCopy(other.string_list);
    }
    if (other.isSetBinary_list()) {
      this.binary_list = TBaseHelper.deepCopy(other.binary_list);
    }
    if (other.isSetBoolean_list()) {
      this.boolean_list = TBaseHelper.deepCopy(other.boolean_list);
    }
    if (other.isSetStruct_list()) {
      this.struct_list = TBaseHelper.deepCopy(other.struct_list);
    }
    if (other.isSetByte_set()) {
      this.byte_set = TBaseHelper.deepCopy(other.byte_set);
    }
    if (other.isSetI16_set()) {
      this.i16_set = TBaseHelper.deepCopy(other.i16_set);
    }
    if (other.isSetI32_set()) {
      this.i32_set = TBaseHelper.deepCopy(other.i32_set);
    }
    if (other.isSetI64_set()) {
      this.i64_set = TBaseHelper.deepCopy(other.i64_set);
    }
    if (other.isSetDouble_set()) {
      this.double_set = TBaseHelper.deepCopy(other.double_set);
    }
    if (other.isSetString_set()) {
      this.string_set = TBaseHelper.deepCopy(other.string_set);
    }
    if (other.isSetBinary_set()) {
      this.binary_set = TBaseHelper.deepCopy(other.binary_set);
    }
    if (other.isSetBoolean_set()) {
      this.boolean_set = TBaseHelper.deepCopy(other.boolean_set);
    }
    if (other.isSetStruct_set()) {
      this.struct_set = TBaseHelper.deepCopy(other.struct_set);
    }
    if (other.isSetByte_hash_set()) {
      this.byte_hash_set = TBaseHelper.deepCopy(other.byte_hash_set);
    }
    if (other.isSetI16_hash_set()) {
      this.i16_hash_set = TBaseHelper.deepCopy(other.i16_hash_set);
    }
    if (other.isSetI32_hash_set()) {
      this.i32_hash_set = TBaseHelper.deepCopy(other.i32_hash_set);
    }
    if (other.isSetI64_hash_set()) {
      this.i64_hash_set = TBaseHelper.deepCopy(other.i64_hash_set);
    }
    if (other.isSetDouble_hash_set()) {
      this.double_hash_set = TBaseHelper.deepCopy(other.double_hash_set);
    }
    if (other.isSetString_hash_set()) {
      this.string_hash_set = TBaseHelper.deepCopy(other.string_hash_set);
    }
    if (other.isSetBinary_hash_set()) {
      this.binary_hash_set = TBaseHelper.deepCopy(other.binary_hash_set);
    }
    if (other.isSetBoolean_hash_set()) {
      this.boolean_hash_set = TBaseHelper.deepCopy(other.boolean_hash_set);
    }
    if (other.isSetByte_byte_map()) {
      this.byte_byte_map = TBaseHelper.deepCopy(other.byte_byte_map);
    }
    if (other.isSetI16_byte_map()) {
      this.i16_byte_map = TBaseHelper.deepCopy(other.i16_byte_map);
    }
    if (other.isSetI32_byte_map()) {
      this.i32_byte_map = TBaseHelper.deepCopy(other.i32_byte_map);
    }
    if (other.isSetI64_byte_map()) {
      this.i64_byte_map = TBaseHelper.deepCopy(other.i64_byte_map);
    }
    if (other.isSetDouble_byte_map()) {
      this.double_byte_map = TBaseHelper.deepCopy(other.double_byte_map);
    }
    if (other.isSetString_byte_map()) {
      this.string_byte_map = TBaseHelper.deepCopy(other.string_byte_map);
    }
    if (other.isSetBinary_byte_map()) {
      this.binary_byte_map = TBaseHelper.deepCopy(other.binary_byte_map);
    }
    if (other.isSetBoolean_byte_map()) {
      this.boolean_byte_map = TBaseHelper.deepCopy(other.boolean_byte_map);
    }
    if (other.isSetByte_byte_hash_map()) {
      this.byte_byte_hash_map = TBaseHelper.deepCopy(other.byte_byte_hash_map);
    }
    if (other.isSetI16_byte_hash_map()) {
      this.i16_byte_hash_map = TBaseHelper.deepCopy(other.i16_byte_hash_map);
    }
    if (other.isSetI32_byte_hash_map()) {
      this.i32_byte_hash_map = TBaseHelper.deepCopy(other.i32_byte_hash_map);
    }
    if (other.isSetI64_byte_hash_map()) {
      this.i64_byte_hash_map = TBaseHelper.deepCopy(other.i64_byte_hash_map);
    }
    if (other.isSetDouble_byte_hash_map()) {
      this.double_byte_hash_map = TBaseHelper.deepCopy(other.double_byte_hash_map);
    }
    if (other.isSetString_byte_hash_map()) {
      this.string_byte_hash_map = TBaseHelper.deepCopy(other.string_byte_hash_map);
    }
    if (other.isSetBinary_byte_hash_map()) {
      this.binary_byte_hash_map = TBaseHelper.deepCopy(other.binary_byte_hash_map);
    }
    if (other.isSetBoolean_byte_hash_map()) {
      this.boolean_byte_hash_map = TBaseHelper.deepCopy(other.boolean_byte_hash_map);
    }
    if (other.isSetByte_i16_map()) {
      this.byte_i16_map = TBaseHelper.deepCopy(other.byte_i16_map);
    }
    if (other.isSetByte_i32_map()) {
      this.byte_i32_map = TBaseHelper.deepCopy(other.byte_i32_map);
    }
    if (other.isSetByte_i64_map()) {
      this.byte_i64_map = TBaseHelper.deepCopy(other.byte_i64_map);
    }
    if (other.isSetByte_double_map()) {
      this.byte_double_map = TBaseHelper.deepCopy(other.byte_double_map);
    }
    if (other.isSetByte_string_map()) {
      this.byte_string_map = TBaseHelper.deepCopy(other.byte_string_map);
    }
    if (other.isSetByte_binary_map()) {
      this.byte_binary_map = TBaseHelper.deepCopy(other.byte_binary_map);
    }
    if (other.isSetByte_boolean_map()) {
      this.byte_boolean_map = TBaseHelper.deepCopy(other.byte_boolean_map);
    }
    if (other.isSetList_byte_map()) {
      this.list_byte_map = TBaseHelper.deepCopy(other.list_byte_map);
    }
    if (other.isSetSet_byte_map()) {
      this.set_byte_map = TBaseHelper.deepCopy(other.set_byte_map);
    }
    if (other.isSetMap_byte_map()) {
      this.map_byte_map = TBaseHelper.deepCopy(other.map_byte_map);
    }
    if (other.isSetByte_map_map()) {
      this.byte_map_map = TBaseHelper.deepCopy(other.byte_map_map);
    }
    if (other.isSetByte_set_map()) {
      this.byte_set_map = TBaseHelper.deepCopy(other.byte_set_map);
    }
    if (other.isSetByte_list_map()) {
      this.byte_list_map = TBaseHelper.deepCopy(other.byte_list_map);
    }
    if (other.isSetFloat_list()) {
      this.float_list = TBaseHelper.deepCopy(other.float_list);
    }
    if (other.isSetI16_float_map()) {
      this.i16_float_map = TBaseHelper.deepCopy(other.i16_float_map);
    }
  }

  public CompactProtoTestStruct deepCopy() {
    return new CompactProtoTestStruct(this);
  }

  @Deprecated
  public CompactProtoTestStruct clone() {
    return new CompactProtoTestStruct(this);
  }

  public byte  getA_byte() {
    return this.a_byte;
  }

  public CompactProtoTestStruct setA_byte(byte a_byte) {
    this.a_byte = a_byte;
    setA_byteIsSet(true);
    return this;
  }

  public void unsetA_byte() {
    __isset_bit_vector.clear(__A_BYTE_ISSET_ID);
  }

  // Returns true if field a_byte is set (has been assigned a value) and false otherwise
  public boolean isSetA_byte() {
    return __isset_bit_vector.get(__A_BYTE_ISSET_ID);
  }

  public void setA_byteIsSet(boolean value) {
    __isset_bit_vector.set(__A_BYTE_ISSET_ID, value);
  }

  public short  getA_i16() {
    return this.a_i16;
  }

  public CompactProtoTestStruct setA_i16(short a_i16) {
    this.a_i16 = a_i16;
    setA_i16IsSet(true);
    return this;
  }

  public void unsetA_i16() {
    __isset_bit_vector.clear(__A_I16_ISSET_ID);
  }

  // Returns true if field a_i16 is set (has been assigned a value) and false otherwise
  public boolean isSetA_i16() {
    return __isset_bit_vector.get(__A_I16_ISSET_ID);
  }

  public void setA_i16IsSet(boolean value) {
    __isset_bit_vector.set(__A_I16_ISSET_ID, value);
  }

  public int  getA_i32() {
    return this.a_i32;
  }

  public CompactProtoTestStruct setA_i32(int a_i32) {
    this.a_i32 = a_i32;
    setA_i32IsSet(true);
    return this;
  }

  public void unsetA_i32() {
    __isset_bit_vector.clear(__A_I32_ISSET_ID);
  }

  // Returns true if field a_i32 is set (has been assigned a value) and false otherwise
  public boolean isSetA_i32() {
    return __isset_bit_vector.get(__A_I32_ISSET_ID);
  }

  public void setA_i32IsSet(boolean value) {
    __isset_bit_vector.set(__A_I32_ISSET_ID, value);
  }

  public long  getA_i64() {
    return this.a_i64;
  }

  public CompactProtoTestStruct setA_i64(long a_i64) {
    this.a_i64 = a_i64;
    setA_i64IsSet(true);
    return this;
  }

  public void unsetA_i64() {
    __isset_bit_vector.clear(__A_I64_ISSET_ID);
  }

  // Returns true if field a_i64 is set (has been assigned a value) and false otherwise
  public boolean isSetA_i64() {
    return __isset_bit_vector.get(__A_I64_ISSET_ID);
  }

  public void setA_i64IsSet(boolean value) {
    __isset_bit_vector.set(__A_I64_ISSET_ID, value);
  }

  public double  getA_double() {
    return this.a_double;
  }

  public CompactProtoTestStruct setA_double(double a_double) {
    this.a_double = a_double;
    setA_doubleIsSet(true);
    return this;
  }

  public void unsetA_double() {
    __isset_bit_vector.clear(__A_DOUBLE_ISSET_ID);
  }

  // Returns true if field a_double is set (has been assigned a value) and false otherwise
  public boolean isSetA_double() {
    return __isset_bit_vector.get(__A_DOUBLE_ISSET_ID);
  }

  public void setA_doubleIsSet(boolean value) {
    __isset_bit_vector.set(__A_DOUBLE_ISSET_ID, value);
  }

  public String  getA_string() {
    return this.a_string;
  }

  public CompactProtoTestStruct setA_string(String a_string) {
    this.a_string = a_string;
    return this;
  }

  public void unsetA_string() {
    this.a_string = null;
  }

  // Returns true if field a_string is set (has been assigned a value) and false otherwise
  public boolean isSetA_string() {
    return this.a_string != null;
  }

  public void setA_stringIsSet(boolean value) {
    if (!value) {
      this.a_string = null;
    }
  }

  public byte[]  getA_binary() {
    return this.a_binary;
  }

  public CompactProtoTestStruct setA_binary(byte[] a_binary) {
    this.a_binary = a_binary;
    return this;
  }

  public void unsetA_binary() {
    this.a_binary = null;
  }

  // Returns true if field a_binary is set (has been assigned a value) and false otherwise
  public boolean isSetA_binary() {
    return this.a_binary != null;
  }

  public void setA_binaryIsSet(boolean value) {
    if (!value) {
      this.a_binary = null;
    }
  }

  public boolean  isTrue_field() {
    return this.true_field;
  }

  public CompactProtoTestStruct setTrue_field(boolean true_field) {
    this.true_field = true_field;
    setTrue_fieldIsSet(true);
    return this;
  }

  public void unsetTrue_field() {
    __isset_bit_vector.clear(__TRUE_FIELD_ISSET_ID);
  }

  // Returns true if field true_field is set (has been assigned a value) and false otherwise
  public boolean isSetTrue_field() {
    return __isset_bit_vector.get(__TRUE_FIELD_ISSET_ID);
  }

  public void setTrue_fieldIsSet(boolean value) {
    __isset_bit_vector.set(__TRUE_FIELD_ISSET_ID, value);
  }

  public boolean  isFalse_field() {
    return this.false_field;
  }

  public CompactProtoTestStruct setFalse_field(boolean false_field) {
    this.false_field = false_field;
    setFalse_fieldIsSet(true);
    return this;
  }

  public void unsetFalse_field() {
    __isset_bit_vector.clear(__FALSE_FIELD_ISSET_ID);
  }

  // Returns true if field false_field is set (has been assigned a value) and false otherwise
  public boolean isSetFalse_field() {
    return __isset_bit_vector.get(__FALSE_FIELD_ISSET_ID);
  }

  public void setFalse_fieldIsSet(boolean value) {
    __isset_bit_vector.set(__FALSE_FIELD_ISSET_ID, value);
  }

  public Empty  getEmpty_struct_field() {
    return this.empty_struct_field;
  }

  public CompactProtoTestStruct setEmpty_struct_field(Empty empty_struct_field) {
    this.empty_struct_field = empty_struct_field;
    return this;
  }

  public void unsetEmpty_struct_field() {
    this.empty_struct_field = null;
  }

  // Returns true if field empty_struct_field is set (has been assigned a value) and false otherwise
  public boolean isSetEmpty_struct_field() {
    return this.empty_struct_field != null;
  }

  public void setEmpty_struct_fieldIsSet(boolean value) {
    if (!value) {
      this.empty_struct_field = null;
    }
  }

  public List<Byte>  getByte_list() {
    return this.byte_list;
  }

  public CompactProtoTestStruct setByte_list(List<Byte> byte_list) {
    this.byte_list = byte_list;
    return this;
  }

  public void unsetByte_list() {
    this.byte_list = null;
  }

  // Returns true if field byte_list is set (has been assigned a value) and false otherwise
  public boolean isSetByte_list() {
    return this.byte_list != null;
  }

  public void setByte_listIsSet(boolean value) {
    if (!value) {
      this.byte_list = null;
    }
  }

  public List<Short>  getI16_list() {
    return this.i16_list;
  }

  public CompactProtoTestStruct setI16_list(List<Short> i16_list) {
    this.i16_list = i16_list;
    return this;
  }

  public void unsetI16_list() {
    this.i16_list = null;
  }

  // Returns true if field i16_list is set (has been assigned a value) and false otherwise
  public boolean isSetI16_list() {
    return this.i16_list != null;
  }

  public void setI16_listIsSet(boolean value) {
    if (!value) {
      this.i16_list = null;
    }
  }

  public List<Integer>  getI32_list() {
    return this.i32_list;
  }

  public CompactProtoTestStruct setI32_list(List<Integer> i32_list) {
    this.i32_list = i32_list;
    return this;
  }

  public void unsetI32_list() {
    this.i32_list = null;
  }

  // Returns true if field i32_list is set (has been assigned a value) and false otherwise
  public boolean isSetI32_list() {
    return this.i32_list != null;
  }

  public void setI32_listIsSet(boolean value) {
    if (!value) {
      this.i32_list = null;
    }
  }

  public List<Long>  getI64_list() {
    return this.i64_list;
  }

  public CompactProtoTestStruct setI64_list(List<Long> i64_list) {
    this.i64_list = i64_list;
    return this;
  }

  public void unsetI64_list() {
    this.i64_list = null;
  }

  // Returns true if field i64_list is set (has been assigned a value) and false otherwise
  public boolean isSetI64_list() {
    return this.i64_list != null;
  }

  public void setI64_listIsSet(boolean value) {
    if (!value) {
      this.i64_list = null;
    }
  }

  public List<Double>  getDouble_list() {
    return this.double_list;
  }

  public CompactProtoTestStruct setDouble_list(List<Double> double_list) {
    this.double_list = double_list;
    return this;
  }

  public void unsetDouble_list() {
    this.double_list = null;
  }

  // Returns true if field double_list is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_list() {
    return this.double_list != null;
  }

  public void setDouble_listIsSet(boolean value) {
    if (!value) {
      this.double_list = null;
    }
  }

  public List<String>  getString_list() {
    return this.string_list;
  }

  public CompactProtoTestStruct setString_list(List<String> string_list) {
    this.string_list = string_list;
    return this;
  }

  public void unsetString_list() {
    this.string_list = null;
  }

  // Returns true if field string_list is set (has been assigned a value) and false otherwise
  public boolean isSetString_list() {
    return this.string_list != null;
  }

  public void setString_listIsSet(boolean value) {
    if (!value) {
      this.string_list = null;
    }
  }

  public List<byte[]>  getBinary_list() {
    return this.binary_list;
  }

  public CompactProtoTestStruct setBinary_list(List<byte[]> binary_list) {
    this.binary_list = binary_list;
    return this;
  }

  public void unsetBinary_list() {
    this.binary_list = null;
  }

  // Returns true if field binary_list is set (has been assigned a value) and false otherwise
  public boolean isSetBinary_list() {
    return this.binary_list != null;
  }

  public void setBinary_listIsSet(boolean value) {
    if (!value) {
      this.binary_list = null;
    }
  }

  public List<Boolean>  getBoolean_list() {
    return this.boolean_list;
  }

  public CompactProtoTestStruct setBoolean_list(List<Boolean> boolean_list) {
    this.boolean_list = boolean_list;
    return this;
  }

  public void unsetBoolean_list() {
    this.boolean_list = null;
  }

  // Returns true if field boolean_list is set (has been assigned a value) and false otherwise
  public boolean isSetBoolean_list() {
    return this.boolean_list != null;
  }

  public void setBoolean_listIsSet(boolean value) {
    if (!value) {
      this.boolean_list = null;
    }
  }

  public List<Empty>  getStruct_list() {
    return this.struct_list;
  }

  public CompactProtoTestStruct setStruct_list(List<Empty> struct_list) {
    this.struct_list = struct_list;
    return this;
  }

  public void unsetStruct_list() {
    this.struct_list = null;
  }

  // Returns true if field struct_list is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_list() {
    return this.struct_list != null;
  }

  public void setStruct_listIsSet(boolean value) {
    if (!value) {
      this.struct_list = null;
    }
  }

  public Set<Byte>  getByte_set() {
    return this.byte_set;
  }

  public CompactProtoTestStruct setByte_set(Set<Byte> byte_set) {
    this.byte_set = byte_set;
    return this;
  }

  public void unsetByte_set() {
    this.byte_set = null;
  }

  // Returns true if field byte_set is set (has been assigned a value) and false otherwise
  public boolean isSetByte_set() {
    return this.byte_set != null;
  }

  public void setByte_setIsSet(boolean value) {
    if (!value) {
      this.byte_set = null;
    }
  }

  public Set<Short>  getI16_set() {
    return this.i16_set;
  }

  public CompactProtoTestStruct setI16_set(Set<Short> i16_set) {
    this.i16_set = i16_set;
    return this;
  }

  public void unsetI16_set() {
    this.i16_set = null;
  }

  // Returns true if field i16_set is set (has been assigned a value) and false otherwise
  public boolean isSetI16_set() {
    return this.i16_set != null;
  }

  public void setI16_setIsSet(boolean value) {
    if (!value) {
      this.i16_set = null;
    }
  }

  public Set<Integer>  getI32_set() {
    return this.i32_set;
  }

  public CompactProtoTestStruct setI32_set(Set<Integer> i32_set) {
    this.i32_set = i32_set;
    return this;
  }

  public void unsetI32_set() {
    this.i32_set = null;
  }

  // Returns true if field i32_set is set (has been assigned a value) and false otherwise
  public boolean isSetI32_set() {
    return this.i32_set != null;
  }

  public void setI32_setIsSet(boolean value) {
    if (!value) {
      this.i32_set = null;
    }
  }

  public Set<Long>  getI64_set() {
    return this.i64_set;
  }

  public CompactProtoTestStruct setI64_set(Set<Long> i64_set) {
    this.i64_set = i64_set;
    return this;
  }

  public void unsetI64_set() {
    this.i64_set = null;
  }

  // Returns true if field i64_set is set (has been assigned a value) and false otherwise
  public boolean isSetI64_set() {
    return this.i64_set != null;
  }

  public void setI64_setIsSet(boolean value) {
    if (!value) {
      this.i64_set = null;
    }
  }

  public Set<Double>  getDouble_set() {
    return this.double_set;
  }

  public CompactProtoTestStruct setDouble_set(Set<Double> double_set) {
    this.double_set = double_set;
    return this;
  }

  public void unsetDouble_set() {
    this.double_set = null;
  }

  // Returns true if field double_set is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_set() {
    return this.double_set != null;
  }

  public void setDouble_setIsSet(boolean value) {
    if (!value) {
      this.double_set = null;
    }
  }

  public Set<String>  getString_set() {
    return this.string_set;
  }

  public CompactProtoTestStruct setString_set(Set<String> string_set) {
    this.string_set = string_set;
    return this;
  }

  public void unsetString_set() {
    this.string_set = null;
  }

  // Returns true if field string_set is set (has been assigned a value) and false otherwise
  public boolean isSetString_set() {
    return this.string_set != null;
  }

  public void setString_setIsSet(boolean value) {
    if (!value) {
      this.string_set = null;
    }
  }

  public Set<byte[]>  getBinary_set() {
    return this.binary_set;
  }

  public CompactProtoTestStruct setBinary_set(Set<byte[]> binary_set) {
    this.binary_set = binary_set;
    return this;
  }

  public void unsetBinary_set() {
    this.binary_set = null;
  }

  // Returns true if field binary_set is set (has been assigned a value) and false otherwise
  public boolean isSetBinary_set() {
    return this.binary_set != null;
  }

  public void setBinary_setIsSet(boolean value) {
    if (!value) {
      this.binary_set = null;
    }
  }

  public Set<Boolean>  getBoolean_set() {
    return this.boolean_set;
  }

  public CompactProtoTestStruct setBoolean_set(Set<Boolean> boolean_set) {
    this.boolean_set = boolean_set;
    return this;
  }

  public void unsetBoolean_set() {
    this.boolean_set = null;
  }

  // Returns true if field boolean_set is set (has been assigned a value) and false otherwise
  public boolean isSetBoolean_set() {
    return this.boolean_set != null;
  }

  public void setBoolean_setIsSet(boolean value) {
    if (!value) {
      this.boolean_set = null;
    }
  }

  public Set<Empty>  getStruct_set() {
    return this.struct_set;
  }

  public CompactProtoTestStruct setStruct_set(Set<Empty> struct_set) {
    this.struct_set = struct_set;
    return this;
  }

  public void unsetStruct_set() {
    this.struct_set = null;
  }

  // Returns true if field struct_set is set (has been assigned a value) and false otherwise
  public boolean isSetStruct_set() {
    return this.struct_set != null;
  }

  public void setStruct_setIsSet(boolean value) {
    if (!value) {
      this.struct_set = null;
    }
  }

  public Set<Byte>  getByte_hash_set() {
    return this.byte_hash_set;
  }

  public CompactProtoTestStruct setByte_hash_set(Set<Byte> byte_hash_set) {
    this.byte_hash_set = byte_hash_set;
    return this;
  }

  public void unsetByte_hash_set() {
    this.byte_hash_set = null;
  }

  // Returns true if field byte_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetByte_hash_set() {
    return this.byte_hash_set != null;
  }

  public void setByte_hash_setIsSet(boolean value) {
    if (!value) {
      this.byte_hash_set = null;
    }
  }

  public Set<Short>  getI16_hash_set() {
    return this.i16_hash_set;
  }

  public CompactProtoTestStruct setI16_hash_set(Set<Short> i16_hash_set) {
    this.i16_hash_set = i16_hash_set;
    return this;
  }

  public void unsetI16_hash_set() {
    this.i16_hash_set = null;
  }

  // Returns true if field i16_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetI16_hash_set() {
    return this.i16_hash_set != null;
  }

  public void setI16_hash_setIsSet(boolean value) {
    if (!value) {
      this.i16_hash_set = null;
    }
  }

  public Set<Integer>  getI32_hash_set() {
    return this.i32_hash_set;
  }

  public CompactProtoTestStruct setI32_hash_set(Set<Integer> i32_hash_set) {
    this.i32_hash_set = i32_hash_set;
    return this;
  }

  public void unsetI32_hash_set() {
    this.i32_hash_set = null;
  }

  // Returns true if field i32_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetI32_hash_set() {
    return this.i32_hash_set != null;
  }

  public void setI32_hash_setIsSet(boolean value) {
    if (!value) {
      this.i32_hash_set = null;
    }
  }

  public Set<Long>  getI64_hash_set() {
    return this.i64_hash_set;
  }

  public CompactProtoTestStruct setI64_hash_set(Set<Long> i64_hash_set) {
    this.i64_hash_set = i64_hash_set;
    return this;
  }

  public void unsetI64_hash_set() {
    this.i64_hash_set = null;
  }

  // Returns true if field i64_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetI64_hash_set() {
    return this.i64_hash_set != null;
  }

  public void setI64_hash_setIsSet(boolean value) {
    if (!value) {
      this.i64_hash_set = null;
    }
  }

  public Set<Double>  getDouble_hash_set() {
    return this.double_hash_set;
  }

  public CompactProtoTestStruct setDouble_hash_set(Set<Double> double_hash_set) {
    this.double_hash_set = double_hash_set;
    return this;
  }

  public void unsetDouble_hash_set() {
    this.double_hash_set = null;
  }

  // Returns true if field double_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_hash_set() {
    return this.double_hash_set != null;
  }

  public void setDouble_hash_setIsSet(boolean value) {
    if (!value) {
      this.double_hash_set = null;
    }
  }

  public Set<String>  getString_hash_set() {
    return this.string_hash_set;
  }

  public CompactProtoTestStruct setString_hash_set(Set<String> string_hash_set) {
    this.string_hash_set = string_hash_set;
    return this;
  }

  public void unsetString_hash_set() {
    this.string_hash_set = null;
  }

  // Returns true if field string_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetString_hash_set() {
    return this.string_hash_set != null;
  }

  public void setString_hash_setIsSet(boolean value) {
    if (!value) {
      this.string_hash_set = null;
    }
  }

  public Set<byte[]>  getBinary_hash_set() {
    return this.binary_hash_set;
  }

  public CompactProtoTestStruct setBinary_hash_set(Set<byte[]> binary_hash_set) {
    this.binary_hash_set = binary_hash_set;
    return this;
  }

  public void unsetBinary_hash_set() {
    this.binary_hash_set = null;
  }

  // Returns true if field binary_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetBinary_hash_set() {
    return this.binary_hash_set != null;
  }

  public void setBinary_hash_setIsSet(boolean value) {
    if (!value) {
      this.binary_hash_set = null;
    }
  }

  public Set<Boolean>  getBoolean_hash_set() {
    return this.boolean_hash_set;
  }

  public CompactProtoTestStruct setBoolean_hash_set(Set<Boolean> boolean_hash_set) {
    this.boolean_hash_set = boolean_hash_set;
    return this;
  }

  public void unsetBoolean_hash_set() {
    this.boolean_hash_set = null;
  }

  // Returns true if field boolean_hash_set is set (has been assigned a value) and false otherwise
  public boolean isSetBoolean_hash_set() {
    return this.boolean_hash_set != null;
  }

  public void setBoolean_hash_setIsSet(boolean value) {
    if (!value) {
      this.boolean_hash_set = null;
    }
  }

  public Map<Byte,Byte>  getByte_byte_map() {
    return this.byte_byte_map;
  }

  public CompactProtoTestStruct setByte_byte_map(Map<Byte,Byte> byte_byte_map) {
    this.byte_byte_map = byte_byte_map;
    return this;
  }

  public void unsetByte_byte_map() {
    this.byte_byte_map = null;
  }

  // Returns true if field byte_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_byte_map() {
    return this.byte_byte_map != null;
  }

  public void setByte_byte_mapIsSet(boolean value) {
    if (!value) {
      this.byte_byte_map = null;
    }
  }

  public Map<Short,Byte>  getI16_byte_map() {
    return this.i16_byte_map;
  }

  public CompactProtoTestStruct setI16_byte_map(Map<Short,Byte> i16_byte_map) {
    this.i16_byte_map = i16_byte_map;
    return this;
  }

  public void unsetI16_byte_map() {
    this.i16_byte_map = null;
  }

  // Returns true if field i16_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetI16_byte_map() {
    return this.i16_byte_map != null;
  }

  public void setI16_byte_mapIsSet(boolean value) {
    if (!value) {
      this.i16_byte_map = null;
    }
  }

  public Map<Integer,Byte>  getI32_byte_map() {
    return this.i32_byte_map;
  }

  public CompactProtoTestStruct setI32_byte_map(Map<Integer,Byte> i32_byte_map) {
    this.i32_byte_map = i32_byte_map;
    return this;
  }

  public void unsetI32_byte_map() {
    this.i32_byte_map = null;
  }

  // Returns true if field i32_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetI32_byte_map() {
    return this.i32_byte_map != null;
  }

  public void setI32_byte_mapIsSet(boolean value) {
    if (!value) {
      this.i32_byte_map = null;
    }
  }

  public Map<Long,Byte>  getI64_byte_map() {
    return this.i64_byte_map;
  }

  public CompactProtoTestStruct setI64_byte_map(Map<Long,Byte> i64_byte_map) {
    this.i64_byte_map = i64_byte_map;
    return this;
  }

  public void unsetI64_byte_map() {
    this.i64_byte_map = null;
  }

  // Returns true if field i64_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetI64_byte_map() {
    return this.i64_byte_map != null;
  }

  public void setI64_byte_mapIsSet(boolean value) {
    if (!value) {
      this.i64_byte_map = null;
    }
  }

  public Map<Double,Byte>  getDouble_byte_map() {
    return this.double_byte_map;
  }

  public CompactProtoTestStruct setDouble_byte_map(Map<Double,Byte> double_byte_map) {
    this.double_byte_map = double_byte_map;
    return this;
  }

  public void unsetDouble_byte_map() {
    this.double_byte_map = null;
  }

  // Returns true if field double_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_byte_map() {
    return this.double_byte_map != null;
  }

  public void setDouble_byte_mapIsSet(boolean value) {
    if (!value) {
      this.double_byte_map = null;
    }
  }

  public Map<String,Byte>  getString_byte_map() {
    return this.string_byte_map;
  }

  public CompactProtoTestStruct setString_byte_map(Map<String,Byte> string_byte_map) {
    this.string_byte_map = string_byte_map;
    return this;
  }

  public void unsetString_byte_map() {
    this.string_byte_map = null;
  }

  // Returns true if field string_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetString_byte_map() {
    return this.string_byte_map != null;
  }

  public void setString_byte_mapIsSet(boolean value) {
    if (!value) {
      this.string_byte_map = null;
    }
  }

  public Map<byte[],Byte>  getBinary_byte_map() {
    return this.binary_byte_map;
  }

  public CompactProtoTestStruct setBinary_byte_map(Map<byte[],Byte> binary_byte_map) {
    this.binary_byte_map = binary_byte_map;
    return this;
  }

  public void unsetBinary_byte_map() {
    this.binary_byte_map = null;
  }

  // Returns true if field binary_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetBinary_byte_map() {
    return this.binary_byte_map != null;
  }

  public void setBinary_byte_mapIsSet(boolean value) {
    if (!value) {
      this.binary_byte_map = null;
    }
  }

  public Map<Boolean,Byte>  getBoolean_byte_map() {
    return this.boolean_byte_map;
  }

  public CompactProtoTestStruct setBoolean_byte_map(Map<Boolean,Byte> boolean_byte_map) {
    this.boolean_byte_map = boolean_byte_map;
    return this;
  }

  public void unsetBoolean_byte_map() {
    this.boolean_byte_map = null;
  }

  // Returns true if field boolean_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetBoolean_byte_map() {
    return this.boolean_byte_map != null;
  }

  public void setBoolean_byte_mapIsSet(boolean value) {
    if (!value) {
      this.boolean_byte_map = null;
    }
  }

  public Map<Byte,Byte>  getByte_byte_hash_map() {
    return this.byte_byte_hash_map;
  }

  public CompactProtoTestStruct setByte_byte_hash_map(Map<Byte,Byte> byte_byte_hash_map) {
    this.byte_byte_hash_map = byte_byte_hash_map;
    return this;
  }

  public void unsetByte_byte_hash_map() {
    this.byte_byte_hash_map = null;
  }

  // Returns true if field byte_byte_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_byte_hash_map() {
    return this.byte_byte_hash_map != null;
  }

  public void setByte_byte_hash_mapIsSet(boolean value) {
    if (!value) {
      this.byte_byte_hash_map = null;
    }
  }

  public Map<Short,Byte>  getI16_byte_hash_map() {
    return this.i16_byte_hash_map;
  }

  public CompactProtoTestStruct setI16_byte_hash_map(Map<Short,Byte> i16_byte_hash_map) {
    this.i16_byte_hash_map = i16_byte_hash_map;
    return this;
  }

  public void unsetI16_byte_hash_map() {
    this.i16_byte_hash_map = null;
  }

  // Returns true if field i16_byte_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetI16_byte_hash_map() {
    return this.i16_byte_hash_map != null;
  }

  public void setI16_byte_hash_mapIsSet(boolean value) {
    if (!value) {
      this.i16_byte_hash_map = null;
    }
  }

  public Map<Integer,Byte>  getI32_byte_hash_map() {
    return this.i32_byte_hash_map;
  }

  public CompactProtoTestStruct setI32_byte_hash_map(Map<Integer,Byte> i32_byte_hash_map) {
    this.i32_byte_hash_map = i32_byte_hash_map;
    return this;
  }

  public void unsetI32_byte_hash_map() {
    this.i32_byte_hash_map = null;
  }

  // Returns true if field i32_byte_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetI32_byte_hash_map() {
    return this.i32_byte_hash_map != null;
  }

  public void setI32_byte_hash_mapIsSet(boolean value) {
    if (!value) {
      this.i32_byte_hash_map = null;
    }
  }

  public Map<Long,Byte>  getI64_byte_hash_map() {
    return this.i64_byte_hash_map;
  }

  public CompactProtoTestStruct setI64_byte_hash_map(Map<Long,Byte> i64_byte_hash_map) {
    this.i64_byte_hash_map = i64_byte_hash_map;
    return this;
  }

  public void unsetI64_byte_hash_map() {
    this.i64_byte_hash_map = null;
  }

  // Returns true if field i64_byte_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetI64_byte_hash_map() {
    return this.i64_byte_hash_map != null;
  }

  public void setI64_byte_hash_mapIsSet(boolean value) {
    if (!value) {
      this.i64_byte_hash_map = null;
    }
  }

  public Map<Double,Byte>  getDouble_byte_hash_map() {
    return this.double_byte_hash_map;
  }

  public CompactProtoTestStruct setDouble_byte_hash_map(Map<Double,Byte> double_byte_hash_map) {
    this.double_byte_hash_map = double_byte_hash_map;
    return this;
  }

  public void unsetDouble_byte_hash_map() {
    this.double_byte_hash_map = null;
  }

  // Returns true if field double_byte_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetDouble_byte_hash_map() {
    return this.double_byte_hash_map != null;
  }

  public void setDouble_byte_hash_mapIsSet(boolean value) {
    if (!value) {
      this.double_byte_hash_map = null;
    }
  }

  public Map<String,Byte>  getString_byte_hash_map() {
    return this.string_byte_hash_map;
  }

  public CompactProtoTestStruct setString_byte_hash_map(Map<String,Byte> string_byte_hash_map) {
    this.string_byte_hash_map = string_byte_hash_map;
    return this;
  }

  public void unsetString_byte_hash_map() {
    this.string_byte_hash_map = null;
  }

  // Returns true if field string_byte_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetString_byte_hash_map() {
    return this.string_byte_hash_map != null;
  }

  public void setString_byte_hash_mapIsSet(boolean value) {
    if (!value) {
      this.string_byte_hash_map = null;
    }
  }

  public Map<byte[],Byte>  getBinary_byte_hash_map() {
    return this.binary_byte_hash_map;
  }

  public CompactProtoTestStruct setBinary_byte_hash_map(Map<byte[],Byte> binary_byte_hash_map) {
    this.binary_byte_hash_map = binary_byte_hash_map;
    return this;
  }

  public void unsetBinary_byte_hash_map() {
    this.binary_byte_hash_map = null;
  }

  // Returns true if field binary_byte_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetBinary_byte_hash_map() {
    return this.binary_byte_hash_map != null;
  }

  public void setBinary_byte_hash_mapIsSet(boolean value) {
    if (!value) {
      this.binary_byte_hash_map = null;
    }
  }

  public Map<Boolean,Byte>  getBoolean_byte_hash_map() {
    return this.boolean_byte_hash_map;
  }

  public CompactProtoTestStruct setBoolean_byte_hash_map(Map<Boolean,Byte> boolean_byte_hash_map) {
    this.boolean_byte_hash_map = boolean_byte_hash_map;
    return this;
  }

  public void unsetBoolean_byte_hash_map() {
    this.boolean_byte_hash_map = null;
  }

  // Returns true if field boolean_byte_hash_map is set (has been assigned a value) and false otherwise
  public boolean isSetBoolean_byte_hash_map() {
    return this.boolean_byte_hash_map != null;
  }

  public void setBoolean_byte_hash_mapIsSet(boolean value) {
    if (!value) {
      this.boolean_byte_hash_map = null;
    }
  }

  public Map<Byte,Short>  getByte_i16_map() {
    return this.byte_i16_map;
  }

  public CompactProtoTestStruct setByte_i16_map(Map<Byte,Short> byte_i16_map) {
    this.byte_i16_map = byte_i16_map;
    return this;
  }

  public void unsetByte_i16_map() {
    this.byte_i16_map = null;
  }

  // Returns true if field byte_i16_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_i16_map() {
    return this.byte_i16_map != null;
  }

  public void setByte_i16_mapIsSet(boolean value) {
    if (!value) {
      this.byte_i16_map = null;
    }
  }

  public Map<Byte,Integer>  getByte_i32_map() {
    return this.byte_i32_map;
  }

  public CompactProtoTestStruct setByte_i32_map(Map<Byte,Integer> byte_i32_map) {
    this.byte_i32_map = byte_i32_map;
    return this;
  }

  public void unsetByte_i32_map() {
    this.byte_i32_map = null;
  }

  // Returns true if field byte_i32_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_i32_map() {
    return this.byte_i32_map != null;
  }

  public void setByte_i32_mapIsSet(boolean value) {
    if (!value) {
      this.byte_i32_map = null;
    }
  }

  public Map<Byte,Long>  getByte_i64_map() {
    return this.byte_i64_map;
  }

  public CompactProtoTestStruct setByte_i64_map(Map<Byte,Long> byte_i64_map) {
    this.byte_i64_map = byte_i64_map;
    return this;
  }

  public void unsetByte_i64_map() {
    this.byte_i64_map = null;
  }

  // Returns true if field byte_i64_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_i64_map() {
    return this.byte_i64_map != null;
  }

  public void setByte_i64_mapIsSet(boolean value) {
    if (!value) {
      this.byte_i64_map = null;
    }
  }

  public Map<Byte,Double>  getByte_double_map() {
    return this.byte_double_map;
  }

  public CompactProtoTestStruct setByte_double_map(Map<Byte,Double> byte_double_map) {
    this.byte_double_map = byte_double_map;
    return this;
  }

  public void unsetByte_double_map() {
    this.byte_double_map = null;
  }

  // Returns true if field byte_double_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_double_map() {
    return this.byte_double_map != null;
  }

  public void setByte_double_mapIsSet(boolean value) {
    if (!value) {
      this.byte_double_map = null;
    }
  }

  public Map<Byte,String>  getByte_string_map() {
    return this.byte_string_map;
  }

  public CompactProtoTestStruct setByte_string_map(Map<Byte,String> byte_string_map) {
    this.byte_string_map = byte_string_map;
    return this;
  }

  public void unsetByte_string_map() {
    this.byte_string_map = null;
  }

  // Returns true if field byte_string_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_string_map() {
    return this.byte_string_map != null;
  }

  public void setByte_string_mapIsSet(boolean value) {
    if (!value) {
      this.byte_string_map = null;
    }
  }

  public Map<Byte,byte[]>  getByte_binary_map() {
    return this.byte_binary_map;
  }

  public CompactProtoTestStruct setByte_binary_map(Map<Byte,byte[]> byte_binary_map) {
    this.byte_binary_map = byte_binary_map;
    return this;
  }

  public void unsetByte_binary_map() {
    this.byte_binary_map = null;
  }

  // Returns true if field byte_binary_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_binary_map() {
    return this.byte_binary_map != null;
  }

  public void setByte_binary_mapIsSet(boolean value) {
    if (!value) {
      this.byte_binary_map = null;
    }
  }

  public Map<Byte,Boolean>  getByte_boolean_map() {
    return this.byte_boolean_map;
  }

  public CompactProtoTestStruct setByte_boolean_map(Map<Byte,Boolean> byte_boolean_map) {
    this.byte_boolean_map = byte_boolean_map;
    return this;
  }

  public void unsetByte_boolean_map() {
    this.byte_boolean_map = null;
  }

  // Returns true if field byte_boolean_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_boolean_map() {
    return this.byte_boolean_map != null;
  }

  public void setByte_boolean_mapIsSet(boolean value) {
    if (!value) {
      this.byte_boolean_map = null;
    }
  }

  public Map<List<Byte>,Byte>  getList_byte_map() {
    return this.list_byte_map;
  }

  public CompactProtoTestStruct setList_byte_map(Map<List<Byte>,Byte> list_byte_map) {
    this.list_byte_map = list_byte_map;
    return this;
  }

  public void unsetList_byte_map() {
    this.list_byte_map = null;
  }

  // Returns true if field list_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetList_byte_map() {
    return this.list_byte_map != null;
  }

  public void setList_byte_mapIsSet(boolean value) {
    if (!value) {
      this.list_byte_map = null;
    }
  }

  public Map<Set<Byte>,Byte>  getSet_byte_map() {
    return this.set_byte_map;
  }

  public CompactProtoTestStruct setSet_byte_map(Map<Set<Byte>,Byte> set_byte_map) {
    this.set_byte_map = set_byte_map;
    return this;
  }

  public void unsetSet_byte_map() {
    this.set_byte_map = null;
  }

  // Returns true if field set_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetSet_byte_map() {
    return this.set_byte_map != null;
  }

  public void setSet_byte_mapIsSet(boolean value) {
    if (!value) {
      this.set_byte_map = null;
    }
  }

  public Map<Map<Byte,Byte>,Byte>  getMap_byte_map() {
    return this.map_byte_map;
  }

  public CompactProtoTestStruct setMap_byte_map(Map<Map<Byte,Byte>,Byte> map_byte_map) {
    this.map_byte_map = map_byte_map;
    return this;
  }

  public void unsetMap_byte_map() {
    this.map_byte_map = null;
  }

  // Returns true if field map_byte_map is set (has been assigned a value) and false otherwise
  public boolean isSetMap_byte_map() {
    return this.map_byte_map != null;
  }

  public void setMap_byte_mapIsSet(boolean value) {
    if (!value) {
      this.map_byte_map = null;
    }
  }

  public Map<Byte,Map<Byte,Byte>>  getByte_map_map() {
    return this.byte_map_map;
  }

  public CompactProtoTestStruct setByte_map_map(Map<Byte,Map<Byte,Byte>> byte_map_map) {
    this.byte_map_map = byte_map_map;
    return this;
  }

  public void unsetByte_map_map() {
    this.byte_map_map = null;
  }

  // Returns true if field byte_map_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_map_map() {
    return this.byte_map_map != null;
  }

  public void setByte_map_mapIsSet(boolean value) {
    if (!value) {
      this.byte_map_map = null;
    }
  }

  public Map<Byte,Set<Byte>>  getByte_set_map() {
    return this.byte_set_map;
  }

  public CompactProtoTestStruct setByte_set_map(Map<Byte,Set<Byte>> byte_set_map) {
    this.byte_set_map = byte_set_map;
    return this;
  }

  public void unsetByte_set_map() {
    this.byte_set_map = null;
  }

  // Returns true if field byte_set_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_set_map() {
    return this.byte_set_map != null;
  }

  public void setByte_set_mapIsSet(boolean value) {
    if (!value) {
      this.byte_set_map = null;
    }
  }

  public Map<Byte,List<Byte>>  getByte_list_map() {
    return this.byte_list_map;
  }

  public CompactProtoTestStruct setByte_list_map(Map<Byte,List<Byte>> byte_list_map) {
    this.byte_list_map = byte_list_map;
    return this;
  }

  public void unsetByte_list_map() {
    this.byte_list_map = null;
  }

  // Returns true if field byte_list_map is set (has been assigned a value) and false otherwise
  public boolean isSetByte_list_map() {
    return this.byte_list_map != null;
  }

  public void setByte_list_mapIsSet(boolean value) {
    if (!value) {
      this.byte_list_map = null;
    }
  }

  public List<Float>  getFloat_list() {
    return this.float_list;
  }

  public CompactProtoTestStruct setFloat_list(List<Float> float_list) {
    this.float_list = float_list;
    return this;
  }

  public void unsetFloat_list() {
    this.float_list = null;
  }

  // Returns true if field float_list is set (has been assigned a value) and false otherwise
  public boolean isSetFloat_list() {
    return this.float_list != null;
  }

  public void setFloat_listIsSet(boolean value) {
    if (!value) {
      this.float_list = null;
    }
  }

  public Map<Short,Float>  getI16_float_map() {
    return this.i16_float_map;
  }

  public CompactProtoTestStruct setI16_float_map(Map<Short,Float> i16_float_map) {
    this.i16_float_map = i16_float_map;
    return this;
  }

  public void unsetI16_float_map() {
    this.i16_float_map = null;
  }

  // Returns true if field i16_float_map is set (has been assigned a value) and false otherwise
  public boolean isSetI16_float_map() {
    return this.i16_float_map != null;
  }

  public void setI16_float_mapIsSet(boolean value) {
    if (!value) {
      this.i16_float_map = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case A_BYTE:
      if (value == null) {
        unsetA_byte();
      } else {
        setA_byte((Byte)value);
      }
      break;

    case A_I16:
      if (value == null) {
        unsetA_i16();
      } else {
        setA_i16((Short)value);
      }
      break;

    case A_I32:
      if (value == null) {
        unsetA_i32();
      } else {
        setA_i32((Integer)value);
      }
      break;

    case A_I64:
      if (value == null) {
        unsetA_i64();
      } else {
        setA_i64((Long)value);
      }
      break;

    case A_DOUBLE:
      if (value == null) {
        unsetA_double();
      } else {
        setA_double((Double)value);
      }
      break;

    case A_STRING:
      if (value == null) {
        unsetA_string();
      } else {
        setA_string((String)value);
      }
      break;

    case A_BINARY:
      if (value == null) {
        unsetA_binary();
      } else {
        setA_binary((byte[])value);
      }
      break;

    case TRUE_FIELD:
      if (value == null) {
        unsetTrue_field();
      } else {
        setTrue_field((Boolean)value);
      }
      break;

    case FALSE_FIELD:
      if (value == null) {
        unsetFalse_field();
      } else {
        setFalse_field((Boolean)value);
      }
      break;

    case EMPTY_STRUCT_FIELD:
      if (value == null) {
        unsetEmpty_struct_field();
      } else {
        setEmpty_struct_field((Empty)value);
      }
      break;

    case BYTE_LIST:
      if (value == null) {
        unsetByte_list();
      } else {
        setByte_list((List<Byte>)value);
      }
      break;

    case I16_LIST:
      if (value == null) {
        unsetI16_list();
      } else {
        setI16_list((List<Short>)value);
      }
      break;

    case I32_LIST:
      if (value == null) {
        unsetI32_list();
      } else {
        setI32_list((List<Integer>)value);
      }
      break;

    case I64_LIST:
      if (value == null) {
        unsetI64_list();
      } else {
        setI64_list((List<Long>)value);
      }
      break;

    case DOUBLE_LIST:
      if (value == null) {
        unsetDouble_list();
      } else {
        setDouble_list((List<Double>)value);
      }
      break;

    case STRING_LIST:
      if (value == null) {
        unsetString_list();
      } else {
        setString_list((List<String>)value);
      }
      break;

    case BINARY_LIST:
      if (value == null) {
        unsetBinary_list();
      } else {
        setBinary_list((List<byte[]>)value);
      }
      break;

    case BOOLEAN_LIST:
      if (value == null) {
        unsetBoolean_list();
      } else {
        setBoolean_list((List<Boolean>)value);
      }
      break;

    case STRUCT_LIST:
      if (value == null) {
        unsetStruct_list();
      } else {
        setStruct_list((List<Empty>)value);
      }
      break;

    case BYTE_SET:
      if (value == null) {
        unsetByte_set();
      } else {
        setByte_set((Set<Byte>)value);
      }
      break;

    case I16_SET:
      if (value == null) {
        unsetI16_set();
      } else {
        setI16_set((Set<Short>)value);
      }
      break;

    case I32_SET:
      if (value == null) {
        unsetI32_set();
      } else {
        setI32_set((Set<Integer>)value);
      }
      break;

    case I64_SET:
      if (value == null) {
        unsetI64_set();
      } else {
        setI64_set((Set<Long>)value);
      }
      break;

    case DOUBLE_SET:
      if (value == null) {
        unsetDouble_set();
      } else {
        setDouble_set((Set<Double>)value);
      }
      break;

    case STRING_SET:
      if (value == null) {
        unsetString_set();
      } else {
        setString_set((Set<String>)value);
      }
      break;

    case BINARY_SET:
      if (value == null) {
        unsetBinary_set();
      } else {
        setBinary_set((Set<byte[]>)value);
      }
      break;

    case BOOLEAN_SET:
      if (value == null) {
        unsetBoolean_set();
      } else {
        setBoolean_set((Set<Boolean>)value);
      }
      break;

    case STRUCT_SET:
      if (value == null) {
        unsetStruct_set();
      } else {
        setStruct_set((Set<Empty>)value);
      }
      break;

    case BYTE_HASH_SET:
      if (value == null) {
        unsetByte_hash_set();
      } else {
        setByte_hash_set((Set<Byte>)value);
      }
      break;

    case I16_HASH_SET:
      if (value == null) {
        unsetI16_hash_set();
      } else {
        setI16_hash_set((Set<Short>)value);
      }
      break;

    case I32_HASH_SET:
      if (value == null) {
        unsetI32_hash_set();
      } else {
        setI32_hash_set((Set<Integer>)value);
      }
      break;

    case I64_HASH_SET:
      if (value == null) {
        unsetI64_hash_set();
      } else {
        setI64_hash_set((Set<Long>)value);
      }
      break;

    case DOUBLE_HASH_SET:
      if (value == null) {
        unsetDouble_hash_set();
      } else {
        setDouble_hash_set((Set<Double>)value);
      }
      break;

    case STRING_HASH_SET:
      if (value == null) {
        unsetString_hash_set();
      } else {
        setString_hash_set((Set<String>)value);
      }
      break;

    case BINARY_HASH_SET:
      if (value == null) {
        unsetBinary_hash_set();
      } else {
        setBinary_hash_set((Set<byte[]>)value);
      }
      break;

    case BOOLEAN_HASH_SET:
      if (value == null) {
        unsetBoolean_hash_set();
      } else {
        setBoolean_hash_set((Set<Boolean>)value);
      }
      break;

    case BYTE_BYTE_MAP:
      if (value == null) {
        unsetByte_byte_map();
      } else {
        setByte_byte_map((Map<Byte,Byte>)value);
      }
      break;

    case I16_BYTE_MAP:
      if (value == null) {
        unsetI16_byte_map();
      } else {
        setI16_byte_map((Map<Short,Byte>)value);
      }
      break;

    case I32_BYTE_MAP:
      if (value == null) {
        unsetI32_byte_map();
      } else {
        setI32_byte_map((Map<Integer,Byte>)value);
      }
      break;

    case I64_BYTE_MAP:
      if (value == null) {
        unsetI64_byte_map();
      } else {
        setI64_byte_map((Map<Long,Byte>)value);
      }
      break;

    case DOUBLE_BYTE_MAP:
      if (value == null) {
        unsetDouble_byte_map();
      } else {
        setDouble_byte_map((Map<Double,Byte>)value);
      }
      break;

    case STRING_BYTE_MAP:
      if (value == null) {
        unsetString_byte_map();
      } else {
        setString_byte_map((Map<String,Byte>)value);
      }
      break;

    case BINARY_BYTE_MAP:
      if (value == null) {
        unsetBinary_byte_map();
      } else {
        setBinary_byte_map((Map<byte[],Byte>)value);
      }
      break;

    case BOOLEAN_BYTE_MAP:
      if (value == null) {
        unsetBoolean_byte_map();
      } else {
        setBoolean_byte_map((Map<Boolean,Byte>)value);
      }
      break;

    case BYTE_BYTE_HASH_MAP:
      if (value == null) {
        unsetByte_byte_hash_map();
      } else {
        setByte_byte_hash_map((Map<Byte,Byte>)value);
      }
      break;

    case I16_BYTE_HASH_MAP:
      if (value == null) {
        unsetI16_byte_hash_map();
      } else {
        setI16_byte_hash_map((Map<Short,Byte>)value);
      }
      break;

    case I32_BYTE_HASH_MAP:
      if (value == null) {
        unsetI32_byte_hash_map();
      } else {
        setI32_byte_hash_map((Map<Integer,Byte>)value);
      }
      break;

    case I64_BYTE_HASH_MAP:
      if (value == null) {
        unsetI64_byte_hash_map();
      } else {
        setI64_byte_hash_map((Map<Long,Byte>)value);
      }
      break;

    case DOUBLE_BYTE_HASH_MAP:
      if (value == null) {
        unsetDouble_byte_hash_map();
      } else {
        setDouble_byte_hash_map((Map<Double,Byte>)value);
      }
      break;

    case STRING_BYTE_HASH_MAP:
      if (value == null) {
        unsetString_byte_hash_map();
      } else {
        setString_byte_hash_map((Map<String,Byte>)value);
      }
      break;

    case BINARY_BYTE_HASH_MAP:
      if (value == null) {
        unsetBinary_byte_hash_map();
      } else {
        setBinary_byte_hash_map((Map<byte[],Byte>)value);
      }
      break;

    case BOOLEAN_BYTE_HASH_MAP:
      if (value == null) {
        unsetBoolean_byte_hash_map();
      } else {
        setBoolean_byte_hash_map((Map<Boolean,Byte>)value);
      }
      break;

    case BYTE_I16_MAP:
      if (value == null) {
        unsetByte_i16_map();
      } else {
        setByte_i16_map((Map<Byte,Short>)value);
      }
      break;

    case BYTE_I32_MAP:
      if (value == null) {
        unsetByte_i32_map();
      } else {
        setByte_i32_map((Map<Byte,Integer>)value);
      }
      break;

    case BYTE_I64_MAP:
      if (value == null) {
        unsetByte_i64_map();
      } else {
        setByte_i64_map((Map<Byte,Long>)value);
      }
      break;

    case BYTE_DOUBLE_MAP:
      if (value == null) {
        unsetByte_double_map();
      } else {
        setByte_double_map((Map<Byte,Double>)value);
      }
      break;

    case BYTE_STRING_MAP:
      if (value == null) {
        unsetByte_string_map();
      } else {
        setByte_string_map((Map<Byte,String>)value);
      }
      break;

    case BYTE_BINARY_MAP:
      if (value == null) {
        unsetByte_binary_map();
      } else {
        setByte_binary_map((Map<Byte,byte[]>)value);
      }
      break;

    case BYTE_BOOLEAN_MAP:
      if (value == null) {
        unsetByte_boolean_map();
      } else {
        setByte_boolean_map((Map<Byte,Boolean>)value);
      }
      break;

    case LIST_BYTE_MAP:
      if (value == null) {
        unsetList_byte_map();
      } else {
        setList_byte_map((Map<List<Byte>,Byte>)value);
      }
      break;

    case SET_BYTE_MAP:
      if (value == null) {
        unsetSet_byte_map();
      } else {
        setSet_byte_map((Map<Set<Byte>,Byte>)value);
      }
      break;

    case MAP_BYTE_MAP:
      if (value == null) {
        unsetMap_byte_map();
      } else {
        setMap_byte_map((Map<Map<Byte,Byte>,Byte>)value);
      }
      break;

    case BYTE_MAP_MAP:
      if (value == null) {
        unsetByte_map_map();
      } else {
        setByte_map_map((Map<Byte,Map<Byte,Byte>>)value);
      }
      break;

    case BYTE_SET_MAP:
      if (value == null) {
        unsetByte_set_map();
      } else {
        setByte_set_map((Map<Byte,Set<Byte>>)value);
      }
      break;

    case BYTE_LIST_MAP:
      if (value == null) {
        unsetByte_list_map();
      } else {
        setByte_list_map((Map<Byte,List<Byte>>)value);
      }
      break;

    case FLOAT_LIST:
      if (value == null) {
        unsetFloat_list();
      } else {
        setFloat_list((List<Float>)value);
      }
      break;

    case I16_FLOAT_MAP:
      if (value == null) {
        unsetI16_float_map();
      } else {
        setI16_float_map((Map<Short,Float>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case A_BYTE:
      return new Byte(getA_byte());

    case A_I16:
      return new Short(getA_i16());

    case A_I32:
      return new Integer(getA_i32());

    case A_I64:
      return new Long(getA_i64());

    case A_DOUBLE:
      return new Double(getA_double());

    case A_STRING:
      return getA_string();

    case A_BINARY:
      return getA_binary();

    case TRUE_FIELD:
      return new Boolean(isTrue_field());

    case FALSE_FIELD:
      return new Boolean(isFalse_field());

    case EMPTY_STRUCT_FIELD:
      return getEmpty_struct_field();

    case BYTE_LIST:
      return getByte_list();

    case I16_LIST:
      return getI16_list();

    case I32_LIST:
      return getI32_list();

    case I64_LIST:
      return getI64_list();

    case DOUBLE_LIST:
      return getDouble_list();

    case STRING_LIST:
      return getString_list();

    case BINARY_LIST:
      return getBinary_list();

    case BOOLEAN_LIST:
      return getBoolean_list();

    case STRUCT_LIST:
      return getStruct_list();

    case BYTE_SET:
      return getByte_set();

    case I16_SET:
      return getI16_set();

    case I32_SET:
      return getI32_set();

    case I64_SET:
      return getI64_set();

    case DOUBLE_SET:
      return getDouble_set();

    case STRING_SET:
      return getString_set();

    case BINARY_SET:
      return getBinary_set();

    case BOOLEAN_SET:
      return getBoolean_set();

    case STRUCT_SET:
      return getStruct_set();

    case BYTE_HASH_SET:
      return getByte_hash_set();

    case I16_HASH_SET:
      return getI16_hash_set();

    case I32_HASH_SET:
      return getI32_hash_set();

    case I64_HASH_SET:
      return getI64_hash_set();

    case DOUBLE_HASH_SET:
      return getDouble_hash_set();

    case STRING_HASH_SET:
      return getString_hash_set();

    case BINARY_HASH_SET:
      return getBinary_hash_set();

    case BOOLEAN_HASH_SET:
      return getBoolean_hash_set();

    case BYTE_BYTE_MAP:
      return getByte_byte_map();

    case I16_BYTE_MAP:
      return getI16_byte_map();

    case I32_BYTE_MAP:
      return getI32_byte_map();

    case I64_BYTE_MAP:
      return getI64_byte_map();

    case DOUBLE_BYTE_MAP:
      return getDouble_byte_map();

    case STRING_BYTE_MAP:
      return getString_byte_map();

    case BINARY_BYTE_MAP:
      return getBinary_byte_map();

    case BOOLEAN_BYTE_MAP:
      return getBoolean_byte_map();

    case BYTE_BYTE_HASH_MAP:
      return getByte_byte_hash_map();

    case I16_BYTE_HASH_MAP:
      return getI16_byte_hash_map();

    case I32_BYTE_HASH_MAP:
      return getI32_byte_hash_map();

    case I64_BYTE_HASH_MAP:
      return getI64_byte_hash_map();

    case DOUBLE_BYTE_HASH_MAP:
      return getDouble_byte_hash_map();

    case STRING_BYTE_HASH_MAP:
      return getString_byte_hash_map();

    case BINARY_BYTE_HASH_MAP:
      return getBinary_byte_hash_map();

    case BOOLEAN_BYTE_HASH_MAP:
      return getBoolean_byte_hash_map();

    case BYTE_I16_MAP:
      return getByte_i16_map();

    case BYTE_I32_MAP:
      return getByte_i32_map();

    case BYTE_I64_MAP:
      return getByte_i64_map();

    case BYTE_DOUBLE_MAP:
      return getByte_double_map();

    case BYTE_STRING_MAP:
      return getByte_string_map();

    case BYTE_BINARY_MAP:
      return getByte_binary_map();

    case BYTE_BOOLEAN_MAP:
      return getByte_boolean_map();

    case LIST_BYTE_MAP:
      return getList_byte_map();

    case SET_BYTE_MAP:
      return getSet_byte_map();

    case MAP_BYTE_MAP:
      return getMap_byte_map();

    case BYTE_MAP_MAP:
      return getByte_map_map();

    case BYTE_SET_MAP:
      return getByte_set_map();

    case BYTE_LIST_MAP:
      return getByte_list_map();

    case FLOAT_LIST:
      return getFloat_list();

    case I16_FLOAT_MAP:
      return getI16_float_map();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case A_BYTE:
      return isSetA_byte();
    case A_I16:
      return isSetA_i16();
    case A_I32:
      return isSetA_i32();
    case A_I64:
      return isSetA_i64();
    case A_DOUBLE:
      return isSetA_double();
    case A_STRING:
      return isSetA_string();
    case A_BINARY:
      return isSetA_binary();
    case TRUE_FIELD:
      return isSetTrue_field();
    case FALSE_FIELD:
      return isSetFalse_field();
    case EMPTY_STRUCT_FIELD:
      return isSetEmpty_struct_field();
    case BYTE_LIST:
      return isSetByte_list();
    case I16_LIST:
      return isSetI16_list();
    case I32_LIST:
      return isSetI32_list();
    case I64_LIST:
      return isSetI64_list();
    case DOUBLE_LIST:
      return isSetDouble_list();
    case STRING_LIST:
      return isSetString_list();
    case BINARY_LIST:
      return isSetBinary_list();
    case BOOLEAN_LIST:
      return isSetBoolean_list();
    case STRUCT_LIST:
      return isSetStruct_list();
    case BYTE_SET:
      return isSetByte_set();
    case I16_SET:
      return isSetI16_set();
    case I32_SET:
      return isSetI32_set();
    case I64_SET:
      return isSetI64_set();
    case DOUBLE_SET:
      return isSetDouble_set();
    case STRING_SET:
      return isSetString_set();
    case BINARY_SET:
      return isSetBinary_set();
    case BOOLEAN_SET:
      return isSetBoolean_set();
    case STRUCT_SET:
      return isSetStruct_set();
    case BYTE_HASH_SET:
      return isSetByte_hash_set();
    case I16_HASH_SET:
      return isSetI16_hash_set();
    case I32_HASH_SET:
      return isSetI32_hash_set();
    case I64_HASH_SET:
      return isSetI64_hash_set();
    case DOUBLE_HASH_SET:
      return isSetDouble_hash_set();
    case STRING_HASH_SET:
      return isSetString_hash_set();
    case BINARY_HASH_SET:
      return isSetBinary_hash_set();
    case BOOLEAN_HASH_SET:
      return isSetBoolean_hash_set();
    case BYTE_BYTE_MAP:
      return isSetByte_byte_map();
    case I16_BYTE_MAP:
      return isSetI16_byte_map();
    case I32_BYTE_MAP:
      return isSetI32_byte_map();
    case I64_BYTE_MAP:
      return isSetI64_byte_map();
    case DOUBLE_BYTE_MAP:
      return isSetDouble_byte_map();
    case STRING_BYTE_MAP:
      return isSetString_byte_map();
    case BINARY_BYTE_MAP:
      return isSetBinary_byte_map();
    case BOOLEAN_BYTE_MAP:
      return isSetBoolean_byte_map();
    case BYTE_BYTE_HASH_MAP:
      return isSetByte_byte_hash_map();
    case I16_BYTE_HASH_MAP:
      return isSetI16_byte_hash_map();
    case I32_BYTE_HASH_MAP:
      return isSetI32_byte_hash_map();
    case I64_BYTE_HASH_MAP:
      return isSetI64_byte_hash_map();
    case DOUBLE_BYTE_HASH_MAP:
      return isSetDouble_byte_hash_map();
    case STRING_BYTE_HASH_MAP:
      return isSetString_byte_hash_map();
    case BINARY_BYTE_HASH_MAP:
      return isSetBinary_byte_hash_map();
    case BOOLEAN_BYTE_HASH_MAP:
      return isSetBoolean_byte_hash_map();
    case BYTE_I16_MAP:
      return isSetByte_i16_map();
    case BYTE_I32_MAP:
      return isSetByte_i32_map();
    case BYTE_I64_MAP:
      return isSetByte_i64_map();
    case BYTE_DOUBLE_MAP:
      return isSetByte_double_map();
    case BYTE_STRING_MAP:
      return isSetByte_string_map();
    case BYTE_BINARY_MAP:
      return isSetByte_binary_map();
    case BYTE_BOOLEAN_MAP:
      return isSetByte_boolean_map();
    case LIST_BYTE_MAP:
      return isSetList_byte_map();
    case SET_BYTE_MAP:
      return isSetSet_byte_map();
    case MAP_BYTE_MAP:
      return isSetMap_byte_map();
    case BYTE_MAP_MAP:
      return isSetByte_map_map();
    case BYTE_SET_MAP:
      return isSetByte_set_map();
    case BYTE_LIST_MAP:
      return isSetByte_list_map();
    case FLOAT_LIST:
      return isSetFloat_list();
    case I16_FLOAT_MAP:
      return isSetI16_float_map();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CompactProtoTestStruct)
      return this.equals((CompactProtoTestStruct)that);
    return false;
  }

  public boolean equals(CompactProtoTestStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_a_byte = true;
    boolean that_present_a_byte = true;
    if (this_present_a_byte || that_present_a_byte) {
      if (!(this_present_a_byte && that_present_a_byte))
        return false;
      if (!TBaseHelper.equalsNobinary(this.a_byte, that.a_byte))
        return false;
    }

    boolean this_present_a_i16 = true;
    boolean that_present_a_i16 = true;
    if (this_present_a_i16 || that_present_a_i16) {
      if (!(this_present_a_i16 && that_present_a_i16))
        return false;
      if (!TBaseHelper.equalsNobinary(this.a_i16, that.a_i16))
        return false;
    }

    boolean this_present_a_i32 = true;
    boolean that_present_a_i32 = true;
    if (this_present_a_i32 || that_present_a_i32) {
      if (!(this_present_a_i32 && that_present_a_i32))
        return false;
      if (!TBaseHelper.equalsNobinary(this.a_i32, that.a_i32))
        return false;
    }

    boolean this_present_a_i64 = true;
    boolean that_present_a_i64 = true;
    if (this_present_a_i64 || that_present_a_i64) {
      if (!(this_present_a_i64 && that_present_a_i64))
        return false;
      if (!TBaseHelper.equalsNobinary(this.a_i64, that.a_i64))
        return false;
    }

    boolean this_present_a_double = true;
    boolean that_present_a_double = true;
    if (this_present_a_double || that_present_a_double) {
      if (!(this_present_a_double && that_present_a_double))
        return false;
      if (!TBaseHelper.equalsNobinary(this.a_double, that.a_double))
        return false;
    }

    boolean this_present_a_string = true && this.isSetA_string();
    boolean that_present_a_string = true && that.isSetA_string();
    if (this_present_a_string || that_present_a_string) {
      if (!(this_present_a_string && that_present_a_string))
        return false;
      if (!TBaseHelper.equalsNobinary(this.a_string, that.a_string))
        return false;
    }

    boolean this_present_a_binary = true && this.isSetA_binary();
    boolean that_present_a_binary = true && that.isSetA_binary();
    if (this_present_a_binary || that_present_a_binary) {
      if (!(this_present_a_binary && that_present_a_binary))
        return false;
      if (!TBaseHelper.equalsSlow(this.a_binary, that.a_binary))
        return false;
    }

    boolean this_present_true_field = true;
    boolean that_present_true_field = true;
    if (this_present_true_field || that_present_true_field) {
      if (!(this_present_true_field && that_present_true_field))
        return false;
      if (!TBaseHelper.equalsNobinary(this.true_field, that.true_field))
        return false;
    }

    boolean this_present_false_field = true;
    boolean that_present_false_field = true;
    if (this_present_false_field || that_present_false_field) {
      if (!(this_present_false_field && that_present_false_field))
        return false;
      if (!TBaseHelper.equalsNobinary(this.false_field, that.false_field))
        return false;
    }

    boolean this_present_empty_struct_field = true && this.isSetEmpty_struct_field();
    boolean that_present_empty_struct_field = true && that.isSetEmpty_struct_field();
    if (this_present_empty_struct_field || that_present_empty_struct_field) {
      if (!(this_present_empty_struct_field && that_present_empty_struct_field))
        return false;
      if (!TBaseHelper.equalsNobinary(this.empty_struct_field, that.empty_struct_field))
        return false;
    }

    boolean this_present_byte_list = true && this.isSetByte_list();
    boolean that_present_byte_list = true && that.isSetByte_list();
    if (this_present_byte_list || that_present_byte_list) {
      if (!(this_present_byte_list && that_present_byte_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_list, that.byte_list))
        return false;
    }

    boolean this_present_i16_list = true && this.isSetI16_list();
    boolean that_present_i16_list = true && that.isSetI16_list();
    if (this_present_i16_list || that_present_i16_list) {
      if (!(this_present_i16_list && that_present_i16_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i16_list, that.i16_list))
        return false;
    }

    boolean this_present_i32_list = true && this.isSetI32_list();
    boolean that_present_i32_list = true && that.isSetI32_list();
    if (this_present_i32_list || that_present_i32_list) {
      if (!(this_present_i32_list && that_present_i32_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i32_list, that.i32_list))
        return false;
    }

    boolean this_present_i64_list = true && this.isSetI64_list();
    boolean that_present_i64_list = true && that.isSetI64_list();
    if (this_present_i64_list || that_present_i64_list) {
      if (!(this_present_i64_list && that_present_i64_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i64_list, that.i64_list))
        return false;
    }

    boolean this_present_double_list = true && this.isSetDouble_list();
    boolean that_present_double_list = true && that.isSetDouble_list();
    if (this_present_double_list || that_present_double_list) {
      if (!(this_present_double_list && that_present_double_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.double_list, that.double_list))
        return false;
    }

    boolean this_present_string_list = true && this.isSetString_list();
    boolean that_present_string_list = true && that.isSetString_list();
    if (this_present_string_list || that_present_string_list) {
      if (!(this_present_string_list && that_present_string_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_list, that.string_list))
        return false;
    }

    boolean this_present_binary_list = true && this.isSetBinary_list();
    boolean that_present_binary_list = true && that.isSetBinary_list();
    if (this_present_binary_list || that_present_binary_list) {
      if (!(this_present_binary_list && that_present_binary_list))
        return false;
      if (!TBaseHelper.equalsSlow(this.binary_list, that.binary_list))
        return false;
    }

    boolean this_present_boolean_list = true && this.isSetBoolean_list();
    boolean that_present_boolean_list = true && that.isSetBoolean_list();
    if (this_present_boolean_list || that_present_boolean_list) {
      if (!(this_present_boolean_list && that_present_boolean_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.boolean_list, that.boolean_list))
        return false;
    }

    boolean this_present_struct_list = true && this.isSetStruct_list();
    boolean that_present_struct_list = true && that.isSetStruct_list();
    if (this_present_struct_list || that_present_struct_list) {
      if (!(this_present_struct_list && that_present_struct_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.struct_list, that.struct_list))
        return false;
    }

    boolean this_present_byte_set = true && this.isSetByte_set();
    boolean that_present_byte_set = true && that.isSetByte_set();
    if (this_present_byte_set || that_present_byte_set) {
      if (!(this_present_byte_set && that_present_byte_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_set, that.byte_set))
        return false;
    }

    boolean this_present_i16_set = true && this.isSetI16_set();
    boolean that_present_i16_set = true && that.isSetI16_set();
    if (this_present_i16_set || that_present_i16_set) {
      if (!(this_present_i16_set && that_present_i16_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i16_set, that.i16_set))
        return false;
    }

    boolean this_present_i32_set = true && this.isSetI32_set();
    boolean that_present_i32_set = true && that.isSetI32_set();
    if (this_present_i32_set || that_present_i32_set) {
      if (!(this_present_i32_set && that_present_i32_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i32_set, that.i32_set))
        return false;
    }

    boolean this_present_i64_set = true && this.isSetI64_set();
    boolean that_present_i64_set = true && that.isSetI64_set();
    if (this_present_i64_set || that_present_i64_set) {
      if (!(this_present_i64_set && that_present_i64_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i64_set, that.i64_set))
        return false;
    }

    boolean this_present_double_set = true && this.isSetDouble_set();
    boolean that_present_double_set = true && that.isSetDouble_set();
    if (this_present_double_set || that_present_double_set) {
      if (!(this_present_double_set && that_present_double_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.double_set, that.double_set))
        return false;
    }

    boolean this_present_string_set = true && this.isSetString_set();
    boolean that_present_string_set = true && that.isSetString_set();
    if (this_present_string_set || that_present_string_set) {
      if (!(this_present_string_set && that_present_string_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_set, that.string_set))
        return false;
    }

    boolean this_present_binary_set = true && this.isSetBinary_set();
    boolean that_present_binary_set = true && that.isSetBinary_set();
    if (this_present_binary_set || that_present_binary_set) {
      if (!(this_present_binary_set && that_present_binary_set))
        return false;
      if (!TBaseHelper.equalsSlow(this.binary_set, that.binary_set))
        return false;
    }

    boolean this_present_boolean_set = true && this.isSetBoolean_set();
    boolean that_present_boolean_set = true && that.isSetBoolean_set();
    if (this_present_boolean_set || that_present_boolean_set) {
      if (!(this_present_boolean_set && that_present_boolean_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.boolean_set, that.boolean_set))
        return false;
    }

    boolean this_present_struct_set = true && this.isSetStruct_set();
    boolean that_present_struct_set = true && that.isSetStruct_set();
    if (this_present_struct_set || that_present_struct_set) {
      if (!(this_present_struct_set && that_present_struct_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.struct_set, that.struct_set))
        return false;
    }

    boolean this_present_byte_hash_set = true && this.isSetByte_hash_set();
    boolean that_present_byte_hash_set = true && that.isSetByte_hash_set();
    if (this_present_byte_hash_set || that_present_byte_hash_set) {
      if (!(this_present_byte_hash_set && that_present_byte_hash_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_hash_set, that.byte_hash_set))
        return false;
    }

    boolean this_present_i16_hash_set = true && this.isSetI16_hash_set();
    boolean that_present_i16_hash_set = true && that.isSetI16_hash_set();
    if (this_present_i16_hash_set || that_present_i16_hash_set) {
      if (!(this_present_i16_hash_set && that_present_i16_hash_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i16_hash_set, that.i16_hash_set))
        return false;
    }

    boolean this_present_i32_hash_set = true && this.isSetI32_hash_set();
    boolean that_present_i32_hash_set = true && that.isSetI32_hash_set();
    if (this_present_i32_hash_set || that_present_i32_hash_set) {
      if (!(this_present_i32_hash_set && that_present_i32_hash_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i32_hash_set, that.i32_hash_set))
        return false;
    }

    boolean this_present_i64_hash_set = true && this.isSetI64_hash_set();
    boolean that_present_i64_hash_set = true && that.isSetI64_hash_set();
    if (this_present_i64_hash_set || that_present_i64_hash_set) {
      if (!(this_present_i64_hash_set && that_present_i64_hash_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i64_hash_set, that.i64_hash_set))
        return false;
    }

    boolean this_present_double_hash_set = true && this.isSetDouble_hash_set();
    boolean that_present_double_hash_set = true && that.isSetDouble_hash_set();
    if (this_present_double_hash_set || that_present_double_hash_set) {
      if (!(this_present_double_hash_set && that_present_double_hash_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.double_hash_set, that.double_hash_set))
        return false;
    }

    boolean this_present_string_hash_set = true && this.isSetString_hash_set();
    boolean that_present_string_hash_set = true && that.isSetString_hash_set();
    if (this_present_string_hash_set || that_present_string_hash_set) {
      if (!(this_present_string_hash_set && that_present_string_hash_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_hash_set, that.string_hash_set))
        return false;
    }

    boolean this_present_binary_hash_set = true && this.isSetBinary_hash_set();
    boolean that_present_binary_hash_set = true && that.isSetBinary_hash_set();
    if (this_present_binary_hash_set || that_present_binary_hash_set) {
      if (!(this_present_binary_hash_set && that_present_binary_hash_set))
        return false;
      if (!TBaseHelper.equalsSlow(this.binary_hash_set, that.binary_hash_set))
        return false;
    }

    boolean this_present_boolean_hash_set = true && this.isSetBoolean_hash_set();
    boolean that_present_boolean_hash_set = true && that.isSetBoolean_hash_set();
    if (this_present_boolean_hash_set || that_present_boolean_hash_set) {
      if (!(this_present_boolean_hash_set && that_present_boolean_hash_set))
        return false;
      if (!TBaseHelper.equalsNobinary(this.boolean_hash_set, that.boolean_hash_set))
        return false;
    }

    boolean this_present_byte_byte_map = true && this.isSetByte_byte_map();
    boolean that_present_byte_byte_map = true && that.isSetByte_byte_map();
    if (this_present_byte_byte_map || that_present_byte_byte_map) {
      if (!(this_present_byte_byte_map && that_present_byte_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_byte_map, that.byte_byte_map))
        return false;
    }

    boolean this_present_i16_byte_map = true && this.isSetI16_byte_map();
    boolean that_present_i16_byte_map = true && that.isSetI16_byte_map();
    if (this_present_i16_byte_map || that_present_i16_byte_map) {
      if (!(this_present_i16_byte_map && that_present_i16_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i16_byte_map, that.i16_byte_map))
        return false;
    }

    boolean this_present_i32_byte_map = true && this.isSetI32_byte_map();
    boolean that_present_i32_byte_map = true && that.isSetI32_byte_map();
    if (this_present_i32_byte_map || that_present_i32_byte_map) {
      if (!(this_present_i32_byte_map && that_present_i32_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i32_byte_map, that.i32_byte_map))
        return false;
    }

    boolean this_present_i64_byte_map = true && this.isSetI64_byte_map();
    boolean that_present_i64_byte_map = true && that.isSetI64_byte_map();
    if (this_present_i64_byte_map || that_present_i64_byte_map) {
      if (!(this_present_i64_byte_map && that_present_i64_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i64_byte_map, that.i64_byte_map))
        return false;
    }

    boolean this_present_double_byte_map = true && this.isSetDouble_byte_map();
    boolean that_present_double_byte_map = true && that.isSetDouble_byte_map();
    if (this_present_double_byte_map || that_present_double_byte_map) {
      if (!(this_present_double_byte_map && that_present_double_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.double_byte_map, that.double_byte_map))
        return false;
    }

    boolean this_present_string_byte_map = true && this.isSetString_byte_map();
    boolean that_present_string_byte_map = true && that.isSetString_byte_map();
    if (this_present_string_byte_map || that_present_string_byte_map) {
      if (!(this_present_string_byte_map && that_present_string_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_byte_map, that.string_byte_map))
        return false;
    }

    boolean this_present_binary_byte_map = true && this.isSetBinary_byte_map();
    boolean that_present_binary_byte_map = true && that.isSetBinary_byte_map();
    if (this_present_binary_byte_map || that_present_binary_byte_map) {
      if (!(this_present_binary_byte_map && that_present_binary_byte_map))
        return false;
      if (!TBaseHelper.equalsSlow(this.binary_byte_map, that.binary_byte_map))
        return false;
    }

    boolean this_present_boolean_byte_map = true && this.isSetBoolean_byte_map();
    boolean that_present_boolean_byte_map = true && that.isSetBoolean_byte_map();
    if (this_present_boolean_byte_map || that_present_boolean_byte_map) {
      if (!(this_present_boolean_byte_map && that_present_boolean_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.boolean_byte_map, that.boolean_byte_map))
        return false;
    }

    boolean this_present_byte_byte_hash_map = true && this.isSetByte_byte_hash_map();
    boolean that_present_byte_byte_hash_map = true && that.isSetByte_byte_hash_map();
    if (this_present_byte_byte_hash_map || that_present_byte_byte_hash_map) {
      if (!(this_present_byte_byte_hash_map && that_present_byte_byte_hash_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_byte_hash_map, that.byte_byte_hash_map))
        return false;
    }

    boolean this_present_i16_byte_hash_map = true && this.isSetI16_byte_hash_map();
    boolean that_present_i16_byte_hash_map = true && that.isSetI16_byte_hash_map();
    if (this_present_i16_byte_hash_map || that_present_i16_byte_hash_map) {
      if (!(this_present_i16_byte_hash_map && that_present_i16_byte_hash_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i16_byte_hash_map, that.i16_byte_hash_map))
        return false;
    }

    boolean this_present_i32_byte_hash_map = true && this.isSetI32_byte_hash_map();
    boolean that_present_i32_byte_hash_map = true && that.isSetI32_byte_hash_map();
    if (this_present_i32_byte_hash_map || that_present_i32_byte_hash_map) {
      if (!(this_present_i32_byte_hash_map && that_present_i32_byte_hash_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i32_byte_hash_map, that.i32_byte_hash_map))
        return false;
    }

    boolean this_present_i64_byte_hash_map = true && this.isSetI64_byte_hash_map();
    boolean that_present_i64_byte_hash_map = true && that.isSetI64_byte_hash_map();
    if (this_present_i64_byte_hash_map || that_present_i64_byte_hash_map) {
      if (!(this_present_i64_byte_hash_map && that_present_i64_byte_hash_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i64_byte_hash_map, that.i64_byte_hash_map))
        return false;
    }

    boolean this_present_double_byte_hash_map = true && this.isSetDouble_byte_hash_map();
    boolean that_present_double_byte_hash_map = true && that.isSetDouble_byte_hash_map();
    if (this_present_double_byte_hash_map || that_present_double_byte_hash_map) {
      if (!(this_present_double_byte_hash_map && that_present_double_byte_hash_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.double_byte_hash_map, that.double_byte_hash_map))
        return false;
    }

    boolean this_present_string_byte_hash_map = true && this.isSetString_byte_hash_map();
    boolean that_present_string_byte_hash_map = true && that.isSetString_byte_hash_map();
    if (this_present_string_byte_hash_map || that_present_string_byte_hash_map) {
      if (!(this_present_string_byte_hash_map && that_present_string_byte_hash_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.string_byte_hash_map, that.string_byte_hash_map))
        return false;
    }

    boolean this_present_binary_byte_hash_map = true && this.isSetBinary_byte_hash_map();
    boolean that_present_binary_byte_hash_map = true && that.isSetBinary_byte_hash_map();
    if (this_present_binary_byte_hash_map || that_present_binary_byte_hash_map) {
      if (!(this_present_binary_byte_hash_map && that_present_binary_byte_hash_map))
        return false;
      if (!TBaseHelper.equalsSlow(this.binary_byte_hash_map, that.binary_byte_hash_map))
        return false;
    }

    boolean this_present_boolean_byte_hash_map = true && this.isSetBoolean_byte_hash_map();
    boolean that_present_boolean_byte_hash_map = true && that.isSetBoolean_byte_hash_map();
    if (this_present_boolean_byte_hash_map || that_present_boolean_byte_hash_map) {
      if (!(this_present_boolean_byte_hash_map && that_present_boolean_byte_hash_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.boolean_byte_hash_map, that.boolean_byte_hash_map))
        return false;
    }

    boolean this_present_byte_i16_map = true && this.isSetByte_i16_map();
    boolean that_present_byte_i16_map = true && that.isSetByte_i16_map();
    if (this_present_byte_i16_map || that_present_byte_i16_map) {
      if (!(this_present_byte_i16_map && that_present_byte_i16_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_i16_map, that.byte_i16_map))
        return false;
    }

    boolean this_present_byte_i32_map = true && this.isSetByte_i32_map();
    boolean that_present_byte_i32_map = true && that.isSetByte_i32_map();
    if (this_present_byte_i32_map || that_present_byte_i32_map) {
      if (!(this_present_byte_i32_map && that_present_byte_i32_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_i32_map, that.byte_i32_map))
        return false;
    }

    boolean this_present_byte_i64_map = true && this.isSetByte_i64_map();
    boolean that_present_byte_i64_map = true && that.isSetByte_i64_map();
    if (this_present_byte_i64_map || that_present_byte_i64_map) {
      if (!(this_present_byte_i64_map && that_present_byte_i64_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_i64_map, that.byte_i64_map))
        return false;
    }

    boolean this_present_byte_double_map = true && this.isSetByte_double_map();
    boolean that_present_byte_double_map = true && that.isSetByte_double_map();
    if (this_present_byte_double_map || that_present_byte_double_map) {
      if (!(this_present_byte_double_map && that_present_byte_double_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_double_map, that.byte_double_map))
        return false;
    }

    boolean this_present_byte_string_map = true && this.isSetByte_string_map();
    boolean that_present_byte_string_map = true && that.isSetByte_string_map();
    if (this_present_byte_string_map || that_present_byte_string_map) {
      if (!(this_present_byte_string_map && that_present_byte_string_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_string_map, that.byte_string_map))
        return false;
    }

    boolean this_present_byte_binary_map = true && this.isSetByte_binary_map();
    boolean that_present_byte_binary_map = true && that.isSetByte_binary_map();
    if (this_present_byte_binary_map || that_present_byte_binary_map) {
      if (!(this_present_byte_binary_map && that_present_byte_binary_map))
        return false;
      if (!TBaseHelper.equalsSlow(this.byte_binary_map, that.byte_binary_map))
        return false;
    }

    boolean this_present_byte_boolean_map = true && this.isSetByte_boolean_map();
    boolean that_present_byte_boolean_map = true && that.isSetByte_boolean_map();
    if (this_present_byte_boolean_map || that_present_byte_boolean_map) {
      if (!(this_present_byte_boolean_map && that_present_byte_boolean_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_boolean_map, that.byte_boolean_map))
        return false;
    }

    boolean this_present_list_byte_map = true && this.isSetList_byte_map();
    boolean that_present_list_byte_map = true && that.isSetList_byte_map();
    if (this_present_list_byte_map || that_present_list_byte_map) {
      if (!(this_present_list_byte_map && that_present_list_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.list_byte_map, that.list_byte_map))
        return false;
    }

    boolean this_present_set_byte_map = true && this.isSetSet_byte_map();
    boolean that_present_set_byte_map = true && that.isSetSet_byte_map();
    if (this_present_set_byte_map || that_present_set_byte_map) {
      if (!(this_present_set_byte_map && that_present_set_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.set_byte_map, that.set_byte_map))
        return false;
    }

    boolean this_present_map_byte_map = true && this.isSetMap_byte_map();
    boolean that_present_map_byte_map = true && that.isSetMap_byte_map();
    if (this_present_map_byte_map || that_present_map_byte_map) {
      if (!(this_present_map_byte_map && that_present_map_byte_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.map_byte_map, that.map_byte_map))
        return false;
    }

    boolean this_present_byte_map_map = true && this.isSetByte_map_map();
    boolean that_present_byte_map_map = true && that.isSetByte_map_map();
    if (this_present_byte_map_map || that_present_byte_map_map) {
      if (!(this_present_byte_map_map && that_present_byte_map_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_map_map, that.byte_map_map))
        return false;
    }

    boolean this_present_byte_set_map = true && this.isSetByte_set_map();
    boolean that_present_byte_set_map = true && that.isSetByte_set_map();
    if (this_present_byte_set_map || that_present_byte_set_map) {
      if (!(this_present_byte_set_map && that_present_byte_set_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_set_map, that.byte_set_map))
        return false;
    }

    boolean this_present_byte_list_map = true && this.isSetByte_list_map();
    boolean that_present_byte_list_map = true && that.isSetByte_list_map();
    if (this_present_byte_list_map || that_present_byte_list_map) {
      if (!(this_present_byte_list_map && that_present_byte_list_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.byte_list_map, that.byte_list_map))
        return false;
    }

    boolean this_present_float_list = true && this.isSetFloat_list();
    boolean that_present_float_list = true && that.isSetFloat_list();
    if (this_present_float_list || that_present_float_list) {
      if (!(this_present_float_list && that_present_float_list))
        return false;
      if (!TBaseHelper.equalsNobinary(this.float_list, that.float_list))
        return false;
    }

    boolean this_present_i16_float_map = true && this.isSetI16_float_map();
    boolean that_present_i16_float_map = true && that.isSetI16_float_map();
    if (this_present_i16_float_map || that_present_i16_float_map) {
      if (!(this_present_i16_float_map && that_present_i16_float_map))
        return false;
      if (!TBaseHelper.equalsNobinary(this.i16_float_map, that.i16_float_map))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CompactProtoTestStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA_byte()).compareTo(other.isSetA_byte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a_byte, other.a_byte);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetA_i16()).compareTo(other.isSetA_i16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a_i16, other.a_i16);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetA_i32()).compareTo(other.isSetA_i32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a_i32, other.a_i32);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetA_i64()).compareTo(other.isSetA_i64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a_i64, other.a_i64);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetA_double()).compareTo(other.isSetA_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a_double, other.a_double);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetA_string()).compareTo(other.isSetA_string());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a_string, other.a_string);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetA_binary()).compareTo(other.isSetA_binary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a_binary, other.a_binary);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetTrue_field()).compareTo(other.isSetTrue_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(true_field, other.true_field);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFalse_field()).compareTo(other.isSetFalse_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(false_field, other.false_field);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetEmpty_struct_field()).compareTo(other.isSetEmpty_struct_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(empty_struct_field, other.empty_struct_field);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_list()).compareTo(other.isSetByte_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_list, other.byte_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI16_list()).compareTo(other.isSetI16_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i16_list, other.i16_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI32_list()).compareTo(other.isSetI32_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i32_list, other.i32_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI64_list()).compareTo(other.isSetI64_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i64_list, other.i64_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDouble_list()).compareTo(other.isSetDouble_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(double_list, other.double_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_list()).compareTo(other.isSetString_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_list, other.string_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBinary_list()).compareTo(other.isSetBinary_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(binary_list, other.binary_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBoolean_list()).compareTo(other.isSetBoolean_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(boolean_list, other.boolean_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStruct_list()).compareTo(other.isSetStruct_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(struct_list, other.struct_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_set()).compareTo(other.isSetByte_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_set, other.byte_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI16_set()).compareTo(other.isSetI16_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i16_set, other.i16_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI32_set()).compareTo(other.isSetI32_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i32_set, other.i32_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI64_set()).compareTo(other.isSetI64_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i64_set, other.i64_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDouble_set()).compareTo(other.isSetDouble_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(double_set, other.double_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_set()).compareTo(other.isSetString_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_set, other.string_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBinary_set()).compareTo(other.isSetBinary_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(binary_set, other.binary_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBoolean_set()).compareTo(other.isSetBoolean_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(boolean_set, other.boolean_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetStruct_set()).compareTo(other.isSetStruct_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(struct_set, other.struct_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_hash_set()).compareTo(other.isSetByte_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_hash_set, other.byte_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI16_hash_set()).compareTo(other.isSetI16_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i16_hash_set, other.i16_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI32_hash_set()).compareTo(other.isSetI32_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i32_hash_set, other.i32_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI64_hash_set()).compareTo(other.isSetI64_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i64_hash_set, other.i64_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDouble_hash_set()).compareTo(other.isSetDouble_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(double_hash_set, other.double_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_hash_set()).compareTo(other.isSetString_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_hash_set, other.string_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBinary_hash_set()).compareTo(other.isSetBinary_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(binary_hash_set, other.binary_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBoolean_hash_set()).compareTo(other.isSetBoolean_hash_set());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(boolean_hash_set, other.boolean_hash_set);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_byte_map()).compareTo(other.isSetByte_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_byte_map, other.byte_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI16_byte_map()).compareTo(other.isSetI16_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i16_byte_map, other.i16_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI32_byte_map()).compareTo(other.isSetI32_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i32_byte_map, other.i32_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI64_byte_map()).compareTo(other.isSetI64_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i64_byte_map, other.i64_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDouble_byte_map()).compareTo(other.isSetDouble_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(double_byte_map, other.double_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_byte_map()).compareTo(other.isSetString_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_byte_map, other.string_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBinary_byte_map()).compareTo(other.isSetBinary_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(binary_byte_map, other.binary_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBoolean_byte_map()).compareTo(other.isSetBoolean_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(boolean_byte_map, other.boolean_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_byte_hash_map()).compareTo(other.isSetByte_byte_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_byte_hash_map, other.byte_byte_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI16_byte_hash_map()).compareTo(other.isSetI16_byte_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i16_byte_hash_map, other.i16_byte_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI32_byte_hash_map()).compareTo(other.isSetI32_byte_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i32_byte_hash_map, other.i32_byte_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI64_byte_hash_map()).compareTo(other.isSetI64_byte_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i64_byte_hash_map, other.i64_byte_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetDouble_byte_hash_map()).compareTo(other.isSetDouble_byte_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(double_byte_hash_map, other.double_byte_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetString_byte_hash_map()).compareTo(other.isSetString_byte_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(string_byte_hash_map, other.string_byte_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBinary_byte_hash_map()).compareTo(other.isSetBinary_byte_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(binary_byte_hash_map, other.binary_byte_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetBoolean_byte_hash_map()).compareTo(other.isSetBoolean_byte_hash_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(boolean_byte_hash_map, other.boolean_byte_hash_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_i16_map()).compareTo(other.isSetByte_i16_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_i16_map, other.byte_i16_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_i32_map()).compareTo(other.isSetByte_i32_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_i32_map, other.byte_i32_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_i64_map()).compareTo(other.isSetByte_i64_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_i64_map, other.byte_i64_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_double_map()).compareTo(other.isSetByte_double_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_double_map, other.byte_double_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_string_map()).compareTo(other.isSetByte_string_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_string_map, other.byte_string_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_binary_map()).compareTo(other.isSetByte_binary_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_binary_map, other.byte_binary_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_boolean_map()).compareTo(other.isSetByte_boolean_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_boolean_map, other.byte_boolean_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetList_byte_map()).compareTo(other.isSetList_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(list_byte_map, other.list_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSet_byte_map()).compareTo(other.isSetSet_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(set_byte_map, other.set_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetMap_byte_map()).compareTo(other.isSetMap_byte_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(map_byte_map, other.map_byte_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_map_map()).compareTo(other.isSetByte_map_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_map_map, other.byte_map_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_set_map()).compareTo(other.isSetByte_set_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_set_map, other.byte_set_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetByte_list_map()).compareTo(other.isSetByte_list_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(byte_list_map, other.byte_list_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetFloat_list()).compareTo(other.isSetFloat_list());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(float_list, other.float_list);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetI16_float_map()).compareTo(other.isSetI16_float_map());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(i16_float_map, other.i16_float_map);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case A_BYTE:
          if (field.type == TType.BYTE) {
            this.a_byte = iprot.readByte();
            setA_byteIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A_I16:
          if (field.type == TType.I16) {
            this.a_i16 = iprot.readI16();
            setA_i16IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A_I32:
          if (field.type == TType.I32) {
            this.a_i32 = iprot.readI32();
            setA_i32IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A_I64:
          if (field.type == TType.I64) {
            this.a_i64 = iprot.readI64();
            setA_i64IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A_DOUBLE:
          if (field.type == TType.DOUBLE) {
            this.a_double = iprot.readDouble();
            setA_doubleIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A_STRING:
          if (field.type == TType.STRING) {
            this.a_string = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case A_BINARY:
          if (field.type == TType.STRING) {
            this.a_binary = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TRUE_FIELD:
          if (field.type == TType.BOOL) {
            this.true_field = iprot.readBool();
            setTrue_fieldIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FALSE_FIELD:
          if (field.type == TType.BOOL) {
            this.false_field = iprot.readBool();
            setFalse_fieldIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EMPTY_STRUCT_FIELD:
          if (field.type == TType.STRUCT) {
            this.empty_struct_field = new Empty();
            this.empty_struct_field.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list181 = iprot.readListBegin();
              this.byte_list = new ArrayList<Byte>(Math.max(0, _list181.size));
              for (int _i182 = 0; 
                   (_list181.size < 0) ? iprot.peekList() : (_i182 < _list181.size); 
                   ++_i182)
              {
                byte _elem183;
                _elem183 = iprot.readByte();
                this.byte_list.add(_elem183);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I16_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list184 = iprot.readListBegin();
              this.i16_list = new ArrayList<Short>(Math.max(0, _list184.size));
              for (int _i185 = 0; 
                   (_list184.size < 0) ? iprot.peekList() : (_i185 < _list184.size); 
                   ++_i185)
              {
                short _elem186;
                _elem186 = iprot.readI16();
                this.i16_list.add(_elem186);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I32_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list187 = iprot.readListBegin();
              this.i32_list = new ArrayList<Integer>(Math.max(0, _list187.size));
              for (int _i188 = 0; 
                   (_list187.size < 0) ? iprot.peekList() : (_i188 < _list187.size); 
                   ++_i188)
              {
                int _elem189;
                _elem189 = iprot.readI32();
                this.i32_list.add(_elem189);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I64_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list190 = iprot.readListBegin();
              this.i64_list = new ArrayList<Long>(Math.max(0, _list190.size));
              for (int _i191 = 0; 
                   (_list190.size < 0) ? iprot.peekList() : (_i191 < _list190.size); 
                   ++_i191)
              {
                long _elem192;
                _elem192 = iprot.readI64();
                this.i64_list.add(_elem192);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOUBLE_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list193 = iprot.readListBegin();
              this.double_list = new ArrayList<Double>(Math.max(0, _list193.size));
              for (int _i194 = 0; 
                   (_list193.size < 0) ? iprot.peekList() : (_i194 < _list193.size); 
                   ++_i194)
              {
                double _elem195;
                _elem195 = iprot.readDouble();
                this.double_list.add(_elem195);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list196 = iprot.readListBegin();
              this.string_list = new ArrayList<String>(Math.max(0, _list196.size));
              for (int _i197 = 0; 
                   (_list196.size < 0) ? iprot.peekList() : (_i197 < _list196.size); 
                   ++_i197)
              {
                String _elem198;
                _elem198 = iprot.readString();
                this.string_list.add(_elem198);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BINARY_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list199 = iprot.readListBegin();
              this.binary_list = new ArrayList<byte[]>(Math.max(0, _list199.size));
              for (int _i200 = 0; 
                   (_list199.size < 0) ? iprot.peekList() : (_i200 < _list199.size); 
                   ++_i200)
              {
                byte[] _elem201;
                _elem201 = iprot.readBinary();
                this.binary_list.add(_elem201);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BOOLEAN_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list202 = iprot.readListBegin();
              this.boolean_list = new ArrayList<Boolean>(Math.max(0, _list202.size));
              for (int _i203 = 0; 
                   (_list202.size < 0) ? iprot.peekList() : (_i203 < _list202.size); 
                   ++_i203)
              {
                boolean _elem204;
                _elem204 = iprot.readBool();
                this.boolean_list.add(_elem204);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRUCT_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list205 = iprot.readListBegin();
              this.struct_list = new ArrayList<Empty>(Math.max(0, _list205.size));
              for (int _i206 = 0; 
                   (_list205.size < 0) ? iprot.peekList() : (_i206 < _list205.size); 
                   ++_i206)
              {
                Empty _elem207;
                _elem207 = new Empty();
                _elem207.read(iprot);
                this.struct_list.add(_elem207);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_SET:
          if (field.type == TType.SET) {
            {
              TSet _set208 = iprot.readSetBegin();
              this.byte_set = new HashSet<Byte>(Math.max(0, 2*_set208.size));
              for (int _i209 = 0; 
                   (_set208.size < 0) ? iprot.peekSet() : (_i209 < _set208.size); 
                   ++_i209)
              {
                byte _elem210;
                _elem210 = iprot.readByte();
                this.byte_set.add(_elem210);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I16_SET:
          if (field.type == TType.SET) {
            {
              TSet _set211 = iprot.readSetBegin();
              this.i16_set = new HashSet<Short>(Math.max(0, 2*_set211.size));
              for (int _i212 = 0; 
                   (_set211.size < 0) ? iprot.peekSet() : (_i212 < _set211.size); 
                   ++_i212)
              {
                short _elem213;
                _elem213 = iprot.readI16();
                this.i16_set.add(_elem213);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I32_SET:
          if (field.type == TType.SET) {
            {
              TSet _set214 = iprot.readSetBegin();
              this.i32_set = new HashSet<Integer>(Math.max(0, 2*_set214.size));
              for (int _i215 = 0; 
                   (_set214.size < 0) ? iprot.peekSet() : (_i215 < _set214.size); 
                   ++_i215)
              {
                int _elem216;
                _elem216 = iprot.readI32();
                this.i32_set.add(_elem216);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I64_SET:
          if (field.type == TType.SET) {
            {
              TSet _set217 = iprot.readSetBegin();
              this.i64_set = new HashSet<Long>(Math.max(0, 2*_set217.size));
              for (int _i218 = 0; 
                   (_set217.size < 0) ? iprot.peekSet() : (_i218 < _set217.size); 
                   ++_i218)
              {
                long _elem219;
                _elem219 = iprot.readI64();
                this.i64_set.add(_elem219);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOUBLE_SET:
          if (field.type == TType.SET) {
            {
              TSet _set220 = iprot.readSetBegin();
              this.double_set = new HashSet<Double>(Math.max(0, 2*_set220.size));
              for (int _i221 = 0; 
                   (_set220.size < 0) ? iprot.peekSet() : (_i221 < _set220.size); 
                   ++_i221)
              {
                double _elem222;
                _elem222 = iprot.readDouble();
                this.double_set.add(_elem222);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_SET:
          if (field.type == TType.SET) {
            {
              TSet _set223 = iprot.readSetBegin();
              this.string_set = new HashSet<String>(Math.max(0, 2*_set223.size));
              for (int _i224 = 0; 
                   (_set223.size < 0) ? iprot.peekSet() : (_i224 < _set223.size); 
                   ++_i224)
              {
                String _elem225;
                _elem225 = iprot.readString();
                this.string_set.add(_elem225);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BINARY_SET:
          if (field.type == TType.SET) {
            {
              TSet _set226 = iprot.readSetBegin();
              this.binary_set = new HashSet<byte[]>(Math.max(0, 2*_set226.size));
              for (int _i227 = 0; 
                   (_set226.size < 0) ? iprot.peekSet() : (_i227 < _set226.size); 
                   ++_i227)
              {
                byte[] _elem228;
                _elem228 = iprot.readBinary();
                this.binary_set.add(_elem228);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BOOLEAN_SET:
          if (field.type == TType.SET) {
            {
              TSet _set229 = iprot.readSetBegin();
              this.boolean_set = new HashSet<Boolean>(Math.max(0, 2*_set229.size));
              for (int _i230 = 0; 
                   (_set229.size < 0) ? iprot.peekSet() : (_i230 < _set229.size); 
                   ++_i230)
              {
                boolean _elem231;
                _elem231 = iprot.readBool();
                this.boolean_set.add(_elem231);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRUCT_SET:
          if (field.type == TType.SET) {
            {
              TSet _set232 = iprot.readSetBegin();
              this.struct_set = new HashSet<Empty>(Math.max(0, 2*_set232.size));
              for (int _i233 = 0; 
                   (_set232.size < 0) ? iprot.peekSet() : (_i233 < _set232.size); 
                   ++_i233)
              {
                Empty _elem234;
                _elem234 = new Empty();
                _elem234.read(iprot);
                this.struct_set.add(_elem234);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set235 = iprot.readSetBegin();
              this.byte_hash_set = new HashSet<Byte>(Math.max(0, 2*_set235.size));
              for (int _i236 = 0; 
                   (_set235.size < 0) ? iprot.peekSet() : (_i236 < _set235.size); 
                   ++_i236)
              {
                byte _elem237;
                _elem237 = iprot.readByte();
                this.byte_hash_set.add(_elem237);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I16_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set238 = iprot.readSetBegin();
              this.i16_hash_set = new HashSet<Short>(Math.max(0, 2*_set238.size));
              for (int _i239 = 0; 
                   (_set238.size < 0) ? iprot.peekSet() : (_i239 < _set238.size); 
                   ++_i239)
              {
                short _elem240;
                _elem240 = iprot.readI16();
                this.i16_hash_set.add(_elem240);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I32_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set241 = iprot.readSetBegin();
              this.i32_hash_set = new HashSet<Integer>(Math.max(0, 2*_set241.size));
              for (int _i242 = 0; 
                   (_set241.size < 0) ? iprot.peekSet() : (_i242 < _set241.size); 
                   ++_i242)
              {
                int _elem243;
                _elem243 = iprot.readI32();
                this.i32_hash_set.add(_elem243);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I64_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set244 = iprot.readSetBegin();
              this.i64_hash_set = new HashSet<Long>(Math.max(0, 2*_set244.size));
              for (int _i245 = 0; 
                   (_set244.size < 0) ? iprot.peekSet() : (_i245 < _set244.size); 
                   ++_i245)
              {
                long _elem246;
                _elem246 = iprot.readI64();
                this.i64_hash_set.add(_elem246);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOUBLE_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set247 = iprot.readSetBegin();
              this.double_hash_set = new HashSet<Double>(Math.max(0, 2*_set247.size));
              for (int _i248 = 0; 
                   (_set247.size < 0) ? iprot.peekSet() : (_i248 < _set247.size); 
                   ++_i248)
              {
                double _elem249;
                _elem249 = iprot.readDouble();
                this.double_hash_set.add(_elem249);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set250 = iprot.readSetBegin();
              this.string_hash_set = new HashSet<String>(Math.max(0, 2*_set250.size));
              for (int _i251 = 0; 
                   (_set250.size < 0) ? iprot.peekSet() : (_i251 < _set250.size); 
                   ++_i251)
              {
                String _elem252;
                _elem252 = iprot.readString();
                this.string_hash_set.add(_elem252);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BINARY_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set253 = iprot.readSetBegin();
              this.binary_hash_set = new HashSet<byte[]>(Math.max(0, 2*_set253.size));
              for (int _i254 = 0; 
                   (_set253.size < 0) ? iprot.peekSet() : (_i254 < _set253.size); 
                   ++_i254)
              {
                byte[] _elem255;
                _elem255 = iprot.readBinary();
                this.binary_hash_set.add(_elem255);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BOOLEAN_HASH_SET:
          if (field.type == TType.SET) {
            {
              TSet _set256 = iprot.readSetBegin();
              this.boolean_hash_set = new HashSet<Boolean>(Math.max(0, 2*_set256.size));
              for (int _i257 = 0; 
                   (_set256.size < 0) ? iprot.peekSet() : (_i257 < _set256.size); 
                   ++_i257)
              {
                boolean _elem258;
                _elem258 = iprot.readBool();
                this.boolean_hash_set.add(_elem258);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map259 = iprot.readMapBegin();
              this.byte_byte_map = new HashMap<Byte,Byte>(Math.max(0, 2*_map259.size));
              for (int _i260 = 0; 
                   (_map259.size < 0) ? iprot.peekMap() : (_i260 < _map259.size); 
                   ++_i260)
              {
                byte _key261;
                byte _val262;
                _key261 = iprot.readByte();
                _val262 = iprot.readByte();
                this.byte_byte_map.put(_key261, _val262);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I16_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map263 = iprot.readMapBegin();
              this.i16_byte_map = new HashMap<Short,Byte>(Math.max(0, 2*_map263.size));
              for (int _i264 = 0; 
                   (_map263.size < 0) ? iprot.peekMap() : (_i264 < _map263.size); 
                   ++_i264)
              {
                short _key265;
                byte _val266;
                _key265 = iprot.readI16();
                _val266 = iprot.readByte();
                this.i16_byte_map.put(_key265, _val266);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I32_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map267 = iprot.readMapBegin();
              this.i32_byte_map = new HashMap<Integer,Byte>(Math.max(0, 2*_map267.size));
              for (int _i268 = 0; 
                   (_map267.size < 0) ? iprot.peekMap() : (_i268 < _map267.size); 
                   ++_i268)
              {
                int _key269;
                byte _val270;
                _key269 = iprot.readI32();
                _val270 = iprot.readByte();
                this.i32_byte_map.put(_key269, _val270);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I64_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map271 = iprot.readMapBegin();
              this.i64_byte_map = new HashMap<Long,Byte>(Math.max(0, 2*_map271.size));
              for (int _i272 = 0; 
                   (_map271.size < 0) ? iprot.peekMap() : (_i272 < _map271.size); 
                   ++_i272)
              {
                long _key273;
                byte _val274;
                _key273 = iprot.readI64();
                _val274 = iprot.readByte();
                this.i64_byte_map.put(_key273, _val274);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOUBLE_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map275 = iprot.readMapBegin();
              this.double_byte_map = new HashMap<Double,Byte>(Math.max(0, 2*_map275.size));
              for (int _i276 = 0; 
                   (_map275.size < 0) ? iprot.peekMap() : (_i276 < _map275.size); 
                   ++_i276)
              {
                double _key277;
                byte _val278;
                _key277 = iprot.readDouble();
                _val278 = iprot.readByte();
                this.double_byte_map.put(_key277, _val278);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map279 = iprot.readMapBegin();
              this.string_byte_map = new HashMap<String,Byte>(Math.max(0, 2*_map279.size));
              for (int _i280 = 0; 
                   (_map279.size < 0) ? iprot.peekMap() : (_i280 < _map279.size); 
                   ++_i280)
              {
                String _key281;
                byte _val282;
                _key281 = iprot.readString();
                _val282 = iprot.readByte();
                this.string_byte_map.put(_key281, _val282);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BINARY_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map283 = iprot.readMapBegin();
              this.binary_byte_map = new HashMap<byte[],Byte>(Math.max(0, 2*_map283.size));
              for (int _i284 = 0; 
                   (_map283.size < 0) ? iprot.peekMap() : (_i284 < _map283.size); 
                   ++_i284)
              {
                byte[] _key285;
                byte _val286;
                _key285 = iprot.readBinary();
                _val286 = iprot.readByte();
                this.binary_byte_map.put(_key285, _val286);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BOOLEAN_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map287 = iprot.readMapBegin();
              this.boolean_byte_map = new HashMap<Boolean,Byte>(Math.max(0, 2*_map287.size));
              for (int _i288 = 0; 
                   (_map287.size < 0) ? iprot.peekMap() : (_i288 < _map287.size); 
                   ++_i288)
              {
                boolean _key289;
                byte _val290;
                _key289 = iprot.readBool();
                _val290 = iprot.readByte();
                this.boolean_byte_map.put(_key289, _val290);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_BYTE_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map291 = iprot.readMapBegin();
              this.byte_byte_hash_map = new HashMap<Byte,Byte>(Math.max(0, 2*_map291.size));
              for (int _i292 = 0; 
                   (_map291.size < 0) ? iprot.peekMap() : (_i292 < _map291.size); 
                   ++_i292)
              {
                byte _key293;
                byte _val294;
                _key293 = iprot.readByte();
                _val294 = iprot.readByte();
                this.byte_byte_hash_map.put(_key293, _val294);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I16_BYTE_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map295 = iprot.readMapBegin();
              this.i16_byte_hash_map = new HashMap<Short,Byte>(Math.max(0, 2*_map295.size));
              for (int _i296 = 0; 
                   (_map295.size < 0) ? iprot.peekMap() : (_i296 < _map295.size); 
                   ++_i296)
              {
                short _key297;
                byte _val298;
                _key297 = iprot.readI16();
                _val298 = iprot.readByte();
                this.i16_byte_hash_map.put(_key297, _val298);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I32_BYTE_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map299 = iprot.readMapBegin();
              this.i32_byte_hash_map = new HashMap<Integer,Byte>(Math.max(0, 2*_map299.size));
              for (int _i300 = 0; 
                   (_map299.size < 0) ? iprot.peekMap() : (_i300 < _map299.size); 
                   ++_i300)
              {
                int _key301;
                byte _val302;
                _key301 = iprot.readI32();
                _val302 = iprot.readByte();
                this.i32_byte_hash_map.put(_key301, _val302);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I64_BYTE_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map303 = iprot.readMapBegin();
              this.i64_byte_hash_map = new HashMap<Long,Byte>(Math.max(0, 2*_map303.size));
              for (int _i304 = 0; 
                   (_map303.size < 0) ? iprot.peekMap() : (_i304 < _map303.size); 
                   ++_i304)
              {
                long _key305;
                byte _val306;
                _key305 = iprot.readI64();
                _val306 = iprot.readByte();
                this.i64_byte_hash_map.put(_key305, _val306);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOUBLE_BYTE_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map307 = iprot.readMapBegin();
              this.double_byte_hash_map = new HashMap<Double,Byte>(Math.max(0, 2*_map307.size));
              for (int _i308 = 0; 
                   (_map307.size < 0) ? iprot.peekMap() : (_i308 < _map307.size); 
                   ++_i308)
              {
                double _key309;
                byte _val310;
                _key309 = iprot.readDouble();
                _val310 = iprot.readByte();
                this.double_byte_hash_map.put(_key309, _val310);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRING_BYTE_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map311 = iprot.readMapBegin();
              this.string_byte_hash_map = new HashMap<String,Byte>(Math.max(0, 2*_map311.size));
              for (int _i312 = 0; 
                   (_map311.size < 0) ? iprot.peekMap() : (_i312 < _map311.size); 
                   ++_i312)
              {
                String _key313;
                byte _val314;
                _key313 = iprot.readString();
                _val314 = iprot.readByte();
                this.string_byte_hash_map.put(_key313, _val314);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BINARY_BYTE_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map315 = iprot.readMapBegin();
              this.binary_byte_hash_map = new HashMap<byte[],Byte>(Math.max(0, 2*_map315.size));
              for (int _i316 = 0; 
                   (_map315.size < 0) ? iprot.peekMap() : (_i316 < _map315.size); 
                   ++_i316)
              {
                byte[] _key317;
                byte _val318;
                _key317 = iprot.readBinary();
                _val318 = iprot.readByte();
                this.binary_byte_hash_map.put(_key317, _val318);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BOOLEAN_BYTE_HASH_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map319 = iprot.readMapBegin();
              this.boolean_byte_hash_map = new HashMap<Boolean,Byte>(Math.max(0, 2*_map319.size));
              for (int _i320 = 0; 
                   (_map319.size < 0) ? iprot.peekMap() : (_i320 < _map319.size); 
                   ++_i320)
              {
                boolean _key321;
                byte _val322;
                _key321 = iprot.readBool();
                _val322 = iprot.readByte();
                this.boolean_byte_hash_map.put(_key321, _val322);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_I16_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map323 = iprot.readMapBegin();
              this.byte_i16_map = new HashMap<Byte,Short>(Math.max(0, 2*_map323.size));
              for (int _i324 = 0; 
                   (_map323.size < 0) ? iprot.peekMap() : (_i324 < _map323.size); 
                   ++_i324)
              {
                byte _key325;
                short _val326;
                _key325 = iprot.readByte();
                _val326 = iprot.readI16();
                this.byte_i16_map.put(_key325, _val326);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_I32_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map327 = iprot.readMapBegin();
              this.byte_i32_map = new HashMap<Byte,Integer>(Math.max(0, 2*_map327.size));
              for (int _i328 = 0; 
                   (_map327.size < 0) ? iprot.peekMap() : (_i328 < _map327.size); 
                   ++_i328)
              {
                byte _key329;
                int _val330;
                _key329 = iprot.readByte();
                _val330 = iprot.readI32();
                this.byte_i32_map.put(_key329, _val330);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_I64_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map331 = iprot.readMapBegin();
              this.byte_i64_map = new HashMap<Byte,Long>(Math.max(0, 2*_map331.size));
              for (int _i332 = 0; 
                   (_map331.size < 0) ? iprot.peekMap() : (_i332 < _map331.size); 
                   ++_i332)
              {
                byte _key333;
                long _val334;
                _key333 = iprot.readByte();
                _val334 = iprot.readI64();
                this.byte_i64_map.put(_key333, _val334);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_DOUBLE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map335 = iprot.readMapBegin();
              this.byte_double_map = new HashMap<Byte,Double>(Math.max(0, 2*_map335.size));
              for (int _i336 = 0; 
                   (_map335.size < 0) ? iprot.peekMap() : (_i336 < _map335.size); 
                   ++_i336)
              {
                byte _key337;
                double _val338;
                _key337 = iprot.readByte();
                _val338 = iprot.readDouble();
                this.byte_double_map.put(_key337, _val338);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_STRING_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map339 = iprot.readMapBegin();
              this.byte_string_map = new HashMap<Byte,String>(Math.max(0, 2*_map339.size));
              for (int _i340 = 0; 
                   (_map339.size < 0) ? iprot.peekMap() : (_i340 < _map339.size); 
                   ++_i340)
              {
                byte _key341;
                String _val342;
                _key341 = iprot.readByte();
                _val342 = iprot.readString();
                this.byte_string_map.put(_key341, _val342);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_BINARY_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map343 = iprot.readMapBegin();
              this.byte_binary_map = new HashMap<Byte,byte[]>(Math.max(0, 2*_map343.size));
              for (int _i344 = 0; 
                   (_map343.size < 0) ? iprot.peekMap() : (_i344 < _map343.size); 
                   ++_i344)
              {
                byte _key345;
                byte[] _val346;
                _key345 = iprot.readByte();
                _val346 = iprot.readBinary();
                this.byte_binary_map.put(_key345, _val346);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_BOOLEAN_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map347 = iprot.readMapBegin();
              this.byte_boolean_map = new HashMap<Byte,Boolean>(Math.max(0, 2*_map347.size));
              for (int _i348 = 0; 
                   (_map347.size < 0) ? iprot.peekMap() : (_i348 < _map347.size); 
                   ++_i348)
              {
                byte _key349;
                boolean _val350;
                _key349 = iprot.readByte();
                _val350 = iprot.readBool();
                this.byte_boolean_map.put(_key349, _val350);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIST_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map351 = iprot.readMapBegin();
              this.list_byte_map = new HashMap<List<Byte>,Byte>(Math.max(0, 2*_map351.size));
              for (int _i352 = 0; 
                   (_map351.size < 0) ? iprot.peekMap() : (_i352 < _map351.size); 
                   ++_i352)
              {
                List<Byte> _key353;
                byte _val354;
                {
                  TList _list355 = iprot.readListBegin();
                  _key353 = new ArrayList<Byte>(Math.max(0, _list355.size));
                  for (int _i356 = 0; 
                       (_list355.size < 0) ? iprot.peekList() : (_i356 < _list355.size); 
                       ++_i356)
                  {
                    byte _elem357;
                    _elem357 = iprot.readByte();
                    _key353.add(_elem357);
                  }
                  iprot.readListEnd();
                }
                _val354 = iprot.readByte();
                this.list_byte_map.put(_key353, _val354);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SET_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map358 = iprot.readMapBegin();
              this.set_byte_map = new HashMap<Set<Byte>,Byte>(Math.max(0, 2*_map358.size));
              for (int _i359 = 0; 
                   (_map358.size < 0) ? iprot.peekMap() : (_i359 < _map358.size); 
                   ++_i359)
              {
                Set<Byte> _key360;
                byte _val361;
                {
                  TSet _set362 = iprot.readSetBegin();
                  _key360 = new HashSet<Byte>(Math.max(0, 2*_set362.size));
                  for (int _i363 = 0; 
                       (_set362.size < 0) ? iprot.peekSet() : (_i363 < _set362.size); 
                       ++_i363)
                  {
                    byte _elem364;
                    _elem364 = iprot.readByte();
                    _key360.add(_elem364);
                  }
                  iprot.readSetEnd();
                }
                _val361 = iprot.readByte();
                this.set_byte_map.put(_key360, _val361);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAP_BYTE_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map365 = iprot.readMapBegin();
              this.map_byte_map = new HashMap<Map<Byte,Byte>,Byte>(Math.max(0, 2*_map365.size));
              for (int _i366 = 0; 
                   (_map365.size < 0) ? iprot.peekMap() : (_i366 < _map365.size); 
                   ++_i366)
              {
                Map<Byte,Byte> _key367;
                byte _val368;
                {
                  TMap _map369 = iprot.readMapBegin();
                  _key367 = new HashMap<Byte,Byte>(Math.max(0, 2*_map369.size));
                  for (int _i370 = 0; 
                       (_map369.size < 0) ? iprot.peekMap() : (_i370 < _map369.size); 
                       ++_i370)
                  {
                    byte _key371;
                    byte _val372;
                    _key371 = iprot.readByte();
                    _val372 = iprot.readByte();
                    _key367.put(_key371, _val372);
                  }
                  iprot.readMapEnd();
                }
                _val368 = iprot.readByte();
                this.map_byte_map.put(_key367, _val368);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_MAP_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map373 = iprot.readMapBegin();
              this.byte_map_map = new HashMap<Byte,Map<Byte,Byte>>(Math.max(0, 2*_map373.size));
              for (int _i374 = 0; 
                   (_map373.size < 0) ? iprot.peekMap() : (_i374 < _map373.size); 
                   ++_i374)
              {
                byte _key375;
                Map<Byte,Byte> _val376;
                _key375 = iprot.readByte();
                {
                  TMap _map377 = iprot.readMapBegin();
                  _val376 = new HashMap<Byte,Byte>(Math.max(0, 2*_map377.size));
                  for (int _i378 = 0; 
                       (_map377.size < 0) ? iprot.peekMap() : (_i378 < _map377.size); 
                       ++_i378)
                  {
                    byte _key379;
                    byte _val380;
                    _key379 = iprot.readByte();
                    _val380 = iprot.readByte();
                    _val376.put(_key379, _val380);
                  }
                  iprot.readMapEnd();
                }
                this.byte_map_map.put(_key375, _val376);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_SET_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map381 = iprot.readMapBegin();
              this.byte_set_map = new HashMap<Byte,Set<Byte>>(Math.max(0, 2*_map381.size));
              for (int _i382 = 0; 
                   (_map381.size < 0) ? iprot.peekMap() : (_i382 < _map381.size); 
                   ++_i382)
              {
                byte _key383;
                Set<Byte> _val384;
                _key383 = iprot.readByte();
                {
                  TSet _set385 = iprot.readSetBegin();
                  _val384 = new HashSet<Byte>(Math.max(0, 2*_set385.size));
                  for (int _i386 = 0; 
                       (_set385.size < 0) ? iprot.peekSet() : (_i386 < _set385.size); 
                       ++_i386)
                  {
                    byte _elem387;
                    _elem387 = iprot.readByte();
                    _val384.add(_elem387);
                  }
                  iprot.readSetEnd();
                }
                this.byte_set_map.put(_key383, _val384);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTE_LIST_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map388 = iprot.readMapBegin();
              this.byte_list_map = new HashMap<Byte,List<Byte>>(Math.max(0, 2*_map388.size));
              for (int _i389 = 0; 
                   (_map388.size < 0) ? iprot.peekMap() : (_i389 < _map388.size); 
                   ++_i389)
              {
                byte _key390;
                List<Byte> _val391;
                _key390 = iprot.readByte();
                {
                  TList _list392 = iprot.readListBegin();
                  _val391 = new ArrayList<Byte>(Math.max(0, _list392.size));
                  for (int _i393 = 0; 
                       (_list392.size < 0) ? iprot.peekList() : (_i393 < _list392.size); 
                       ++_i393)
                  {
                    byte _elem394;
                    _elem394 = iprot.readByte();
                    _val391.add(_elem394);
                  }
                  iprot.readListEnd();
                }
                this.byte_list_map.put(_key390, _val391);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FLOAT_LIST:
          if (field.type == TType.LIST) {
            {
              TList _list395 = iprot.readListBegin();
              this.float_list = new ArrayList<Float>(Math.max(0, _list395.size));
              for (int _i396 = 0; 
                   (_list395.size < 0) ? iprot.peekList() : (_i396 < _list395.size); 
                   ++_i396)
              {
                float _elem397;
                _elem397 = iprot.readFloat();
                this.float_list.add(_elem397);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case I16_FLOAT_MAP:
          if (field.type == TType.MAP) {
            {
              TMap _map398 = iprot.readMapBegin();
              this.i16_float_map = new HashMap<Short,Float>(Math.max(0, 2*_map398.size));
              for (int _i399 = 0; 
                   (_map398.size < 0) ? iprot.peekMap() : (_i399 < _map398.size); 
                   ++_i399)
              {
                short _key400;
                float _val401;
                _key400 = iprot.readI16();
                _val401 = iprot.readFloat();
                this.i16_float_map.put(_key400, _val401);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(A_BYTE_FIELD_DESC);
    oprot.writeByte(this.a_byte);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(A_I16_FIELD_DESC);
    oprot.writeI16(this.a_i16);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(A_I32_FIELD_DESC);
    oprot.writeI32(this.a_i32);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(A_I64_FIELD_DESC);
    oprot.writeI64(this.a_i64);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(A_DOUBLE_FIELD_DESC);
    oprot.writeDouble(this.a_double);
    oprot.writeFieldEnd();
    if (this.a_string != null) {
      oprot.writeFieldBegin(A_STRING_FIELD_DESC);
      oprot.writeString(this.a_string);
      oprot.writeFieldEnd();
    }
    if (this.a_binary != null) {
      oprot.writeFieldBegin(A_BINARY_FIELD_DESC);
      oprot.writeBinary(this.a_binary);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TRUE_FIELD_FIELD_DESC);
    oprot.writeBool(this.true_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FALSE_FIELD_FIELD_DESC);
    oprot.writeBool(this.false_field);
    oprot.writeFieldEnd();
    if (this.empty_struct_field != null) {
      oprot.writeFieldBegin(EMPTY_STRUCT_FIELD_FIELD_DESC);
      this.empty_struct_field.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.byte_list != null) {
      oprot.writeFieldBegin(BYTE_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.BYTE, this.byte_list.size()));
        for (byte _iter402 : this.byte_list)        {
          oprot.writeByte(_iter402);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i16_list != null) {
      oprot.writeFieldBegin(I16_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I16, this.i16_list.size()));
        for (short _iter403 : this.i16_list)        {
          oprot.writeI16(_iter403);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i32_list != null) {
      oprot.writeFieldBegin(I32_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.i32_list.size()));
        for (int _iter404 : this.i32_list)        {
          oprot.writeI32(_iter404);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i64_list != null) {
      oprot.writeFieldBegin(I64_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.i64_list.size()));
        for (long _iter405 : this.i64_list)        {
          oprot.writeI64(_iter405);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.double_list != null) {
      oprot.writeFieldBegin(DOUBLE_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.DOUBLE, this.double_list.size()));
        for (double _iter406 : this.double_list)        {
          oprot.writeDouble(_iter406);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_list != null) {
      oprot.writeFieldBegin(STRING_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.string_list.size()));
        for (String _iter407 : this.string_list)        {
          oprot.writeString(_iter407);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.binary_list != null) {
      oprot.writeFieldBegin(BINARY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.binary_list.size()));
        for (byte[] _iter408 : this.binary_list)        {
          oprot.writeBinary(_iter408);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.boolean_list != null) {
      oprot.writeFieldBegin(BOOLEAN_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.BOOL, this.boolean_list.size()));
        for (boolean _iter409 : this.boolean_list)        {
          oprot.writeBool(_iter409);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_list != null) {
      oprot.writeFieldBegin(STRUCT_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.struct_list.size()));
        for (Empty _iter410 : this.struct_list)        {
          _iter410.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_set != null) {
      oprot.writeFieldBegin(BYTE_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.BYTE, this.byte_set.size()));
        for (byte _iter411 : this.byte_set)        {
          oprot.writeByte(_iter411);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i16_set != null) {
      oprot.writeFieldBegin(I16_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I16, this.i16_set.size()));
        for (short _iter412 : this.i16_set)        {
          oprot.writeI16(_iter412);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i32_set != null) {
      oprot.writeFieldBegin(I32_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.i32_set.size()));
        for (int _iter413 : this.i32_set)        {
          oprot.writeI32(_iter413);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i64_set != null) {
      oprot.writeFieldBegin(I64_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I64, this.i64_set.size()));
        for (long _iter414 : this.i64_set)        {
          oprot.writeI64(_iter414);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.double_set != null) {
      oprot.writeFieldBegin(DOUBLE_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.DOUBLE, this.double_set.size()));
        for (double _iter415 : this.double_set)        {
          oprot.writeDouble(_iter415);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_set != null) {
      oprot.writeFieldBegin(STRING_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.string_set.size()));
        for (String _iter416 : this.string_set)        {
          oprot.writeString(_iter416);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.binary_set != null) {
      oprot.writeFieldBegin(BINARY_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.binary_set.size()));
        for (byte[] _iter417 : this.binary_set)        {
          oprot.writeBinary(_iter417);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.boolean_set != null) {
      oprot.writeFieldBegin(BOOLEAN_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.BOOL, this.boolean_set.size()));
        for (boolean _iter418 : this.boolean_set)        {
          oprot.writeBool(_iter418);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.struct_set != null) {
      oprot.writeFieldBegin(STRUCT_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRUCT, this.struct_set.size()));
        for (Empty _iter419 : this.struct_set)        {
          _iter419.write(oprot);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_byte_map != null) {
      oprot.writeFieldBegin(BYTE_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.BYTE, this.byte_byte_map.size()));
        for (Map.Entry<Byte, Byte> _iter420 : this.byte_byte_map.entrySet())        {
          oprot.writeByte(_iter420.getKey());
          oprot.writeByte(_iter420.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i16_byte_map != null) {
      oprot.writeFieldBegin(I16_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I16, TType.BYTE, this.i16_byte_map.size()));
        for (Map.Entry<Short, Byte> _iter421 : this.i16_byte_map.entrySet())        {
          oprot.writeI16(_iter421.getKey());
          oprot.writeByte(_iter421.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i32_byte_map != null) {
      oprot.writeFieldBegin(I32_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.BYTE, this.i32_byte_map.size()));
        for (Map.Entry<Integer, Byte> _iter422 : this.i32_byte_map.entrySet())        {
          oprot.writeI32(_iter422.getKey());
          oprot.writeByte(_iter422.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i64_byte_map != null) {
      oprot.writeFieldBegin(I64_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I64, TType.BYTE, this.i64_byte_map.size()));
        for (Map.Entry<Long, Byte> _iter423 : this.i64_byte_map.entrySet())        {
          oprot.writeI64(_iter423.getKey());
          oprot.writeByte(_iter423.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.double_byte_map != null) {
      oprot.writeFieldBegin(DOUBLE_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.DOUBLE, TType.BYTE, this.double_byte_map.size()));
        for (Map.Entry<Double, Byte> _iter424 : this.double_byte_map.entrySet())        {
          oprot.writeDouble(_iter424.getKey());
          oprot.writeByte(_iter424.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_byte_map != null) {
      oprot.writeFieldBegin(STRING_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.BYTE, this.string_byte_map.size()));
        for (Map.Entry<String, Byte> _iter425 : this.string_byte_map.entrySet())        {
          oprot.writeString(_iter425.getKey());
          oprot.writeByte(_iter425.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.binary_byte_map != null) {
      oprot.writeFieldBegin(BINARY_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.BYTE, this.binary_byte_map.size()));
        for (Map.Entry<byte[], Byte> _iter426 : this.binary_byte_map.entrySet())        {
          oprot.writeBinary(_iter426.getKey());
          oprot.writeByte(_iter426.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.boolean_byte_map != null) {
      oprot.writeFieldBegin(BOOLEAN_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BOOL, TType.BYTE, this.boolean_byte_map.size()));
        for (Map.Entry<Boolean, Byte> _iter427 : this.boolean_byte_map.entrySet())        {
          oprot.writeBool(_iter427.getKey());
          oprot.writeByte(_iter427.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_i16_map != null) {
      oprot.writeFieldBegin(BYTE_I16_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.I16, this.byte_i16_map.size()));
        for (Map.Entry<Byte, Short> _iter428 : this.byte_i16_map.entrySet())        {
          oprot.writeByte(_iter428.getKey());
          oprot.writeI16(_iter428.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_i32_map != null) {
      oprot.writeFieldBegin(BYTE_I32_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.I32, this.byte_i32_map.size()));
        for (Map.Entry<Byte, Integer> _iter429 : this.byte_i32_map.entrySet())        {
          oprot.writeByte(_iter429.getKey());
          oprot.writeI32(_iter429.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_i64_map != null) {
      oprot.writeFieldBegin(BYTE_I64_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.I64, this.byte_i64_map.size()));
        for (Map.Entry<Byte, Long> _iter430 : this.byte_i64_map.entrySet())        {
          oprot.writeByte(_iter430.getKey());
          oprot.writeI64(_iter430.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_double_map != null) {
      oprot.writeFieldBegin(BYTE_DOUBLE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.DOUBLE, this.byte_double_map.size()));
        for (Map.Entry<Byte, Double> _iter431 : this.byte_double_map.entrySet())        {
          oprot.writeByte(_iter431.getKey());
          oprot.writeDouble(_iter431.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_string_map != null) {
      oprot.writeFieldBegin(BYTE_STRING_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.STRING, this.byte_string_map.size()));
        for (Map.Entry<Byte, String> _iter432 : this.byte_string_map.entrySet())        {
          oprot.writeByte(_iter432.getKey());
          oprot.writeString(_iter432.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_binary_map != null) {
      oprot.writeFieldBegin(BYTE_BINARY_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.STRING, this.byte_binary_map.size()));
        for (Map.Entry<Byte, byte[]> _iter433 : this.byte_binary_map.entrySet())        {
          oprot.writeByte(_iter433.getKey());
          oprot.writeBinary(_iter433.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_boolean_map != null) {
      oprot.writeFieldBegin(BYTE_BOOLEAN_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.BOOL, this.byte_boolean_map.size()));
        for (Map.Entry<Byte, Boolean> _iter434 : this.byte_boolean_map.entrySet())        {
          oprot.writeByte(_iter434.getKey());
          oprot.writeBool(_iter434.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.list_byte_map != null) {
      oprot.writeFieldBegin(LIST_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.LIST, TType.BYTE, this.list_byte_map.size()));
        for (Map.Entry<List<Byte>, Byte> _iter435 : this.list_byte_map.entrySet())        {
          {
            oprot.writeListBegin(new TList(TType.BYTE, _iter435.getKey().size()));
            for (byte _iter436 : _iter435.getKey())            {
              oprot.writeByte(_iter436);
            }
            oprot.writeListEnd();
          }
          oprot.writeByte(_iter435.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.set_byte_map != null) {
      oprot.writeFieldBegin(SET_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.SET, TType.BYTE, this.set_byte_map.size()));
        for (Map.Entry<Set<Byte>, Byte> _iter437 : this.set_byte_map.entrySet())        {
          {
            oprot.writeSetBegin(new TSet(TType.BYTE, _iter437.getKey().size()));
            for (byte _iter438 : _iter437.getKey())            {
              oprot.writeByte(_iter438);
            }
            oprot.writeSetEnd();
          }
          oprot.writeByte(_iter437.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.map_byte_map != null) {
      oprot.writeFieldBegin(MAP_BYTE_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.MAP, TType.BYTE, this.map_byte_map.size()));
        for (Map.Entry<Map<Byte,Byte>, Byte> _iter439 : this.map_byte_map.entrySet())        {
          {
            oprot.writeMapBegin(new TMap(TType.BYTE, TType.BYTE, _iter439.getKey().size()));
            for (Map.Entry<Byte, Byte> _iter440 : _iter439.getKey().entrySet())            {
              oprot.writeByte(_iter440.getKey());
              oprot.writeByte(_iter440.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeByte(_iter439.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_map_map != null) {
      oprot.writeFieldBegin(BYTE_MAP_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.MAP, this.byte_map_map.size()));
        for (Map.Entry<Byte, Map<Byte,Byte>> _iter441 : this.byte_map_map.entrySet())        {
          oprot.writeByte(_iter441.getKey());
          {
            oprot.writeMapBegin(new TMap(TType.BYTE, TType.BYTE, _iter441.getValue().size()));
            for (Map.Entry<Byte, Byte> _iter442 : _iter441.getValue().entrySet())            {
              oprot.writeByte(_iter442.getKey());
              oprot.writeByte(_iter442.getValue());
            }
            oprot.writeMapEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_set_map != null) {
      oprot.writeFieldBegin(BYTE_SET_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.SET, this.byte_set_map.size()));
        for (Map.Entry<Byte, Set<Byte>> _iter443 : this.byte_set_map.entrySet())        {
          oprot.writeByte(_iter443.getKey());
          {
            oprot.writeSetBegin(new TSet(TType.BYTE, _iter443.getValue().size()));
            for (byte _iter444 : _iter443.getValue())            {
              oprot.writeByte(_iter444);
            }
            oprot.writeSetEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_list_map != null) {
      oprot.writeFieldBegin(BYTE_LIST_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.LIST, this.byte_list_map.size()));
        for (Map.Entry<Byte, List<Byte>> _iter445 : this.byte_list_map.entrySet())        {
          oprot.writeByte(_iter445.getKey());
          {
            oprot.writeListBegin(new TList(TType.BYTE, _iter445.getValue().size()));
            for (byte _iter446 : _iter445.getValue())            {
              oprot.writeByte(_iter446);
            }
            oprot.writeListEnd();
          }
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_byte_hash_map != null) {
      oprot.writeFieldBegin(BYTE_BYTE_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BYTE, TType.BYTE, this.byte_byte_hash_map.size()));
        for (Map.Entry<Byte, Byte> _iter447 : this.byte_byte_hash_map.entrySet())        {
          oprot.writeByte(_iter447.getKey());
          oprot.writeByte(_iter447.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i16_byte_hash_map != null) {
      oprot.writeFieldBegin(I16_BYTE_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I16, TType.BYTE, this.i16_byte_hash_map.size()));
        for (Map.Entry<Short, Byte> _iter448 : this.i16_byte_hash_map.entrySet())        {
          oprot.writeI16(_iter448.getKey());
          oprot.writeByte(_iter448.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i32_byte_hash_map != null) {
      oprot.writeFieldBegin(I32_BYTE_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.BYTE, this.i32_byte_hash_map.size()));
        for (Map.Entry<Integer, Byte> _iter449 : this.i32_byte_hash_map.entrySet())        {
          oprot.writeI32(_iter449.getKey());
          oprot.writeByte(_iter449.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i64_byte_hash_map != null) {
      oprot.writeFieldBegin(I64_BYTE_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I64, TType.BYTE, this.i64_byte_hash_map.size()));
        for (Map.Entry<Long, Byte> _iter450 : this.i64_byte_hash_map.entrySet())        {
          oprot.writeI64(_iter450.getKey());
          oprot.writeByte(_iter450.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.double_byte_hash_map != null) {
      oprot.writeFieldBegin(DOUBLE_BYTE_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.DOUBLE, TType.BYTE, this.double_byte_hash_map.size()));
        for (Map.Entry<Double, Byte> _iter451 : this.double_byte_hash_map.entrySet())        {
          oprot.writeDouble(_iter451.getKey());
          oprot.writeByte(_iter451.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_byte_hash_map != null) {
      oprot.writeFieldBegin(STRING_BYTE_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.BYTE, this.string_byte_hash_map.size()));
        for (Map.Entry<String, Byte> _iter452 : this.string_byte_hash_map.entrySet())        {
          oprot.writeString(_iter452.getKey());
          oprot.writeByte(_iter452.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.binary_byte_hash_map != null) {
      oprot.writeFieldBegin(BINARY_BYTE_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.BYTE, this.binary_byte_hash_map.size()));
        for (Map.Entry<byte[], Byte> _iter453 : this.binary_byte_hash_map.entrySet())        {
          oprot.writeBinary(_iter453.getKey());
          oprot.writeByte(_iter453.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.boolean_byte_hash_map != null) {
      oprot.writeFieldBegin(BOOLEAN_BYTE_HASH_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.BOOL, TType.BYTE, this.boolean_byte_hash_map.size()));
        for (Map.Entry<Boolean, Byte> _iter454 : this.boolean_byte_hash_map.entrySet())        {
          oprot.writeBool(_iter454.getKey());
          oprot.writeByte(_iter454.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.float_list != null) {
      oprot.writeFieldBegin(FLOAT_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.FLOAT, this.float_list.size()));
        for (float _iter455 : this.float_list)        {
          oprot.writeFloat(_iter455);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i16_float_map != null) {
      oprot.writeFieldBegin(I16_FLOAT_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I16, TType.FLOAT, this.i16_float_map.size()));
        for (Map.Entry<Short, Float> _iter456 : this.i16_float_map.entrySet())        {
          oprot.writeI16(_iter456.getKey());
          oprot.writeFloat(_iter456.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.byte_hash_set != null) {
      oprot.writeFieldBegin(BYTE_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.BYTE, this.byte_hash_set.size()));
        for (byte _iter457 : this.byte_hash_set)        {
          oprot.writeByte(_iter457);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i16_hash_set != null) {
      oprot.writeFieldBegin(I16_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I16, this.i16_hash_set.size()));
        for (short _iter458 : this.i16_hash_set)        {
          oprot.writeI16(_iter458);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i32_hash_set != null) {
      oprot.writeFieldBegin(I32_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.i32_hash_set.size()));
        for (int _iter459 : this.i32_hash_set)        {
          oprot.writeI32(_iter459);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.i64_hash_set != null) {
      oprot.writeFieldBegin(I64_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I64, this.i64_hash_set.size()));
        for (long _iter460 : this.i64_hash_set)        {
          oprot.writeI64(_iter460);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.double_hash_set != null) {
      oprot.writeFieldBegin(DOUBLE_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.DOUBLE, this.double_hash_set.size()));
        for (double _iter461 : this.double_hash_set)        {
          oprot.writeDouble(_iter461);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.string_hash_set != null) {
      oprot.writeFieldBegin(STRING_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.string_hash_set.size()));
        for (String _iter462 : this.string_hash_set)        {
          oprot.writeString(_iter462);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.binary_hash_set != null) {
      oprot.writeFieldBegin(BINARY_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.binary_hash_set.size()));
        for (byte[] _iter463 : this.binary_hash_set)        {
          oprot.writeBinary(_iter463);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.boolean_hash_set != null) {
      oprot.writeFieldBegin(BOOLEAN_HASH_SET_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.BOOL, this.boolean_hash_set.size()));
        for (boolean _iter464 : this.boolean_hash_set)        {
          oprot.writeBool(_iter464);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("CompactProtoTestStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("a_byte");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getA_byte(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("a_i16");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getA_i16(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("a_i32");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getA_i32(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("a_i64");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getA_i64(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("a_double");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getA_double(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("a_string");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getA_string() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getA_string(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("a_binary");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getA_binary() == null) {
      sb.append("null");
    } else {
        int __a_binary_size = Math.min(this. getA_binary().length, 128);
        for (int i = 0; i < __a_binary_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getA_binary()[i]).length() > 1 ? Integer.toHexString(this. getA_binary()[i]).substring(Integer.toHexString(this. getA_binary()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getA_binary()[i]).toUpperCase());
        }
        if (this. getA_binary().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("true_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isTrue_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("false_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isFalse_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("empty_struct_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getEmpty_struct_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getEmpty_struct_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i16_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI16_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI16_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i32_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI32_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI32_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i64_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI64_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI64_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("double_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDouble_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDouble_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("binary_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBinary_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBinary_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("boolean_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBoolean_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBoolean_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getStruct_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getStruct_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i16_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI16_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI16_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i32_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI32_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI32_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i64_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI64_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI64_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("double_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDouble_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDouble_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("binary_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBinary_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBinary_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("boolean_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBoolean_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBoolean_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("struct_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getStruct_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getStruct_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i16_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI16_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI16_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i32_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI32_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI32_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i64_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI64_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI64_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("double_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDouble_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDouble_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("binary_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBinary_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBinary_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("boolean_hash_set");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBoolean_hash_set() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBoolean_hash_set(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i16_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI16_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI16_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i32_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI32_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI32_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i64_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI64_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI64_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("double_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDouble_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDouble_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("binary_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBinary_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBinary_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("boolean_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBoolean_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBoolean_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_byte_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_byte_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_byte_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i16_byte_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI16_byte_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI16_byte_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i32_byte_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI32_byte_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI32_byte_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i64_byte_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI64_byte_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI64_byte_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("double_byte_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getDouble_byte_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getDouble_byte_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("string_byte_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getString_byte_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getString_byte_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("binary_byte_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBinary_byte_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBinary_byte_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("boolean_byte_hash_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBoolean_byte_hash_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getBoolean_byte_hash_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_i16_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_i16_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_i16_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_i32_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_i32_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_i32_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_i64_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_i64_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_i64_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_double_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_double_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_double_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_string_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_string_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_string_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_binary_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_binary_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_binary_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_boolean_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_boolean_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_boolean_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("list_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getList_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getList_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("set_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getSet_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getSet_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("map_byte_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getMap_byte_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getMap_byte_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_map_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_map_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_map_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_set_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_set_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_set_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("byte_list_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getByte_list_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getByte_list_map(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("float_list");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getFloat_list() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getFloat_list(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("i16_float_map");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getI16_float_map() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getI16_float_map(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

