/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Backwards implements TBase, java.io.Serializable, Cloneable, Comparable<Backwards> {
  private static final TStruct STRUCT_DESC = new TStruct("Backwards");
  private static final TField FIRST_TAG2_FIELD_DESC = new TField("first_tag2", TType.I32, (short)2);
  private static final TField SECOND_TAG1_FIELD_DESC = new TField("second_tag1", TType.I32, (short)1);

  public int first_tag2;
  public int second_tag1;
  public static final int FIRST_TAG2 = 2;
  public static final int SECOND_TAG1 = 1;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __FIRST_TAG2_ISSET_ID = 0;
  private static final int __SECOND_TAG1_ISSET_ID = 1;
  private BitSet __isset_bit_vector = new BitSet(2);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(FIRST_TAG2, new FieldMetaData("first_tag2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(SECOND_TAG1, new FieldMetaData("second_tag1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Backwards.class, metaDataMap);
  }

  public Backwards() {
  }

  public Backwards(
    int first_tag2,
    int second_tag1)
  {
    this();
    this.first_tag2 = first_tag2;
    setFirst_tag2IsSet(true);
    this.second_tag1 = second_tag1;
    setSecond_tag1IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Backwards(Backwards other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.first_tag2 = TBaseHelper.deepCopy(other.first_tag2);
    this.second_tag1 = TBaseHelper.deepCopy(other.second_tag1);
  }

  public Backwards deepCopy() {
    return new Backwards(this);
  }

  @Deprecated
  public Backwards clone() {
    return new Backwards(this);
  }

  public int  getFirst_tag2() {
    return this.first_tag2;
  }

  public Backwards setFirst_tag2(int first_tag2) {
    this.first_tag2 = first_tag2;
    setFirst_tag2IsSet(true);
    return this;
  }

  public void unsetFirst_tag2() {
    __isset_bit_vector.clear(__FIRST_TAG2_ISSET_ID);
  }

  // Returns true if field first_tag2 is set (has been assigned a value) and false otherwise
  public boolean isSetFirst_tag2() {
    return __isset_bit_vector.get(__FIRST_TAG2_ISSET_ID);
  }

  public void setFirst_tag2IsSet(boolean value) {
    __isset_bit_vector.set(__FIRST_TAG2_ISSET_ID, value);
  }

  public int  getSecond_tag1() {
    return this.second_tag1;
  }

  public Backwards setSecond_tag1(int second_tag1) {
    this.second_tag1 = second_tag1;
    setSecond_tag1IsSet(true);
    return this;
  }

  public void unsetSecond_tag1() {
    __isset_bit_vector.clear(__SECOND_TAG1_ISSET_ID);
  }

  // Returns true if field second_tag1 is set (has been assigned a value) and false otherwise
  public boolean isSetSecond_tag1() {
    return __isset_bit_vector.get(__SECOND_TAG1_ISSET_ID);
  }

  public void setSecond_tag1IsSet(boolean value) {
    __isset_bit_vector.set(__SECOND_TAG1_ISSET_ID, value);
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case FIRST_TAG2:
      if (value == null) {
        unsetFirst_tag2();
      } else {
        setFirst_tag2((Integer)value);
      }
      break;

    case SECOND_TAG1:
      if (value == null) {
        unsetSecond_tag1();
      } else {
        setSecond_tag1((Integer)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case FIRST_TAG2:
      return new Integer(getFirst_tag2());

    case SECOND_TAG1:
      return new Integer(getSecond_tag1());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case FIRST_TAG2:
      return isSetFirst_tag2();
    case SECOND_TAG1:
      return isSetSecond_tag1();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Backwards)
      return this.equals((Backwards)that);
    return false;
  }

  public boolean equals(Backwards that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_first_tag2 = true;
    boolean that_present_first_tag2 = true;
    if (this_present_first_tag2 || that_present_first_tag2) {
      if (!(this_present_first_tag2 && that_present_first_tag2))
        return false;
      if (!TBaseHelper.equalsNobinary(this.first_tag2, that.first_tag2))
        return false;
    }

    boolean this_present_second_tag1 = true;
    boolean that_present_second_tag1 = true;
    if (this_present_second_tag1 || that_present_second_tag1) {
      if (!(this_present_second_tag1 && that_present_second_tag1))
        return false;
      if (!TBaseHelper.equalsNobinary(this.second_tag1, that.second_tag1))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Backwards other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFirst_tag2()).compareTo(other.isSetFirst_tag2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(first_tag2, other.first_tag2);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetSecond_tag1()).compareTo(other.isSetSecond_tag1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(second_tag1, other.second_tag1);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case FIRST_TAG2:
          if (field.type == TType.I32) {
            this.first_tag2 = iprot.readI32();
            setFirst_tag2IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SECOND_TAG1:
          if (field.type == TType.I32) {
            this.second_tag1 = iprot.readI32();
            setSecond_tag1IsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SECOND_TAG1_FIELD_DESC);
    oprot.writeI32(this.second_tag1);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FIRST_TAG2_FIELD_DESC);
    oprot.writeI32(this.first_tag2);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Backwards");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("first_tag2");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getFirst_tag2(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("second_tag1");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getSecond_tag1(), indent + 1, prettyPrint));
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

