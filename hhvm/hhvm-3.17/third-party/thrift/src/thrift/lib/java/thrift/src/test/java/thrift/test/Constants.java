/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({ "unused" })
public class Constants {

  public static final Constant const1 = new Constant();
  static {
  }

  public static final Constant const2 = new Constant();
  static {
    const2.setS("goodbye");
  }

  public static final CompactProtoTestStruct COMPACT_TEST = new CompactProtoTestStruct();
  static {
    COMPACT_TEST.setA_byte((byte)127);
    COMPACT_TEST.setA_i16((short)32000);
    COMPACT_TEST.setA_i32(1000000000);
    COMPACT_TEST.setA_i64(1099511627775L);
    COMPACT_TEST.setA_double(5.6789);
    COMPACT_TEST.setA_string("my string");
    COMPACT_TEST.setTrue_field(true);
    COMPACT_TEST.setFalse_field(false);
    Empty tmp0 = new Empty();

    COMPACT_TEST.setEmpty_struct_field(tmp0);
    List<Byte> tmp1 = new ArrayList<Byte>();
    tmp1.add((byte)-127);
    tmp1.add((byte)-1);
    tmp1.add((byte)0);
    tmp1.add((byte)1);
    tmp1.add((byte)127);

    COMPACT_TEST.setByte_list(tmp1);
    List<Short> tmp2 = new ArrayList<Short>();
    tmp2.add((short)-1);
    tmp2.add((short)0);
    tmp2.add((short)1);
    tmp2.add((short)32767);

    COMPACT_TEST.setI16_list(tmp2);
    List<Integer> tmp3 = new ArrayList<Integer>();
    tmp3.add(-1);
    tmp3.add(0);
    tmp3.add(255);
    tmp3.add(65535);
    tmp3.add(16777215);
    tmp3.add(2147483647);

    COMPACT_TEST.setI32_list(tmp3);
    List<Long> tmp4 = new ArrayList<Long>();
    tmp4.add(-1L);
    tmp4.add(0L);
    tmp4.add(255L);
    tmp4.add(65535L);
    tmp4.add(16777215L);
    tmp4.add(4294967295L);
    tmp4.add(1099511627775L);
    tmp4.add(281474976710655L);
    tmp4.add(72057594037927935L);
    tmp4.add(9223372036854775807L);

    COMPACT_TEST.setI64_list(tmp4);
    List<Double> tmp5 = new ArrayList<Double>();
    tmp5.add(0.1);
    tmp5.add(0.2);
    tmp5.add(0.3);

    COMPACT_TEST.setDouble_list(tmp5);
    List<Float> tmp6 = new ArrayList<Float>();
    tmp6.add((float)0.1);
    tmp6.add((float)0.2);
    tmp6.add((float)0.3);

    COMPACT_TEST.setFloat_list(tmp6);
    List<String> tmp7 = new ArrayList<String>();
    tmp7.add("first");
    tmp7.add("second");
    tmp7.add("third");

    COMPACT_TEST.setString_list(tmp7);
    List<Boolean> tmp8 = new ArrayList<Boolean>();
    tmp8.add(true);
    tmp8.add(true);
    tmp8.add(true);
    tmp8.add(false);
    tmp8.add(false);
    tmp8.add(false);

    COMPACT_TEST.setBoolean_list(tmp8);
    List<Empty> tmp9 = new ArrayList<Empty>();
    Empty tmp10 = new Empty();

    tmp9.add(tmp10);
    Empty tmp11 = new Empty();

    tmp9.add(tmp11);

    COMPACT_TEST.setStruct_list(tmp9);
    Set<Byte> tmp12 = new HashSet<Byte>();
    tmp12.add((byte)-127);
    tmp12.add((byte)-1);
    tmp12.add((byte)0);
    tmp12.add((byte)1);
    tmp12.add((byte)127);

    COMPACT_TEST.setByte_set(tmp12);
    Set<Short> tmp13 = new HashSet<Short>();
    tmp13.add((short)-1);
    tmp13.add((short)0);
    tmp13.add((short)1);
    tmp13.add((short)32767);

    COMPACT_TEST.setI16_set(tmp13);
    Set<Integer> tmp14 = new HashSet<Integer>();
    tmp14.add(1);
    tmp14.add(2);
    tmp14.add(3);

    COMPACT_TEST.setI32_set(tmp14);
    Set<Long> tmp15 = new HashSet<Long>();
    tmp15.add(-1L);
    tmp15.add(0L);
    tmp15.add(255L);
    tmp15.add(65535L);
    tmp15.add(16777215L);
    tmp15.add(4294967295L);
    tmp15.add(1099511627775L);
    tmp15.add(281474976710655L);
    tmp15.add(72057594037927935L);
    tmp15.add(9223372036854775807L);

    COMPACT_TEST.setI64_set(tmp15);
    Set<Double> tmp16 = new HashSet<Double>();
    tmp16.add(0.1);
    tmp16.add(0.2);
    tmp16.add(0.3);

    COMPACT_TEST.setDouble_set(tmp16);
    Set<String> tmp17 = new HashSet<String>();
    tmp17.add("first");
    tmp17.add("second");
    tmp17.add("third");

    COMPACT_TEST.setString_set(tmp17);
    Set<Boolean> tmp18 = new HashSet<Boolean>();
    tmp18.add(true);
    tmp18.add(false);

    COMPACT_TEST.setBoolean_set(tmp18);
    Set<Empty> tmp19 = new HashSet<Empty>();
    Empty tmp20 = new Empty();

    tmp19.add(tmp20);

    COMPACT_TEST.setStruct_set(tmp19);
    Set<Byte> tmp21 = new HashSet<Byte>();
    tmp21.add((byte)-127);
    tmp21.add((byte)-1);
    tmp21.add((byte)0);
    tmp21.add((byte)1);
    tmp21.add((byte)127);

    COMPACT_TEST.setByte_hash_set(tmp21);
    Set<Short> tmp22 = new HashSet<Short>();
    tmp22.add((short)-1);
    tmp22.add((short)0);
    tmp22.add((short)1);
    tmp22.add((short)32767);

    COMPACT_TEST.setI16_hash_set(tmp22);
    Set<Integer> tmp23 = new HashSet<Integer>();
    tmp23.add(1);
    tmp23.add(2);
    tmp23.add(3);

    COMPACT_TEST.setI32_hash_set(tmp23);
    Set<Long> tmp24 = new HashSet<Long>();
    tmp24.add(-1L);
    tmp24.add(0L);
    tmp24.add(255L);
    tmp24.add(65535L);
    tmp24.add(16777215L);
    tmp24.add(4294967295L);
    tmp24.add(1099511627775L);
    tmp24.add(281474976710655L);
    tmp24.add(72057594037927935L);
    tmp24.add(9223372036854775807L);

    COMPACT_TEST.setI64_hash_set(tmp24);
    Set<Double> tmp25 = new HashSet<Double>();
    tmp25.add(0.1);
    tmp25.add(0.2);
    tmp25.add(0.3);

    COMPACT_TEST.setDouble_hash_set(tmp25);
    Set<String> tmp26 = new HashSet<String>();
    tmp26.add("first");
    tmp26.add("second");
    tmp26.add("third");

    COMPACT_TEST.setString_hash_set(tmp26);
    Set<Boolean> tmp27 = new HashSet<Boolean>();
    tmp27.add(true);
    tmp27.add(false);

    COMPACT_TEST.setBoolean_hash_set(tmp27);
    Map<Byte,Byte> tmp28 = new HashMap<Byte,Byte>();
    tmp28.put((byte)1, (byte)2);

    COMPACT_TEST.setByte_byte_map(tmp28);
    Map<Short,Byte> tmp29 = new HashMap<Short,Byte>();
    tmp29.put((short)1, (byte)1);
    tmp29.put((short)-1, (byte)1);
    tmp29.put((short)32767, (byte)1);

    COMPACT_TEST.setI16_byte_map(tmp29);
    Map<Integer,Byte> tmp30 = new HashMap<Integer,Byte>();
    tmp30.put(1, (byte)1);
    tmp30.put(-1, (byte)1);
    tmp30.put(2147483647, (byte)1);

    COMPACT_TEST.setI32_byte_map(tmp30);
    Map<Long,Byte> tmp31 = new HashMap<Long,Byte>();
    tmp31.put(0L, (byte)1);
    tmp31.put(1L, (byte)1);
    tmp31.put(-1L, (byte)1);
    tmp31.put(9223372036854775807L, (byte)1);

    COMPACT_TEST.setI64_byte_map(tmp31);
    Map<Double,Byte> tmp32 = new HashMap<Double,Byte>();
    tmp32.put(-1.1, (byte)1);
    tmp32.put(1.1, (byte)1);

    COMPACT_TEST.setDouble_byte_map(tmp32);
    Map<String,Byte> tmp33 = new HashMap<String,Byte>();
    tmp33.put("first", (byte)1);
    tmp33.put("second", (byte)2);
    tmp33.put("third", (byte)3);
    tmp33.put("", (byte)0);

    COMPACT_TEST.setString_byte_map(tmp33);
    Map<Boolean,Byte> tmp34 = new HashMap<Boolean,Byte>();
    tmp34.put(true, (byte)1);
    tmp34.put(false, (byte)0);

    COMPACT_TEST.setBoolean_byte_map(tmp34);
    Map<Byte,Byte> tmp35 = new HashMap<Byte,Byte>();
    tmp35.put((byte)1, (byte)2);

    COMPACT_TEST.setByte_byte_hash_map(tmp35);
    Map<Short,Float> tmp36 = new HashMap<Short,Float>();
    tmp36.put((short)1, (float)2);

    COMPACT_TEST.setI16_float_map(tmp36);
    Map<Short,Byte> tmp37 = new HashMap<Short,Byte>();
    tmp37.put((short)1, (byte)1);
    tmp37.put((short)-1, (byte)1);
    tmp37.put((short)32767, (byte)1);

    COMPACT_TEST.setI16_byte_hash_map(tmp37);
    Map<Integer,Byte> tmp38 = new HashMap<Integer,Byte>();
    tmp38.put(1, (byte)1);
    tmp38.put(-1, (byte)1);
    tmp38.put(2147483647, (byte)1);

    COMPACT_TEST.setI32_byte_hash_map(tmp38);
    Map<Long,Byte> tmp39 = new HashMap<Long,Byte>();
    tmp39.put(0L, (byte)1);
    tmp39.put(1L, (byte)1);
    tmp39.put(-1L, (byte)1);
    tmp39.put(9223372036854775807L, (byte)1);

    COMPACT_TEST.setI64_byte_hash_map(tmp39);
    Map<Double,Byte> tmp40 = new HashMap<Double,Byte>();
    tmp40.put(-1.1, (byte)1);
    tmp40.put(1.1, (byte)1);

    COMPACT_TEST.setDouble_byte_hash_map(tmp40);
    Map<String,Byte> tmp41 = new HashMap<String,Byte>();
    tmp41.put("first", (byte)1);
    tmp41.put("second", (byte)2);
    tmp41.put("third", (byte)3);
    tmp41.put("", (byte)0);

    COMPACT_TEST.setString_byte_hash_map(tmp41);
    Map<Boolean,Byte> tmp42 = new HashMap<Boolean,Byte>();
    tmp42.put(true, (byte)1);
    tmp42.put(false, (byte)0);

    COMPACT_TEST.setBoolean_byte_hash_map(tmp42);
    Map<Byte,Short> tmp43 = new HashMap<Byte,Short>();
    tmp43.put((byte)1, (short)1);
    tmp43.put((byte)2, (short)-1);
    tmp43.put((byte)3, (short)32767);

    COMPACT_TEST.setByte_i16_map(tmp43);
    Map<Byte,Integer> tmp44 = new HashMap<Byte,Integer>();
    tmp44.put((byte)1, 1);
    tmp44.put((byte)2, -1);
    tmp44.put((byte)3, 2147483647);

    COMPACT_TEST.setByte_i32_map(tmp44);
    Map<Byte,Long> tmp45 = new HashMap<Byte,Long>();
    tmp45.put((byte)1, 1L);
    tmp45.put((byte)2, -1L);
    tmp45.put((byte)3, 9223372036854775807L);

    COMPACT_TEST.setByte_i64_map(tmp45);
    Map<Byte,Double> tmp46 = new HashMap<Byte,Double>();
    tmp46.put((byte)1, 0.1);
    tmp46.put((byte)2, -0.1);
    tmp46.put((byte)3, 1e+06);

    COMPACT_TEST.setByte_double_map(tmp46);
    Map<Byte,String> tmp47 = new HashMap<Byte,String>();
    tmp47.put((byte)1, "");
    tmp47.put((byte)2, "blah");
    tmp47.put((byte)3, "loooooooooooooong string");

    COMPACT_TEST.setByte_string_map(tmp47);
    Map<Byte,Boolean> tmp48 = new HashMap<Byte,Boolean>();
    tmp48.put((byte)1, true);
    tmp48.put((byte)2, false);

    COMPACT_TEST.setByte_boolean_map(tmp48);
    Map<List<Byte>,Byte> tmp49 = new HashMap<List<Byte>,Byte>();
    List<Byte> tmp50 = new ArrayList<Byte>();
    tmp50.add((byte)1);
    tmp50.add((byte)2);
    tmp50.add((byte)3);

    tmp49.put(tmp50, (byte)1);
    List<Byte> tmp51 = new ArrayList<Byte>();
    tmp51.add((byte)0);
    tmp51.add((byte)1);

    tmp49.put(tmp51, (byte)2);
    List<Byte> tmp52 = new ArrayList<Byte>();

    tmp49.put(tmp52, (byte)0);

    COMPACT_TEST.setList_byte_map(tmp49);
    Map<Set<Byte>,Byte> tmp53 = new HashMap<Set<Byte>,Byte>();
    Set<Byte> tmp54 = new HashSet<Byte>();
    tmp54.add((byte)1);
    tmp54.add((byte)2);
    tmp54.add((byte)3);

    tmp53.put(tmp54, (byte)1);
    Set<Byte> tmp55 = new HashSet<Byte>();
    tmp55.add((byte)0);
    tmp55.add((byte)1);

    tmp53.put(tmp55, (byte)2);
    Set<Byte> tmp56 = new HashSet<Byte>();

    tmp53.put(tmp56, (byte)0);

    COMPACT_TEST.setSet_byte_map(tmp53);
    Map<Map<Byte,Byte>,Byte> tmp57 = new HashMap<Map<Byte,Byte>,Byte>();
    Map<Byte,Byte> tmp58 = new HashMap<Byte,Byte>();
    tmp58.put((byte)1, (byte)1);

    tmp57.put(tmp58, (byte)1);
    Map<Byte,Byte> tmp59 = new HashMap<Byte,Byte>();
    tmp59.put((byte)2, (byte)2);

    tmp57.put(tmp59, (byte)2);
    Map<Byte,Byte> tmp60 = new HashMap<Byte,Byte>();

    tmp57.put(tmp60, (byte)0);

    COMPACT_TEST.setMap_byte_map(tmp57);
    Map<Byte,Map<Byte,Byte>> tmp61 = new HashMap<Byte,Map<Byte,Byte>>();
    Map<Byte,Byte> tmp62 = new HashMap<Byte,Byte>();

    tmp61.put((byte)0, tmp62);
    Map<Byte,Byte> tmp63 = new HashMap<Byte,Byte>();
    tmp63.put((byte)1, (byte)1);

    tmp61.put((byte)1, tmp63);
    Map<Byte,Byte> tmp64 = new HashMap<Byte,Byte>();
    tmp64.put((byte)1, (byte)1);
    tmp64.put((byte)2, (byte)2);

    tmp61.put((byte)2, tmp64);

    COMPACT_TEST.setByte_map_map(tmp61);
    Map<Byte,Set<Byte>> tmp65 = new HashMap<Byte,Set<Byte>>();
    Set<Byte> tmp66 = new HashSet<Byte>();

    tmp65.put((byte)0, tmp66);
    Set<Byte> tmp67 = new HashSet<Byte>();
    tmp67.add((byte)1);

    tmp65.put((byte)1, tmp67);
    Set<Byte> tmp68 = new HashSet<Byte>();
    tmp68.add((byte)1);
    tmp68.add((byte)2);

    tmp65.put((byte)2, tmp68);

    COMPACT_TEST.setByte_set_map(tmp65);
    Map<Byte,List<Byte>> tmp69 = new HashMap<Byte,List<Byte>>();
    List<Byte> tmp70 = new ArrayList<Byte>();

    tmp69.put((byte)0, tmp70);
    List<Byte> tmp71 = new ArrayList<Byte>();
    tmp71.add((byte)1);

    tmp69.put((byte)1, tmp71);
    List<Byte> tmp72 = new ArrayList<Byte>();
    tmp72.add((byte)1);
    tmp72.add((byte)2);

    tmp69.put((byte)2, tmp72);

    COMPACT_TEST.setByte_list_map(tmp69);
  }

}
