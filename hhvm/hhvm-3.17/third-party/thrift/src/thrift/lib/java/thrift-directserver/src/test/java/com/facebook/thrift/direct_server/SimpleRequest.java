/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.facebook.thrift.direct_server;

import java.util.Map;
import java.util.HashMap;
import java.util.Collections;
import java.util.BitSet;

import com.facebook.thrift.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class SimpleRequest implements TBase, java.io.Serializable, Cloneable, Comparable<SimpleRequest> {
  private static final TStruct STRUCT_DESC = new TStruct("SimpleRequest");
  private static final TField TRUE_OR_FALSE_FIELD_DESC = new TField("true_or_false", TType.BOOL, (short)1);
  private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)2);

  public boolean true_or_false;
  public String value;
  public static final int TRUE_OR_FALSE = 1;
  public static final int VALUE = 2;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __TRUE_OR_FALSE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(TRUE_OR_FALSE, new FieldMetaData("true_or_false", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(VALUE, new FieldMetaData("value", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(SimpleRequest.class, metaDataMap);
  }

  public SimpleRequest() {
  }

  public SimpleRequest(
    boolean true_or_false,
    String value)
  {
    this();
    this.true_or_false = true_or_false;
    setTrue_or_falseIsSet(true);
    this.value = value;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SimpleRequest(SimpleRequest other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.true_or_false = TBaseHelper.deepCopy(other.true_or_false);
    if (other.isSetValue()) {
      this.value = TBaseHelper.deepCopy(other.value);
    }
  }

  public SimpleRequest deepCopy() {
    return new SimpleRequest(this);
  }

  @Deprecated
  public SimpleRequest clone() {
    return new SimpleRequest(this);
  }

  public boolean  isTrue_or_false() {
    return this.true_or_false;
  }

  public SimpleRequest setTrue_or_false(boolean true_or_false) {
    this.true_or_false = true_or_false;
    setTrue_or_falseIsSet(true);
    return this;
  }

  public void unsetTrue_or_false() {
    __isset_bit_vector.clear(__TRUE_OR_FALSE_ISSET_ID);
  }

  // Returns true if field true_or_false is set (has been assigned a value) and false otherwise
  public boolean isSetTrue_or_false() {
    return __isset_bit_vector.get(__TRUE_OR_FALSE_ISSET_ID);
  }

  public void setTrue_or_falseIsSet(boolean value) {
    __isset_bit_vector.set(__TRUE_OR_FALSE_ISSET_ID, value);
  }

  public String  getValue() {
    return this.value;
  }

  public SimpleRequest setValue(String value) {
    this.value = value;
    return this;
  }

  public void unsetValue() {
    this.value = null;
  }

  // Returns true if field value is set (has been assigned a value) and false otherwise
  public boolean isSetValue() {
    return this.value != null;
  }

  public void setValueIsSet(boolean value) {
    if (!value) {
      this.value = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TRUE_OR_FALSE:
      if (value == null) {
        unsetTrue_or_false();
      } else {
        setTrue_or_false((Boolean)value);
      }
      break;

    case VALUE:
      if (value == null) {
        unsetValue();
      } else {
        setValue((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TRUE_OR_FALSE:
      return new Boolean(isTrue_or_false());

    case VALUE:
      return getValue();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TRUE_OR_FALSE:
      return isSetTrue_or_false();
    case VALUE:
      return isSetValue();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SimpleRequest)
      return this.equals((SimpleRequest)that);
    return false;
  }

  public boolean equals(SimpleRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_true_or_false = true;
    boolean that_present_true_or_false = true;
    if (this_present_true_or_false || that_present_true_or_false) {
      if (!(this_present_true_or_false && that_present_true_or_false))
        return false;
      if (!TBaseHelper.equalsNobinary(this.true_or_false, that.true_or_false))
        return false;
    }

    boolean this_present_value = true && this.isSetValue();
    boolean that_present_value = true && that.isSetValue();
    if (this_present_value || that_present_value) {
      if (!(this_present_value && that_present_value))
        return false;
      if (!TBaseHelper.equalsNobinary(this.value, that.value))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SimpleRequest other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTrue_or_false()).compareTo(other.isSetTrue_or_false());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(true_or_false, other.true_or_false);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(value, other.value);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TRUE_OR_FALSE:
          if (field.type == TType.BOOL) {
            this.true_or_false = iprot.readBool();
            setTrue_or_falseIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VALUE:
          if (field.type == TType.STRING) {
            this.value = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TRUE_OR_FALSE_FIELD_DESC);
    oprot.writeBool(this.true_or_false);
    oprot.writeFieldEnd();
    if (this.value != null) {
      oprot.writeFieldBegin(VALUE_FIELD_DESC);
      oprot.writeString(this.value);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("SimpleRequest");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("true_or_false");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. isTrue_or_false(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("value");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getValue() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this. getValue(), indent + 1, prettyPrint));
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

