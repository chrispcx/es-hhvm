/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class Base64 implements TBase, java.io.Serializable, Cloneable, Comparable<Base64> {
  private static final TStruct STRUCT_DESC = new TStruct("Base64");
  private static final TField A_FIELD_DESC = new TField("a", TType.I32, (short)1);
  private static final TField B1_FIELD_DESC = new TField("b1", TType.STRING, (short)2);
  private static final TField B2_FIELD_DESC = new TField("b2", TType.STRING, (short)3);
  private static final TField B3_FIELD_DESC = new TField("b3", TType.STRING, (short)4);
  private static final TField B4_FIELD_DESC = new TField("b4", TType.STRING, (short)5);
  private static final TField B5_FIELD_DESC = new TField("b5", TType.STRING, (short)6);
  private static final TField B6_FIELD_DESC = new TField("b6", TType.STRING, (short)7);

  public int a;
  public byte[] b1;
  public byte[] b2;
  public byte[] b3;
  public byte[] b4;
  public byte[] b5;
  public byte[] b6;
  public static final int A = 1;
  public static final int B1 = 2;
  public static final int B2 = 3;
  public static final int B3 = 4;
  public static final int B4 = 5;
  public static final int B5 = 6;
  public static final int B6 = 7;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments
  private static final int __A_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(A, new FieldMetaData("a", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(B1, new FieldMetaData("b1", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(B2, new FieldMetaData("b2", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(B3, new FieldMetaData("b3", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(B4, new FieldMetaData("b4", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(B5, new FieldMetaData("b5", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(B6, new FieldMetaData("b6", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(Base64.class, metaDataMap);
  }

  public Base64() {
  }

  public Base64(
    int a,
    byte[] b1,
    byte[] b2,
    byte[] b3,
    byte[] b4,
    byte[] b5,
    byte[] b6)
  {
    this();
    this.a = a;
    setAIsSet(true);
    this.b1 = b1;
    this.b2 = b2;
    this.b3 = b3;
    this.b4 = b4;
    this.b5 = b5;
    this.b6 = b6;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Base64(Base64 other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.a = TBaseHelper.deepCopy(other.a);
    if (other.isSetB1()) {
      this.b1 = TBaseHelper.deepCopy(other.b1);
    }
    if (other.isSetB2()) {
      this.b2 = TBaseHelper.deepCopy(other.b2);
    }
    if (other.isSetB3()) {
      this.b3 = TBaseHelper.deepCopy(other.b3);
    }
    if (other.isSetB4()) {
      this.b4 = TBaseHelper.deepCopy(other.b4);
    }
    if (other.isSetB5()) {
      this.b5 = TBaseHelper.deepCopy(other.b5);
    }
    if (other.isSetB6()) {
      this.b6 = TBaseHelper.deepCopy(other.b6);
    }
  }

  public Base64 deepCopy() {
    return new Base64(this);
  }

  @Deprecated
  public Base64 clone() {
    return new Base64(this);
  }

  public int  getA() {
    return this.a;
  }

  public Base64 setA(int a) {
    this.a = a;
    setAIsSet(true);
    return this;
  }

  public void unsetA() {
    __isset_bit_vector.clear(__A_ISSET_ID);
  }

  // Returns true if field a is set (has been assigned a value) and false otherwise
  public boolean isSetA() {
    return __isset_bit_vector.get(__A_ISSET_ID);
  }

  public void setAIsSet(boolean value) {
    __isset_bit_vector.set(__A_ISSET_ID, value);
  }

  public byte[]  getB1() {
    return this.b1;
  }

  public Base64 setB1(byte[] b1) {
    this.b1 = b1;
    return this;
  }

  public void unsetB1() {
    this.b1 = null;
  }

  // Returns true if field b1 is set (has been assigned a value) and false otherwise
  public boolean isSetB1() {
    return this.b1 != null;
  }

  public void setB1IsSet(boolean value) {
    if (!value) {
      this.b1 = null;
    }
  }

  public byte[]  getB2() {
    return this.b2;
  }

  public Base64 setB2(byte[] b2) {
    this.b2 = b2;
    return this;
  }

  public void unsetB2() {
    this.b2 = null;
  }

  // Returns true if field b2 is set (has been assigned a value) and false otherwise
  public boolean isSetB2() {
    return this.b2 != null;
  }

  public void setB2IsSet(boolean value) {
    if (!value) {
      this.b2 = null;
    }
  }

  public byte[]  getB3() {
    return this.b3;
  }

  public Base64 setB3(byte[] b3) {
    this.b3 = b3;
    return this;
  }

  public void unsetB3() {
    this.b3 = null;
  }

  // Returns true if field b3 is set (has been assigned a value) and false otherwise
  public boolean isSetB3() {
    return this.b3 != null;
  }

  public void setB3IsSet(boolean value) {
    if (!value) {
      this.b3 = null;
    }
  }

  public byte[]  getB4() {
    return this.b4;
  }

  public Base64 setB4(byte[] b4) {
    this.b4 = b4;
    return this;
  }

  public void unsetB4() {
    this.b4 = null;
  }

  // Returns true if field b4 is set (has been assigned a value) and false otherwise
  public boolean isSetB4() {
    return this.b4 != null;
  }

  public void setB4IsSet(boolean value) {
    if (!value) {
      this.b4 = null;
    }
  }

  public byte[]  getB5() {
    return this.b5;
  }

  public Base64 setB5(byte[] b5) {
    this.b5 = b5;
    return this;
  }

  public void unsetB5() {
    this.b5 = null;
  }

  // Returns true if field b5 is set (has been assigned a value) and false otherwise
  public boolean isSetB5() {
    return this.b5 != null;
  }

  public void setB5IsSet(boolean value) {
    if (!value) {
      this.b5 = null;
    }
  }

  public byte[]  getB6() {
    return this.b6;
  }

  public Base64 setB6(byte[] b6) {
    this.b6 = b6;
    return this;
  }

  public void unsetB6() {
    this.b6 = null;
  }

  // Returns true if field b6 is set (has been assigned a value) and false otherwise
  public boolean isSetB6() {
    return this.b6 != null;
  }

  public void setB6IsSet(boolean value) {
    if (!value) {
      this.b6 = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case A:
      if (value == null) {
        unsetA();
      } else {
        setA((Integer)value);
      }
      break;

    case B1:
      if (value == null) {
        unsetB1();
      } else {
        setB1((byte[])value);
      }
      break;

    case B2:
      if (value == null) {
        unsetB2();
      } else {
        setB2((byte[])value);
      }
      break;

    case B3:
      if (value == null) {
        unsetB3();
      } else {
        setB3((byte[])value);
      }
      break;

    case B4:
      if (value == null) {
        unsetB4();
      } else {
        setB4((byte[])value);
      }
      break;

    case B5:
      if (value == null) {
        unsetB5();
      } else {
        setB5((byte[])value);
      }
      break;

    case B6:
      if (value == null) {
        unsetB6();
      } else {
        setB6((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case A:
      return new Integer(getA());

    case B1:
      return getB1();

    case B2:
      return getB2();

    case B3:
      return getB3();

    case B4:
      return getB4();

    case B5:
      return getB5();

    case B6:
      return getB6();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case A:
      return isSetA();
    case B1:
      return isSetB1();
    case B2:
      return isSetB2();
    case B3:
      return isSetB3();
    case B4:
      return isSetB4();
    case B5:
      return isSetB5();
    case B6:
      return isSetB6();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Base64)
      return this.equals((Base64)that);
    return false;
  }

  public boolean equals(Base64 that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_a = true;
    boolean that_present_a = true;
    if (this_present_a || that_present_a) {
      if (!(this_present_a && that_present_a))
        return false;
      if (!TBaseHelper.equalsNobinary(this.a, that.a))
        return false;
    }

    boolean this_present_b1 = true && this.isSetB1();
    boolean that_present_b1 = true && that.isSetB1();
    if (this_present_b1 || that_present_b1) {
      if (!(this_present_b1 && that_present_b1))
        return false;
      if (!TBaseHelper.equalsSlow(this.b1, that.b1))
        return false;
    }

    boolean this_present_b2 = true && this.isSetB2();
    boolean that_present_b2 = true && that.isSetB2();
    if (this_present_b2 || that_present_b2) {
      if (!(this_present_b2 && that_present_b2))
        return false;
      if (!TBaseHelper.equalsSlow(this.b2, that.b2))
        return false;
    }

    boolean this_present_b3 = true && this.isSetB3();
    boolean that_present_b3 = true && that.isSetB3();
    if (this_present_b3 || that_present_b3) {
      if (!(this_present_b3 && that_present_b3))
        return false;
      if (!TBaseHelper.equalsSlow(this.b3, that.b3))
        return false;
    }

    boolean this_present_b4 = true && this.isSetB4();
    boolean that_present_b4 = true && that.isSetB4();
    if (this_present_b4 || that_present_b4) {
      if (!(this_present_b4 && that_present_b4))
        return false;
      if (!TBaseHelper.equalsSlow(this.b4, that.b4))
        return false;
    }

    boolean this_present_b5 = true && this.isSetB5();
    boolean that_present_b5 = true && that.isSetB5();
    if (this_present_b5 || that_present_b5) {
      if (!(this_present_b5 && that_present_b5))
        return false;
      if (!TBaseHelper.equalsSlow(this.b5, that.b5))
        return false;
    }

    boolean this_present_b6 = true && this.isSetB6();
    boolean that_present_b6 = true && that.isSetB6();
    if (this_present_b6 || that_present_b6) {
      if (!(this_present_b6 && that_present_b6))
        return false;
      if (!TBaseHelper.equalsSlow(this.b6, that.b6))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Base64 other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetA()).compareTo(other.isSetA());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(a, other.a);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetB1()).compareTo(other.isSetB1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(b1, other.b1);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetB2()).compareTo(other.isSetB2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(b2, other.b2);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetB3()).compareTo(other.isSetB3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(b3, other.b3);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetB4()).compareTo(other.isSetB4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(b4, other.b4);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetB5()).compareTo(other.isSetB5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(b5, other.b5);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetB6()).compareTo(other.isSetB6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(b6, other.b6);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case A:
          if (field.type == TType.I32) {
            this.a = iprot.readI32();
            setAIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case B1:
          if (field.type == TType.STRING) {
            this.b1 = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case B2:
          if (field.type == TType.STRING) {
            this.b2 = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case B3:
          if (field.type == TType.STRING) {
            this.b3 = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case B4:
          if (field.type == TType.STRING) {
            this.b4 = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case B5:
          if (field.type == TType.STRING) {
            this.b5 = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case B6:
          if (field.type == TType.STRING) {
            this.b6 = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(A_FIELD_DESC);
    oprot.writeI32(this.a);
    oprot.writeFieldEnd();
    if (this.b1 != null) {
      oprot.writeFieldBegin(B1_FIELD_DESC);
      oprot.writeBinary(this.b1);
      oprot.writeFieldEnd();
    }
    if (this.b2 != null) {
      oprot.writeFieldBegin(B2_FIELD_DESC);
      oprot.writeBinary(this.b2);
      oprot.writeFieldEnd();
    }
    if (this.b3 != null) {
      oprot.writeFieldBegin(B3_FIELD_DESC);
      oprot.writeBinary(this.b3);
      oprot.writeFieldEnd();
    }
    if (this.b4 != null) {
      oprot.writeFieldBegin(B4_FIELD_DESC);
      oprot.writeBinary(this.b4);
      oprot.writeFieldEnd();
    }
    if (this.b5 != null) {
      oprot.writeFieldBegin(B5_FIELD_DESC);
      oprot.writeBinary(this.b5);
      oprot.writeFieldEnd();
    }
    if (this.b6 != null) {
      oprot.writeFieldBegin(B6_FIELD_DESC);
      oprot.writeBinary(this.b6);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("Base64");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("a");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this. getA(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("b1");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getB1() == null) {
      sb.append("null");
    } else {
        int __b1_size = Math.min(this. getB1().length, 128);
        for (int i = 0; i < __b1_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getB1()[i]).length() > 1 ? Integer.toHexString(this. getB1()[i]).substring(Integer.toHexString(this. getB1()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getB1()[i]).toUpperCase());
        }
        if (this. getB1().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("b2");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getB2() == null) {
      sb.append("null");
    } else {
        int __b2_size = Math.min(this. getB2().length, 128);
        for (int i = 0; i < __b2_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getB2()[i]).length() > 1 ? Integer.toHexString(this. getB2()[i]).substring(Integer.toHexString(this. getB2()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getB2()[i]).toUpperCase());
        }
        if (this. getB2().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("b3");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getB3() == null) {
      sb.append("null");
    } else {
        int __b3_size = Math.min(this. getB3().length, 128);
        for (int i = 0; i < __b3_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getB3()[i]).length() > 1 ? Integer.toHexString(this. getB3()[i]).substring(Integer.toHexString(this. getB3()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getB3()[i]).toUpperCase());
        }
        if (this. getB3().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("b4");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getB4() == null) {
      sb.append("null");
    } else {
        int __b4_size = Math.min(this. getB4().length, 128);
        for (int i = 0; i < __b4_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getB4()[i]).length() > 1 ? Integer.toHexString(this. getB4()[i]).substring(Integer.toHexString(this. getB4()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getB4()[i]).toUpperCase());
        }
        if (this. getB4().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("b5");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getB5() == null) {
      sb.append("null");
    } else {
        int __b5_size = Math.min(this. getB5().length, 128);
        for (int i = 0; i < __b5_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getB5()[i]).length() > 1 ? Integer.toHexString(this. getB5()[i]).substring(Integer.toHexString(this. getB5()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getB5()[i]).toUpperCase());
        }
        if (this. getB5().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("b6");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getB6() == null) {
      sb.append("null");
    } else {
        int __b6_size = Math.min(this. getB6().length, 128);
        for (int i = 0; i < __b6_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getB6()[i]).length() > 1 ? Integer.toHexString(this. getB6()[i]).substring(Integer.toHexString(this. getB6()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getB6()[i]).toUpperCase());
        }
        if (this. getB6().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

