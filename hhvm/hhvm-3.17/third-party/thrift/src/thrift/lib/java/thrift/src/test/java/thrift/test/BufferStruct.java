/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.facebook.thrift.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class BufferStruct implements TBase, java.io.Serializable, Cloneable, Comparable<BufferStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("BufferStruct");
  private static final TField BIN_FIELD_FIELD_DESC = new TField("bin_field", TType.STRING, (short)1);
  private static final TField IOBUF_PTR_FIELD_FIELD_DESC = new TField("iobuf_ptr_field", TType.STRING, (short)2);
  private static final TField IOBUF_FIELD_FIELD_DESC = new TField("iobuf_field", TType.STRING, (short)3);

  public byte[] bin_field;
  public byte[] iobuf_ptr_field;
  public byte[] iobuf_field;
  public static final int BIN_FIELD = 1;
  public static final int IOBUF_PTR_FIELD = 2;
  public static final int IOBUF_FIELD = 3;
  public static boolean DEFAULT_PRETTY_PRINT = true;

  // isset id assignments

  public static final Map<Integer, FieldMetaData> metaDataMap;
  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(BIN_FIELD, new FieldMetaData("bin_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(IOBUF_PTR_FIELD, new FieldMetaData("iobuf_ptr_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    tmpMetaDataMap.put(IOBUF_FIELD, new FieldMetaData("iobuf_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(BufferStruct.class, metaDataMap);
  }

  public BufferStruct() {
  }

  public BufferStruct(
    byte[] bin_field,
    byte[] iobuf_ptr_field,
    byte[] iobuf_field)
  {
    this();
    this.bin_field = bin_field;
    this.iobuf_ptr_field = iobuf_ptr_field;
    this.iobuf_field = iobuf_field;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BufferStruct(BufferStruct other) {
    if (other.isSetBin_field()) {
      this.bin_field = TBaseHelper.deepCopy(other.bin_field);
    }
    if (other.isSetIobuf_ptr_field()) {
      this.iobuf_ptr_field = TBaseHelper.deepCopy(other.iobuf_ptr_field);
    }
    if (other.isSetIobuf_field()) {
      this.iobuf_field = TBaseHelper.deepCopy(other.iobuf_field);
    }
  }

  public BufferStruct deepCopy() {
    return new BufferStruct(this);
  }

  @Deprecated
  public BufferStruct clone() {
    return new BufferStruct(this);
  }

  public byte[]  getBin_field() {
    return this.bin_field;
  }

  public BufferStruct setBin_field(byte[] bin_field) {
    this.bin_field = bin_field;
    return this;
  }

  public void unsetBin_field() {
    this.bin_field = null;
  }

  // Returns true if field bin_field is set (has been assigned a value) and false otherwise
  public boolean isSetBin_field() {
    return this.bin_field != null;
  }

  public void setBin_fieldIsSet(boolean value) {
    if (!value) {
      this.bin_field = null;
    }
  }

  public byte[]  getIobuf_ptr_field() {
    return this.iobuf_ptr_field;
  }

  public BufferStruct setIobuf_ptr_field(byte[] iobuf_ptr_field) {
    this.iobuf_ptr_field = iobuf_ptr_field;
    return this;
  }

  public void unsetIobuf_ptr_field() {
    this.iobuf_ptr_field = null;
  }

  // Returns true if field iobuf_ptr_field is set (has been assigned a value) and false otherwise
  public boolean isSetIobuf_ptr_field() {
    return this.iobuf_ptr_field != null;
  }

  public void setIobuf_ptr_fieldIsSet(boolean value) {
    if (!value) {
      this.iobuf_ptr_field = null;
    }
  }

  public byte[]  getIobuf_field() {
    return this.iobuf_field;
  }

  public BufferStruct setIobuf_field(byte[] iobuf_field) {
    this.iobuf_field = iobuf_field;
    return this;
  }

  public void unsetIobuf_field() {
    this.iobuf_field = null;
  }

  // Returns true if field iobuf_field is set (has been assigned a value) and false otherwise
  public boolean isSetIobuf_field() {
    return this.iobuf_field != null;
  }

  public void setIobuf_fieldIsSet(boolean value) {
    if (!value) {
      this.iobuf_field = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case BIN_FIELD:
      if (value == null) {
        unsetBin_field();
      } else {
        setBin_field((byte[])value);
      }
      break;

    case IOBUF_PTR_FIELD:
      if (value == null) {
        unsetIobuf_ptr_field();
      } else {
        setIobuf_ptr_field((byte[])value);
      }
      break;

    case IOBUF_FIELD:
      if (value == null) {
        unsetIobuf_field();
      } else {
        setIobuf_field((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case BIN_FIELD:
      return getBin_field();

    case IOBUF_PTR_FIELD:
      return getIobuf_ptr_field();

    case IOBUF_FIELD:
      return getIobuf_field();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case BIN_FIELD:
      return isSetBin_field();
    case IOBUF_PTR_FIELD:
      return isSetIobuf_ptr_field();
    case IOBUF_FIELD:
      return isSetIobuf_field();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BufferStruct)
      return this.equals((BufferStruct)that);
    return false;
  }

  public boolean equals(BufferStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_bin_field = true && this.isSetBin_field();
    boolean that_present_bin_field = true && that.isSetBin_field();
    if (this_present_bin_field || that_present_bin_field) {
      if (!(this_present_bin_field && that_present_bin_field))
        return false;
      if (!TBaseHelper.equalsSlow(this.bin_field, that.bin_field))
        return false;
    }

    boolean this_present_iobuf_ptr_field = true && this.isSetIobuf_ptr_field();
    boolean that_present_iobuf_ptr_field = true && that.isSetIobuf_ptr_field();
    if (this_present_iobuf_ptr_field || that_present_iobuf_ptr_field) {
      if (!(this_present_iobuf_ptr_field && that_present_iobuf_ptr_field))
        return false;
      if (!TBaseHelper.equalsSlow(this.iobuf_ptr_field, that.iobuf_ptr_field))
        return false;
    }

    boolean this_present_iobuf_field = true && this.isSetIobuf_field();
    boolean that_present_iobuf_field = true && that.isSetIobuf_field();
    if (this_present_iobuf_field || that_present_iobuf_field) {
      if (!(this_present_iobuf_field && that_present_iobuf_field))
        return false;
      if (!TBaseHelper.equalsSlow(this.iobuf_field, that.iobuf_field))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BufferStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBin_field()).compareTo(other.isSetBin_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(bin_field, other.bin_field);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIobuf_ptr_field()).compareTo(other.isSetIobuf_ptr_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(iobuf_ptr_field, other.iobuf_ptr_field);
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetIobuf_field()).compareTo(other.isSetIobuf_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(iobuf_field, other.iobuf_field);
    if (lastComparison != 0) {
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case BIN_FIELD:
          if (field.type == TType.STRING) {
            this.bin_field = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IOBUF_PTR_FIELD:
          if (field.type == TType.STRING) {
            this.iobuf_ptr_field = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IOBUF_FIELD:
          if (field.type == TType.STRING) {
            this.iobuf_field = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.bin_field != null) {
      oprot.writeFieldBegin(BIN_FIELD_FIELD_DESC);
      oprot.writeBinary(this.bin_field);
      oprot.writeFieldEnd();
    }
    if (this.iobuf_ptr_field != null) {
      oprot.writeFieldBegin(IOBUF_PTR_FIELD_FIELD_DESC);
      oprot.writeBinary(this.iobuf_ptr_field);
      oprot.writeFieldEnd();
    }
    if (this.iobuf_field != null) {
      oprot.writeFieldBegin(IOBUF_FIELD_FIELD_DESC);
      oprot.writeBinary(this.iobuf_field);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(DEFAULT_PRETTY_PRINT);
  }

  @Override
  public String toString(boolean prettyPrint) {
    return toString(1, prettyPrint);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("BufferStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("bin_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getBin_field() == null) {
      sb.append("null");
    } else {
        int __bin_field_size = Math.min(this. getBin_field().length, 128);
        for (int i = 0; i < __bin_field_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getBin_field()[i]).length() > 1 ? Integer.toHexString(this. getBin_field()[i]).substring(Integer.toHexString(this. getBin_field()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getBin_field()[i]).toUpperCase());
        }
        if (this. getBin_field().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("iobuf_ptr_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getIobuf_ptr_field() == null) {
      sb.append("null");
    } else {
        int __iobuf_ptr_field_size = Math.min(this. getIobuf_ptr_field().length, 128);
        for (int i = 0; i < __iobuf_ptr_field_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getIobuf_ptr_field()[i]).length() > 1 ? Integer.toHexString(this. getIobuf_ptr_field()[i]).substring(Integer.toHexString(this. getIobuf_ptr_field()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getIobuf_ptr_field()[i]).toUpperCase());
        }
        if (this. getIobuf_ptr_field().length > 128) sb.append(" ...");
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("iobuf_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this. getIobuf_field() == null) {
      sb.append("null");
    } else {
        int __iobuf_field_size = Math.min(this. getIobuf_field().length, 128);
        for (int i = 0; i < __iobuf_field_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this. getIobuf_field()[i]).length() > 1 ? Integer.toHexString(this. getIobuf_field()[i]).substring(Integer.toHexString(this. getIobuf_field()[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this. getIobuf_field()[i]).toUpperCase());
        }
        if (this. getIobuf_field().length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

